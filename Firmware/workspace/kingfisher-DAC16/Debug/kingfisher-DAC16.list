
kingfisher-DAC16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b070  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b1f8  0800b1f8  0000c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b29c  0800b29c  0000d16c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b29c  0800b29c  0000c29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2a4  0800b2a4  0000d16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2a4  0800b2a4  0000c2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2a8  0800b2a8  0000c2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800b2ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  2000016c  0800b418  0000d16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000222c  0800b418  0000d22c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214cf  00000000  00000000  0000d19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f5f  00000000  00000000  0002e66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f4  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8c2  00000000  00000000  0003683c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242f9  00000000  00000000  000630fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca0e  00000000  00000000  000873f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc8  00000000  00000000  00183e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0018bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b1e0 	.word	0x0800b1e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000170 	.word	0x20000170
 80001c4:	0800b1e0 	.word	0x0800b1e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <DACx1416_initialize>:

#include "DACx1416.h"
#include "main.h"
#include "stdlib.h"

DACx1416_error_t DACx1416_initialize(DACx1416 *dac) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]


	dac->port.nCS(0);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	2000      	movs	r0, #0
 80004c6:	4798      	blx	r3
	dac->port.nCLR(0);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	2000      	movs	r0, #0
 80004ce:	4798      	blx	r3
	dac->port.nLDAC(0);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	2000      	movs	r0, #0
 80004d6:	4798      	blx	r3
	dac->port.nRESET(0);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	2000      	movs	r0, #0
 80004de:	4798      	blx	r3

	dac->port.nCS(1);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	2001      	movs	r0, #1
 80004e6:	4798      	blx	r3
	dac->port.nCLR(1);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	2001      	movs	r0, #1
 80004ee:	4798      	blx	r3
	dac->port.nLDAC(1);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	691b      	ldr	r3, [r3, #16]
 80004f4:	2001      	movs	r0, #1
 80004f6:	4798      	blx	r3
	dac->port.nRESET(1);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	2001      	movs	r0, #1
 80004fe:	4798      	blx	r3
//	DACx1416_get_syncConfig(dac, &dac->syncConfig);
//	DACx1416_get_toggConfig(dac, &dac->toggConfig);
//	DACx1416_get_pwdwn(dac, &dac->chPwrDwn);
//	DACx1416_get_dacRange(dac, &dac->dacRange);

	return DACx1416_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <DACx1416_calculate_crc8>:

extern SPI_HandleTypeDef hspi1;
extern CRC_HandleTypeDef hcrc;


uint8_t DACx1416_calculate_crc8(uint8_t *data, uint32_t length) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]

	// Calculate CRC
	uint32_t crc_result = HAL_CRC_Calculate(&hcrc, (uint32_t*) data, length);
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <DACx1416_calculate_crc8+0x24>)
 800051c:	f001 fae4 	bl	8001ae8 <HAL_CRC_Calculate>
 8000520:	60f8      	str	r0, [r7, #12]

	// Since we're using an 8-bit CRC, the result will be in the lower 8 bits
	return (uint8_t) crc_result;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	b2db      	uxtb	r3, r3
}
 8000526:	4618      	mov	r0, r3
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000188 	.word	0x20000188

08000534 <DACx1416_SPI_transmit>:


void DACx1416_SPI_transmit(uint8_t *txBuffer, uint16_t size) {
 8000534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000538:	b087      	sub	sp, #28
 800053a:	af02      	add	r7, sp, #8
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	460b      	mov	r3, r1
 8000540:	807b      	strh	r3, [r7, #2]
 8000542:	466b      	mov	r3, sp
 8000544:	461e      	mov	r6, r3
    uint8_t rxBuffer[size];  // Dummy receive buffer
 8000546:	8879      	ldrh	r1, [r7, #2]
 8000548:	460b      	mov	r3, r1
 800054a:	3b01      	subs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	b28b      	uxth	r3, r1
 8000550:	2200      	movs	r2, #0
 8000552:	4698      	mov	r8, r3
 8000554:	4691      	mov	r9, r2
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800056a:	b28b      	uxth	r3, r1
 800056c:	2200      	movs	r2, #0
 800056e:	461c      	mov	r4, r3
 8000570:	4615      	mov	r5, r2
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	f04f 0300 	mov.w	r3, #0
 800057a:	00eb      	lsls	r3, r5, #3
 800057c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000580:	00e2      	lsls	r2, r4, #3
 8000582:	460b      	mov	r3, r1
 8000584:	3307      	adds	r3, #7
 8000586:	08db      	lsrs	r3, r3, #3
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	ebad 0d03 	sub.w	sp, sp, r3
 800058e:	ab02      	add	r3, sp, #8
 8000590:	3300      	adds	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]

    // Transmit data and simultaneously receive data (full-duplex)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, 1000) != HAL_OK) {
 8000594:	887b      	ldrh	r3, [r7, #2]
 8000596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <DACx1416_SPI_transmit+0x80>)
 80005a2:	f004 fd06 	bl	8004fb2 <HAL_SPI_TransmitReceive>
 80005a6:	46b5      	mov	sp, r6
        // Communication error
        // Error_Handler();
    }
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005b2:	bf00      	nop
 80005b4:	200001ac 	.word	0x200001ac

080005b8 <DACx1416_SPI_receive>:


void DACx1416_SPI_receive(uint8_t *rxBuffer,uint16_t size){
 80005b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005bc:	b087      	sub	sp, #28
 80005be:	af02      	add	r7, sp, #8
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	807b      	strh	r3, [r7, #2]
 80005c6:	466b      	mov	r3, sp
 80005c8:	461e      	mov	r6, r3

	uint8_t txBuffer[size];  // Buffer with dummy data
 80005ca:	8879      	ldrh	r1, [r7, #2]
 80005cc:	460b      	mov	r3, r1
 80005ce:	3b01      	subs	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	b28b      	uxth	r3, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	4698      	mov	r8, r3
 80005d8:	4691      	mov	r9, r2
 80005da:	f04f 0200 	mov.w	r2, #0
 80005de:	f04f 0300 	mov.w	r3, #0
 80005e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005ee:	b28b      	uxth	r3, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	461c      	mov	r4, r3
 80005f4:	4615      	mov	r5, r2
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	00eb      	lsls	r3, r5, #3
 8000600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000604:	00e2      	lsls	r2, r4, #3
 8000606:	460b      	mov	r3, r1
 8000608:	3307      	adds	r3, #7
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	ebad 0d03 	sub.w	sp, sp, r3
 8000612:	ab02      	add	r3, sp, #8
 8000614:	3300      	adds	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	memset(txBuffer, 0x00, size);  // Fill with dummy bytes (0x00 or 0xFF)
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	461a      	mov	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	68b8      	ldr	r0, [r7, #8]
 8000620:	f00a fb00 	bl	800ac24 <memset>

	// Full-duplex transmission and reception (blocking mode)
	if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, 1000) != HAL_OK)
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	4804      	ldr	r0, [pc, #16]	@ (8000644 <DACx1416_SPI_receive+0x8c>)
 8000632:	f004 fcbe 	bl	8004fb2 <HAL_SPI_TransmitReceive>
 8000636:	46b5      	mov	sp, r6
	{
		// Communication error
		//Error_Handler();
	}

}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000642:	bf00      	nop
 8000644:	200001ac 	.word	0x200001ac

08000648 <DACx1416_SPI_transmitReceive>:


void DACx1416_SPI_transmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size){
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	4613      	mov	r3, r2
 8000654:	80fb      	strh	r3, [r7, #6]


    // Full-duplex transmission and reception (blocking mode)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, 1000) != HAL_OK)
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <DACx1416_SPI_transmitReceive+0x28>)
 8000664:	f004 fca5 	bl	8004fb2 <HAL_SPI_TransmitReceive>
    {
        // Communication error
        //Error_Handler();
    }

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001ac 	.word	0x200001ac

08000674 <DACx1416_nCS>:

void DACx1416_nCS(uint8_t value){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	if(value){
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <DACx1416_nCS+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f001 fee0 	bl	8002450 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
	}
}
 8000690:	e005      	b.n	800069e <DACx1416_nCS+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
 8000692:	2200      	movs	r2, #0
 8000694:	2110      	movs	r1, #16
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f001 fed9 	bl	8002450 <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <DACx1416_nLDAC>:

void DACx1416_nLDAC(uint8_t value){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	if(value){
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d005      	beq.n	80006c4 <DACx1416_nLDAC+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // Set CS high
 80006b8:	2201      	movs	r2, #1
 80006ba:	2120      	movs	r1, #32
 80006bc:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <DACx1416_nLDAC+0x30>)
 80006be:	f001 fec7 	bl	8002450 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set CS low
	}
}
 80006c2:	e004      	b.n	80006ce <DACx1416_nLDAC+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set CS low
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <DACx1416_nLDAC+0x30>)
 80006ca:	f001 fec1 	bl	8002450 <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48000400 	.word	0x48000400

080006dc <DACx1416_nRESET>:
void DACx1416_nRESET(uint8_t value){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	if(value){
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <DACx1416_nRESET+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // Set CS high
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4806      	ldr	r0, [pc, #24]	@ (800070c <DACx1416_nRESET+0x30>)
 80006f2:	f001 fead 	bl	8002450 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set CS low
	}
}
 80006f6:	e004      	b.n	8000702 <DACx1416_nRESET+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set CS low
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	@ 0x40
 80006fc:	4803      	ldr	r0, [pc, #12]	@ (800070c <DACx1416_nRESET+0x30>)
 80006fe:	f001 fea7 	bl	8002450 <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	48000400 	.word	0x48000400

08000710 <DACx1416_nCLR>:
void DACx1416_nCLR(uint8_t value){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	if(value){
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <DACx1416_nCLR+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // Set CS high
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	4806      	ldr	r0, [pc, #24]	@ (8000740 <DACx1416_nCLR+0x30>)
 8000726:	f001 fe93 	bl	8002450 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set CS low
	}
}
 800072a:	e004      	b.n	8000736 <DACx1416_nCLR+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set CS low
 800072c:	2200      	movs	r2, #0
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <DACx1416_nCLR+0x30>)
 8000732:	f001 fe8d 	bl	8002450 <HAL_GPIO_WritePin>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	48000400 	.word	0x48000400

08000744 <DACx1416_tgl>:

void DACx1416_tgl(uint8_t value){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (value>>2) & 0x01);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	089b      	lsrs	r3, r3, #2
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	2104      	movs	r1, #4
 800075e:	480d      	ldr	r0, [pc, #52]	@ (8000794 <DACx1416_tgl+0x50>)
 8000760:	f001 fe76 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, (value>>1) & 0x01);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2102      	movs	r1, #2
 8000774:	4807      	ldr	r0, [pc, #28]	@ (8000794 <DACx1416_tgl+0x50>)
 8000776:	f001 fe6b 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (value) & 0x01);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	2101      	movs	r1, #1
 8000786:	4803      	ldr	r0, [pc, #12]	@ (8000794 <DACx1416_tgl+0x50>)
 8000788:	f001 fe62 	bl	8002450 <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	48000400 	.word	0x48000400

08000798 <parseCmd>:
}




void parseCmd(SLIP_HandleTypeDef *slip, uint8_t *data, uint32_t len) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]

	uint8_t cmd = (data[0]>>6) & 0x3;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	099b      	lsrs	r3, r3, #6
 80007aa:	77fb      	strb	r3, [r7, #31]

	switch(cmd){
 80007ac:	7ffb      	ldrb	r3, [r7, #31]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	f000 809f 	beq.w	80008f2 <parseCmd+0x15a>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	f300 809e 	bgt.w	80008f6 <parseCmd+0x15e>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <parseCmd+0x2c>
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d027      	beq.n	8000812 <parseCmd+0x7a>
		//parseExtendedCmd(data,  len);
		break;
	}
	default:
		// Handle unexpected commands, if necessary
		break;
 80007c2:	e098      	b.n	80008f6 <parseCmd+0x15e>
		if(len == 3){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d10f      	bne.n	80007ea <parseCmd+0x52>
			dacUnit.port.nCS(0);
 80007ca:	4b4f      	ldr	r3, [pc, #316]	@ (8000908 <parseCmd+0x170>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	2000      	movs	r0, #0
 80007d0:	4798      	blx	r3
			dacUnit.port.SPI_transmitReceive(data, rxBuffer, 3);
 80007d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000908 <parseCmd+0x170>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f107 0118 	add.w	r1, r7, #24
 80007da:	2203      	movs	r2, #3
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	4798      	blx	r3
			dacUnit.port.nCS(1);
 80007e0:	4b49      	ldr	r3, [pc, #292]	@ (8000908 <parseCmd+0x170>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	2001      	movs	r0, #1
 80007e6:	4798      	blx	r3
		break;
 80007e8:	e087      	b.n	80008fa <parseCmd+0x162>
		else if(len == 4){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	f040 8084 	bne.w	80008fa <parseCmd+0x162>
			dacUnit.port.nCS(0);
 80007f2:	4b45      	ldr	r3, [pc, #276]	@ (8000908 <parseCmd+0x170>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	2000      	movs	r0, #0
 80007f8:	4798      	blx	r3
			dacUnit.port.SPI_transmitReceive(data, rxBuffer, 4);
 80007fa:	4b43      	ldr	r3, [pc, #268]	@ (8000908 <parseCmd+0x170>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f107 0118 	add.w	r1, r7, #24
 8000802:	2204      	movs	r2, #4
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	4798      	blx	r3
			dacUnit.port.nCS(1);
 8000808:	4b3f      	ldr	r3, [pc, #252]	@ (8000908 <parseCmd+0x170>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	2001      	movs	r0, #1
 800080e:	4798      	blx	r3
		break;
 8000810:	e073      	b.n	80008fa <parseCmd+0x162>
		uint8_t address = data[0] & 0x3F;
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800081a:	77bb      	strb	r3, [r7, #30]
		uint8_t txBuffer[4] = { address | (1 << 7), 0xFF, 0xFF , 0};
 800081c:	7fbb      	ldrb	r3, [r7, #30]
 800081e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000822:	b2db      	uxtb	r3, r3
 8000824:	753b      	strb	r3, [r7, #20]
 8000826:	23ff      	movs	r3, #255	@ 0xff
 8000828:	757b      	strb	r3, [r7, #21]
 800082a:	23ff      	movs	r3, #255	@ 0xff
 800082c:	75bb      	strb	r3, [r7, #22]
 800082e:	2300      	movs	r3, #0
 8000830:	75fb      	strb	r3, [r7, #23]
		if(len == 1){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d126      	bne.n	8000886 <parseCmd+0xee>
			dacUnit.port.nCS(0);
 8000838:	4b33      	ldr	r3, [pc, #204]	@ (8000908 <parseCmd+0x170>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	2000      	movs	r0, #0
 800083e:	4798      	blx	r3
			dacUnit.port.SPI_transmitReceive(txBuffer, rxBuffer, 3);
 8000840:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <parseCmd+0x170>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f107 0110 	add.w	r1, r7, #16
 8000848:	f107 0014 	add.w	r0, r7, #20
 800084c:	2203      	movs	r2, #3
 800084e:	4798      	blx	r3
			dacUnit.port.nCS(1);
 8000850:	4b2d      	ldr	r3, [pc, #180]	@ (8000908 <parseCmd+0x170>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	2001      	movs	r0, #1
 8000856:	4798      	blx	r3
			dacUnit.port.nCS(0);
 8000858:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <parseCmd+0x170>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	2000      	movs	r0, #0
 800085e:	4798      	blx	r3
			dacUnit.port.SPI_receive(rxBuffer, 3);
 8000860:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <parseCmd+0x170>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	2103      	movs	r1, #3
 800086a:	4610      	mov	r0, r2
 800086c:	4798      	blx	r3
			dacUnit.port.nCS(1);
 800086e:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <parseCmd+0x170>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	2001      	movs	r0, #1
 8000874:	4798      	blx	r3
			slip_send_packet(slip, rxBuffer, 3);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2203      	movs	r2, #3
 800087c:	4619      	mov	r1, r3
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 fbb6 	bl	8000ff0 <slip_send_packet>
		break;
 8000884:	e03b      	b.n	80008fe <parseCmd+0x166>
		else if(len == 2){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d138      	bne.n	80008fe <parseCmd+0x166>
			txBuffer[0] = address | (1 << 7);
 800088c:	7fbb      	ldrb	r3, [r7, #30]
 800088e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000892:	b2db      	uxtb	r3, r3
 8000894:	753b      	strb	r3, [r7, #20]
			txBuffer[1] = 0xFF;
 8000896:	23ff      	movs	r3, #255	@ 0xff
 8000898:	757b      	strb	r3, [r7, #21]
			txBuffer[2] = 0xFF;
 800089a:	23ff      	movs	r3, #255	@ 0xff
 800089c:	75bb      	strb	r3, [r7, #22]
			txBuffer[3] = data[1];
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	75fb      	strb	r3, [r7, #23]
			dacUnit.port.nCS(0);
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <parseCmd+0x170>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	2000      	movs	r0, #0
 80008aa:	4798      	blx	r3
			dacUnit.port.SPI_transmitReceive(txBuffer, rxBuffer, 4);
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <parseCmd+0x170>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	f107 0110 	add.w	r1, r7, #16
 80008b4:	f107 0014 	add.w	r0, r7, #20
 80008b8:	2204      	movs	r2, #4
 80008ba:	4798      	blx	r3
			dacUnit.port.nCS(1);
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <parseCmd+0x170>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2001      	movs	r0, #1
 80008c2:	4798      	blx	r3
			dacUnit.port.nCS(0);
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <parseCmd+0x170>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	2000      	movs	r0, #0
 80008ca:	4798      	blx	r3
			dacUnit.port.SPI_receive(rxBuffer, 4);
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <parseCmd+0x170>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	2104      	movs	r1, #4
 80008d6:	4610      	mov	r0, r2
 80008d8:	4798      	blx	r3
			dacUnit.port.nCS(1);
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <parseCmd+0x170>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	2001      	movs	r0, #1
 80008e0:	4798      	blx	r3
			slip_send_packet(slip, rxBuffer, 4);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 fb80 	bl	8000ff0 <slip_send_packet>
		break;
 80008f0:	e005      	b.n	80008fe <parseCmd+0x166>
		break;
 80008f2:	bf00      	nop
 80008f4:	e004      	b.n	8000900 <parseCmd+0x168>
		break;
 80008f6:	bf00      	nop
 80008f8:	e002      	b.n	8000900 <parseCmd+0x168>
		break;
 80008fa:	bf00      	nop
 80008fc:	e000      	b.n	8000900 <parseCmd+0x168>
		break;
 80008fe:	bf00      	nop
	}


}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000400 	.word	0x20000400

0800090c <createQueue>:
#include <stdio.h>
#include <stdlib.h>
#include "fifo_queue.h"

// Function to create and initialize the FIFO queue
FIFOQueue* createQueue() {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
    FIFOQueue *queue = (FIFOQueue *)malloc(sizeof(FIFOQueue));
 8000912:	2010      	movs	r0, #16
 8000914:	f009 ffa8 	bl	800a868 <malloc>
 8000918:	4603      	mov	r3, r0
 800091a:	607b      	str	r3, [r7, #4]
    if (!queue) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <createQueue+0x1a>
        //printf("Memory allocation failed.\n");
        return NULL;
 8000922:	2300      	movs	r3, #0
 8000924:	e01d      	b.n	8000962 <createQueue+0x56>
    }
    queue->data = (void **)malloc(sizeof(void*) * MAX_QUEUE_SIZE);
 8000926:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800092a:	f009 ff9d 	bl	800a868 <malloc>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
    if (!queue->data) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d107      	bne.n	800094e <createQueue+0x42>
        printf("Memory allocation failed.\n");
 800093e:	480b      	ldr	r0, [pc, #44]	@ (800096c <createQueue+0x60>)
 8000940:	f00a f968 	bl	800ac14 <puts>
        free(queue);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f009 ff97 	bl	800a878 <free>
        return NULL;
 800094a:	2300      	movs	r3, #0
 800094c:	e009      	b.n	8000962 <createQueue+0x56>
    }
    queue->front = 0;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
    queue->rear = 0;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    queue->size = 0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
    return queue;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0800b1f8 	.word	0x0800b1f8

08000970 <isFull>:

// Function to check if the queue is full
bool isFull(FIFOQueue *queue) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    return queue->size == MAX_QUEUE_SIZE;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000980:	bf0c      	ite	eq
 8000982:	2301      	moveq	r3, #1
 8000984:	2300      	movne	r3, #0
 8000986:	b2db      	uxtb	r3, r3
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <isEmpty>:

// Function to check if the queue is empty
bool isEmpty(FIFOQueue *queue) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    return queue->size == 0;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <enqueue>:

// Function to enqueue an element into the queue
bool enqueue(FIFOQueue *queue, void *value) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
    if (isFull(queue)) {
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ffd5 	bl	8000970 <isFull>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <enqueue+0x1a>
        //printf("Queue is full. Cannot enqueue value.\n");
        return false;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e019      	b.n	8000a04 <enqueue+0x4e>
    }
    queue->data[queue->rear] = value;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]
    queue->rear = (queue->rear + 1) % MAX_QUEUE_SIZE;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	3301      	adds	r3, #1
 80009e6:	425a      	negs	r2, r3
 80009e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80009f0:	bf58      	it	pl
 80009f2:	4253      	negpl	r3, r2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	6093      	str	r3, [r2, #8]
    queue->size++;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60da      	str	r2, [r3, #12]
    return true;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <dequeue>:

// Function to dequeue an element from the queue
void* dequeue(FIFOQueue *queue) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue)) {
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffbd 	bl	8000994 <isEmpty>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <dequeue+0x18>
        //printf("Queue is empty. Cannot dequeue.\n");
        return NULL;  // Return NULL to indicate an error (empty queue)
 8000a20:	2300      	movs	r3, #0
 8000a22:	e019      	b.n	8000a58 <dequeue+0x4c>
    }
    void *value = queue->data[queue->front];
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1) % MAX_QUEUE_SIZE;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	425a      	negs	r2, r3
 8000a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a44:	bf58      	it	pl
 8000a46:	4253      	negpl	r3, r2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	6053      	str	r3, [r2, #4]
    queue->size--;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60da      	str	r2, [r3, #12]
    return value;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d013      	beq.n	8000aa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00b      	beq.n	8000aa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a88:	e000      	b.n	8000a8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f9      	beq.n	8000a8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a96:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <cdc_recv_char>:



// Function to receive a single character from the CDC Rx queue
// Function to receive a single character from the CDC Rx queue (blocking)
char cdc_recv_char(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
    while (isEmpty(cdcRxQueue)) {
 8000ab6:	e002      	b.n	8000abe <cdc_recv_char+0xe>
        // Wait for data to be available in the queue
        HAL_Delay(1); // Sleep for 1 ms (adjust based on your system requirements)
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 feab 	bl	8001814 <HAL_Delay>
    while (isEmpty(cdcRxQueue)) {
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <cdc_recv_char+0x44>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff66 	bl	8000994 <isEmpty>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f4      	bne.n	8000ab8 <cdc_recv_char+0x8>
    }

    uint8_t *value = (uint8_t *)dequeue(cdcRxQueue);  // Dequeue a uint8_t
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <cdc_recv_char+0x44>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff9a 	bl	8000a0c <dequeue>
 8000ad8:	6078      	str	r0, [r7, #4]
    if (!value) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <cdc_recv_char+0x34>
        //printf("Failed to dequeue from CDC Rx queue.\n");
        return 0xFF;  // Return an error value if dequeue fails
 8000ae0:	23ff      	movs	r3, #255	@ 0xff
 8000ae2:	e003      	b.n	8000aec <cdc_recv_char+0x3c>
    }

    uint8_t result = *value;  // Dereference the pointer to get the uint8_t value
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	70fb      	strb	r3, [r7, #3]
    //*value = NULL;
    //free(value);              // Free the allocated memory
    return result;            // Return the dequeued value
 8000aea:	78fb      	ldrb	r3, [r7, #3]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000049c 	.word	0x2000049c

08000af8 <cdc_send_char>:

void cdc_send_char(char ch) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
    // Cast the char to uint8_t* by passing the address of ch
    while (CDC_Transmit_FS((uint8_t*)&ch, 1) != USBD_OK) {
 8000b02:	bf00      	nop
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	2101      	movs	r1, #1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f009 f90f 	bl	8009d2c <CDC_Transmit_FS>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f7      	bne.n	8000b04 <cdc_send_char+0xc>
        // Send the character as a byte over USB
    }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fe3b 	bl	80017a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f884 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f9ca 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b34:	f000 f96a 	bl	8000e0c <MX_DMA_Init>
  MX_SPI1_Init();
 8000b38:	f000 f8fa 	bl	8000d30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b3c:	f000 f936 	bl	8000dac <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000b40:	f009 f806 	bl	8009b50 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000b44:	f000 f8c8 	bl	8000cd8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	//HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
	//HAL_NVIC_EnableIRQ(SPI1_IRQn);
	dacUnit.port.SPI_transmit = DACx1416_SPI_transmit;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <main+0xdc>)
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c00 <main+0xe0>)
 8000b4c:	601a      	str	r2, [r3, #0]
	dacUnit.port.SPI_receive = DACx1416_SPI_receive;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <main+0xdc>)
 8000b50:	4a2c      	ldr	r2, [pc, #176]	@ (8000c04 <main+0xe4>)
 8000b52:	605a      	str	r2, [r3, #4]
	dacUnit.port.SPI_transmitReceive = DACx1416_SPI_transmitReceive;
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <main+0xdc>)
 8000b56:	4a2c      	ldr	r2, [pc, #176]	@ (8000c08 <main+0xe8>)
 8000b58:	609a      	str	r2, [r3, #8]
	dacUnit.port.nCS = DACx1416_nCS;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <main+0xdc>)
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <main+0xec>)
 8000b5e:	60da      	str	r2, [r3, #12]
	dacUnit.port.nLDAC = DACx1416_nLDAC;
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <main+0xdc>)
 8000b62:	4a2b      	ldr	r2, [pc, #172]	@ (8000c10 <main+0xf0>)
 8000b64:	611a      	str	r2, [r3, #16]
	dacUnit.port.nRESET = DACx1416_nRESET;
 8000b66:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <main+0xdc>)
 8000b68:	4a2a      	ldr	r2, [pc, #168]	@ (8000c14 <main+0xf4>)
 8000b6a:	615a      	str	r2, [r3, #20]
	dacUnit.port.nCLR = DACx1416_nCLR;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <main+0xdc>)
 8000b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c18 <main+0xf8>)
 8000b70:	619a      	str	r2, [r3, #24]
	dacUnit.port.TGL = DACx1416_tgl;
 8000b72:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <main+0xdc>)
 8000b74:	4a29      	ldr	r2, [pc, #164]	@ (8000c1c <main+0xfc>)
 8000b76:	61da      	str	r2, [r3, #28]
	dacUnit.port.calculate_crc8 = DACx1416_calculate_crc8;
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <main+0xdc>)
 8000b7a:	4a29      	ldr	r2, [pc, #164]	@ (8000c20 <main+0x100>)
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24

	DACx1416_initialize(&dacUnit);
 8000b7e:	481f      	ldr	r0, [pc, #124]	@ (8000bfc <main+0xdc>)
 8000b80:	f7ff fc9a 	bl	80004b8 <DACx1416_initialize>
//	DACx1416_channelValue(&dacUnit, DACx1416_DAC0, 65535);




	cdcRxQueue = createQueue();
 8000b84:	f7ff fec2 	bl	800090c <createQueue>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a26      	ldr	r2, [pc, #152]	@ (8000c24 <main+0x104>)
 8000b8c:	6013      	str	r3, [r2, #0]
	if (!cdcRxQueue) {
 8000b8e:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <main+0x104>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <main+0x7a>
		//printf("Failed to initialize the global queue.\n");
		return 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e02a      	b.n	8000bf0 <main+0xd0>
	}

	slip.recv_char = cdc_recv_char;
 8000b9a:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <main+0x108>)
 8000b9c:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <main+0x10c>)
 8000b9e:	601a      	str	r2, [r3, #0]
	slip.send_char = cdc_send_char;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <main+0x108>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <main+0x110>)
 8000ba4:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t slipRxData[1024];
	uint8_t slipTxData[1024] = "ABCDE";
 8000ba6:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8000baa:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8000bae:	4921      	ldr	r1, [pc, #132]	@ (8000c34 <main+0x114>)
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	6808      	ldr	r0, [r1, #0]
 8000bb4:	6010      	str	r0, [r2, #0]
 8000bb6:	8889      	ldrh	r1, [r1, #4]
 8000bb8:	8091      	strh	r1, [r2, #4]
 8000bba:	3306      	adds	r3, #6
 8000bbc:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a f82e 	bl	800ac24 <memset>
	while (1) {

		//char c = cdc_recv_char();
		//cdc_send_char(c);

		uint32_t len = slip_recv_packet(&slip, slipRxData, 1024);
 8000bc8:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8000bcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <main+0x108>)
 8000bd4:	f000 fa4c 	bl	8001070 <slip_recv_packet>
 8000bd8:	f8c7 0804 	str.w	r0, [r7, #2052]	@ 0x804
		parseCmd(&slip, slipRxData, len);
 8000bdc:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8000be0:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8000be4:	4619      	mov	r1, r3
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <main+0x108>)
 8000be8:	f7ff fdd6 	bl	8000798 <parseCmd>
	while (1) {
 8000bec:	bf00      	nop
 8000bee:	e7eb      	b.n	8000bc8 <main+0xa8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000400 	.word	0x20000400
 8000c00:	08000535 	.word	0x08000535
 8000c04:	080005b9 	.word	0x080005b9
 8000c08:	08000649 	.word	0x08000649
 8000c0c:	08000675 	.word	0x08000675
 8000c10:	080006a9 	.word	0x080006a9
 8000c14:	080006dd 	.word	0x080006dd
 8000c18:	08000711 	.word	0x08000711
 8000c1c:	08000745 	.word	0x08000745
 8000c20:	0800050d 	.word	0x0800050d
 8000c24:	2000049c 	.word	0x2000049c
 8000c28:	200004a0 	.word	0x200004a0
 8000c2c:	08000ab1 	.word	0x08000ab1
 8000c30:	08000af9 	.word	0x08000af9
 8000c34:	0800b214 	.word	0x0800b214

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b096      	sub	sp, #88	@ 0x58
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2244      	movs	r2, #68	@ 0x44
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f009 ffec 	bl	800ac24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c5e:	f002 fdb3 	bl	80037c8 <HAL_PWREx_ControlVoltageScaling>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c68:	f000 f9bc 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c82:	230a      	movs	r3, #10
 8000c84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c86:	2307      	movs	r3, #7
 8000c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fdfc 	bl	8003894 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ca2:	f000 f99f 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 f9c4 	bl	800404c <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cca:	f000 f98b 	bl	8000fe4 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3758      	adds	r7, #88	@ 0x58
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <MX_CRC_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_CRC_Init+0x50>)
 8000d14:	f000 fe84 	bl	8001a20 <HAL_CRC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d1e:	f000 f961 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000188 	.word	0x20000188
 8000d2c:	40023000 	.word	0x40023000

08000d30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d36:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <MX_SPI1_Init+0x78>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d7e:	2207      	movs	r2, #7
 8000d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_SPI1_Init+0x74>)
 8000d90:	f004 f86c 	bl	8004e6c <HAL_SPI_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f923 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001ac 	.word	0x200001ac
 8000da8:	40013000 	.word	0x40013000

08000dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000db2:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <MX_USART1_UART_Init+0x5c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART1_UART_Init+0x58>)
 8000df0:	f004 ff28 	bl	8005c44 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f8f3 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002a0 	.word	0x200002a0
 8000e08:	40013800 	.word	0x40013800

08000e0c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e12:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <MX_DMA_Init+0xb0>)
 8000e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e16:	4a29      	ldr	r2, [pc, #164]	@ (8000ebc <MX_DMA_Init+0xb0>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e1e:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_DMA_Init+0xb0>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e2c:	4a25      	ldr	r2, [pc, #148]	@ (8000ec4 <MX_DMA_Init+0xb8>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e36:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e3c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e40:	2240      	movs	r2, #64	@ 0x40
 8000e42:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000e62:	4817      	ldr	r0, [pc, #92]	@ (8000ec0 <MX_DMA_Init+0xb4>)
 8000e64:	f000 ffe2 	bl	8001e2c <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_DMA_Init+0x66>
  {
    Error_Handler( );
 8000e6e:	f000 f8b9 	bl	8000fe4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200c      	movs	r0, #12
 8000e78:	f000 fda8 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f000 fdc1 	bl	8001a04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	200d      	movs	r0, #13
 8000e88:	f000 fda0 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f000 fdb9 	bl	8001a04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	200e      	movs	r0, #14
 8000e98:	f000 fd98 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e9c:	200e      	movs	r0, #14
 8000e9e:	f000 fdb1 	bl	8001a04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 fd90 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eac:	200f      	movs	r0, #15
 8000eae:	f000 fda9 	bl	8001a04 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	200003b8 	.word	0x200003b8
 8000ec4:	40020008 	.word	0x40020008

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <MX_GPIO_Init+0xd4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_nCS_GPIO_Port, DAC_nCS_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2110      	movs	r1, #16
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2e:	f001 fa8f 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC_TOGGLE0_Pin|DAC_TOGGLE1_Pin|DAC_TOGGLE2_Pin|DAC_nLDAC_Pin
 8000f32:	2200      	movs	r2, #0
 8000f34:	21e7      	movs	r1, #231	@ 0xe7
 8000f36:	481a      	ldr	r0, [pc, #104]	@ (8000fa0 <MX_GPIO_Init+0xd8>)
 8000f38:	f001 fa8a 	bl	8002450 <HAL_GPIO_WritePin>
                          |DAC_nRESET_Pin|DAC_nCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DAC_nCS_Pin */
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f56:	f001 f8d1 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_TOGGLE0_Pin DAC_TOGGLE1_Pin DAC_TOGGLE2_Pin DAC_nLDAC_Pin
                           DAC_nRESET_Pin DAC_nCLR_Pin */
  GPIO_InitStruct.Pin = DAC_TOGGLE0_Pin|DAC_TOGGLE1_Pin|DAC_TOGGLE2_Pin|DAC_nLDAC_Pin
 8000f5a:	23e7      	movs	r3, #231	@ 0xe7
 8000f5c:	60fb      	str	r3, [r7, #12]
                          |DAC_nRESET_Pin|DAC_nCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <MX_GPIO_Init+0xd8>)
 8000f72:	f001 f8c3 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_nALMOUT_Pin */
  GPIO_InitStruct.Pin = DAC_nALMOUT_Pin;
 8000f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_nALMOUT_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_GPIO_Init+0xd8>)
 8000f8e:	f001 f8b5 	bl	80020fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	// Write character to ITM ch.0
	ITM_SendChar(ch);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fd56 	bl	8000a60 <ITM_SendChar>
	return (ch);
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fd2:	f000 fbff 	bl	80017d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012c00 	.word	0x40012c00

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <slip_send_packet>:
 * @param  slip: Pointer to SLIP handle that provides the send_char function.
 * @param  p: Pointer to the data buffer to send.
 * @param  len: Length of the data to send.
 * @retval None
 */
void slip_send_packet(SLIP_HandleTypeDef *slip, uint8_t *p, uint32_t len) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
    // Send the initial SLIP_END to start the packet
    slip->send_char(SLIP_END);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	20c0      	movs	r0, #192	@ 0xc0
 8001002:	4798      	blx	r3

    // Iterate over each byte in the packet
    for (uint32_t i = 0; i < len; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e026      	b.n	8001058 <slip_send_packet+0x68>
        switch (p[i]) {
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2bc0      	cmp	r3, #192	@ 0xc0
 8001014:	d002      	beq.n	800101c <slip_send_packet+0x2c>
 8001016:	2bdb      	cmp	r3, #219	@ 0xdb
 8001018:	d009      	beq.n	800102e <slip_send_packet+0x3e>
 800101a:	e011      	b.n	8001040 <slip_send_packet+0x50>
            // If the byte is SLIP_END, it needs to be escaped
            case SLIP_END:
                slip->send_char(SLIP_ESC);        // Escape the SLIP_END
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	20db      	movs	r0, #219	@ 0xdb
 8001022:	4798      	blx	r3
                slip->send_char(SLIP_ESC_END);   // Send the escaped SLIP_END
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	20dc      	movs	r0, #220	@ 0xdc
 800102a:	4798      	blx	r3
                break;
 800102c:	e011      	b.n	8001052 <slip_send_packet+0x62>

            // If the byte is SLIP_ESC, it needs to be escaped
            case SLIP_ESC:
                slip->send_char(SLIP_ESC);        // Escape the SLIP_ESC
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	20db      	movs	r0, #219	@ 0xdb
 8001034:	4798      	blx	r3
                slip->send_char(SLIP_ESC_ESC);   // Send the escaped SLIP_ESC
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	20dd      	movs	r0, #221	@ 0xdd
 800103c:	4798      	blx	r3
                break;
 800103e:	e008      	b.n	8001052 <slip_send_packet+0x62>

            // For normal data bytes, send them as is
            default:
                slip->send_char(p[i]);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	440a      	add	r2, r1
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	4610      	mov	r0, r2
 800104e:	4798      	blx	r3
                break;
 8001050:	bf00      	nop
    for (uint32_t i = 0; i < len; i++) {
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3d4      	bcc.n	800100a <slip_send_packet+0x1a>
        }
    }

    // Send the final SLIP_END to end the packet
    slip->send_char(SLIP_END);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	20c0      	movs	r0, #192	@ 0xc0
 8001066:	4798      	blx	r3
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <slip_recv_packet>:
 * @param  slip: Pointer to SLIP handle that provides the recv_char function.
 * @param  p: Pointer to the buffer to store the received data.
 * @param  len: Maximum length of the buffer to store the received data.
 * @retval The number of bytes received and stored in the buffer (as uint8_t).
 */
uint32_t slip_recv_packet(SLIP_HandleTypeDef *slip, uint8_t *p, uint32_t len) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    uint32_t received = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    bool escaping = false;
 8001080:	2300      	movs	r3, #0
 8001082:	74fb      	strb	r3, [r7, #19]
    uint8_t c;

    // Receive characters until a SLIP_END is encountered (end of packet)
    while (received < len) {
 8001084:	e033      	b.n	80010ee <slip_recv_packet+0x7e>
        c = slip->recv_char();  // Receive one byte
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4798      	blx	r3
 800108c:	4603      	mov	r3, r0
 800108e:	74bb      	strb	r3, [r7, #18]

        if (escaping) {
 8001090:	7cfb      	ldrb	r3, [r7, #19]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d017      	beq.n	80010c6 <slip_recv_packet+0x56>
            // Handle escape sequence
            if (c == SLIP_ESC_END) {
 8001096:	7cbb      	ldrb	r3, [r7, #18]
 8001098:	2bdc      	cmp	r3, #220	@ 0xdc
 800109a:	d107      	bne.n	80010ac <slip_recv_packet+0x3c>
                p[received++] = SLIP_END;  // Escaped SLIP_END
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	617a      	str	r2, [r7, #20]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	4413      	add	r3, r2
 80010a6:	22c0      	movs	r2, #192	@ 0xc0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e009      	b.n	80010c0 <slip_recv_packet+0x50>
            } else if (c == SLIP_ESC_ESC) {
 80010ac:	7cbb      	ldrb	r3, [r7, #18]
 80010ae:	2bdd      	cmp	r3, #221	@ 0xdd
 80010b0:	d106      	bne.n	80010c0 <slip_recv_packet+0x50>
                p[received++] = SLIP_ESC;  // Escaped SLIP_ESC
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	617a      	str	r2, [r7, #20]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	22db      	movs	r2, #219	@ 0xdb
 80010be:	701a      	strb	r2, [r3, #0]
            }
            escaping = false;  // Clear escaping state after handling escape
 80010c0:	2300      	movs	r3, #0
 80010c2:	74fb      	strb	r3, [r7, #19]
 80010c4:	e013      	b.n	80010ee <slip_recv_packet+0x7e>
        } else {
            // Regular data byte or special SLIP_END byte
            if (c == SLIP_ESC) {
 80010c6:	7cbb      	ldrb	r3, [r7, #18]
 80010c8:	2bdb      	cmp	r3, #219	@ 0xdb
 80010ca:	d102      	bne.n	80010d2 <slip_recv_packet+0x62>
                escaping = true;  // Start escaping sequence
 80010cc:	2301      	movs	r3, #1
 80010ce:	74fb      	strb	r3, [r7, #19]
 80010d0:	e00d      	b.n	80010ee <slip_recv_packet+0x7e>
            } else if (c == SLIP_END) {
 80010d2:	7cbb      	ldrb	r3, [r7, #18]
 80010d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80010d6:	d103      	bne.n	80010e0 <slip_recv_packet+0x70>
                if (received > 0) {
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <slip_recv_packet+0x7e>
                    // End of packet and data has been received
                    break;
 80010de:	e00a      	b.n	80010f6 <slip_recv_packet+0x86>
                }
            } else {
                // Regular byte, add to buffer
                p[received++] = c;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	617a      	str	r2, [r7, #20]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	4413      	add	r3, r2
 80010ea:	7cba      	ldrb	r2, [r7, #18]
 80010ec:	701a      	strb	r2, [r3, #0]
    while (received < len) {
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3c7      	bcc.n	8001086 <slip_recv_packet+0x16>
            }
        }
    }

    return received;  // Return number of bytes received
 80010f6:	697b      	ldr	r3, [r7, #20]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_MspInit+0x44>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110a:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <HAL_MspInit+0x44>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6613      	str	r3, [r2, #96]	@ 0x60
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_MspInit+0x44>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_MspInit+0x44>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <HAL_MspInit+0x44>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001128:	6593      	str	r3, [r2, #88]	@ 0x58
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_MspInit+0x44>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <HAL_CRC_MspInit+0x38>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10b      	bne.n	8001172 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_CRC_MspInit+0x3c>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <HAL_CRC_MspInit+0x3c>)
 8001160:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001164:	6493      	str	r3, [r2, #72]	@ 0x48
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <HAL_CRC_MspInit+0x3c>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023000 	.word	0x40023000
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a40      	ldr	r2, [pc, #256]	@ (80012a8 <HAL_SPI_MspInit+0x120>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d17a      	bne.n	80012a0 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <HAL_SPI_MspInit+0x124>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	4a3f      	ldr	r2, [pc, #252]	@ (80012ac <HAL_SPI_MspInit+0x124>)
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <HAL_SPI_MspInit+0x124>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <HAL_SPI_MspInit+0x124>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a39      	ldr	r2, [pc, #228]	@ (80012ac <HAL_SPI_MspInit+0x124>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <HAL_SPI_MspInit+0x124>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011da:	23e0      	movs	r3, #224	@ 0xe0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f000 ff80 	bl	80020fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80011fc:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 80011fe:	4a2d      	ldr	r2, [pc, #180]	@ (80012b4 <HAL_SPI_MspInit+0x12c>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001204:	2201      	movs	r2, #1
 8001206:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001208:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 800120a:	2210      	movs	r2, #16
 800120c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001216:	2280      	movs	r2, #128	@ 0x80
 8001218:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121a:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001226:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001232:	481f      	ldr	r0, [pc, #124]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001234:	f000 fdfa 	bl	8001e2c <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800123e:	f7ff fed1 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1a      	ldr	r2, [pc, #104]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 8001246:	655a      	str	r2, [r3, #84]	@ 0x54
 8001248:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_SPI_MspInit+0x128>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001250:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <HAL_SPI_MspInit+0x134>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001256:	2201      	movs	r2, #1
 8001258:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001268:	2280      	movs	r2, #128	@ 0x80
 800126a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001286:	f000 fdd1 	bl	8001e2c <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8001290:	f7ff fea8 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 8001298:	659a      	str	r2, [r3, #88]	@ 0x58
 800129a:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <HAL_SPI_MspInit+0x130>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	20000210 	.word	0x20000210
 80012b4:	40020030 	.word	0x40020030
 80012b8:	20000258 	.word	0x20000258
 80012bc:	4002001c 	.word	0x4002001c

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ac      	sub	sp, #176	@ 0xb0
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2288      	movs	r2, #136	@ 0x88
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f009 fc9f 	bl	800ac24 <memset>
  if(huart->Instance==USART1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_UART_MspInit+0x158>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f040 808f 	bne.w	8001410 <HAL_UART_MspInit+0x150>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 f8f8 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800130a:	f7ff fe6b 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130e:	4b43      	ldr	r3, [pc, #268]	@ (800141c <HAL_UART_MspInit+0x15c>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a42      	ldr	r2, [pc, #264]	@ (800141c <HAL_UART_MspInit+0x15c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b40      	ldr	r3, [pc, #256]	@ (800141c <HAL_UART_MspInit+0x15c>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <HAL_UART_MspInit+0x15c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a3c      	ldr	r2, [pc, #240]	@ (800141c <HAL_UART_MspInit+0x15c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <HAL_UART_MspInit+0x15c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800133e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001358:	2307      	movs	r3, #7
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f000 fec8 	bl	80020fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800136c:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <HAL_UART_MspInit+0x160>)
 800136e:	4a2d      	ldr	r2, [pc, #180]	@ (8001424 <HAL_UART_MspInit+0x164>)
 8001370:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001372:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_UART_MspInit+0x160>)
 8001374:	2202      	movs	r2, #2
 8001376:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <HAL_UART_MspInit+0x160>)
 800137a:	2210      	movs	r2, #16
 800137c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <HAL_UART_MspInit+0x160>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <HAL_UART_MspInit+0x160>)
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <HAL_UART_MspInit+0x160>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001390:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <HAL_UART_MspInit+0x160>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <HAL_UART_MspInit+0x160>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_UART_MspInit+0x160>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013a2:	481f      	ldr	r0, [pc, #124]	@ (8001420 <HAL_UART_MspInit+0x160>)
 80013a4:	f000 fd42 	bl	8001e2c <HAL_DMA_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80013ae:	f7ff fe19 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <HAL_UART_MspInit+0x160>)
 80013b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80013b8:	4a19      	ldr	r2, [pc, #100]	@ (8001420 <HAL_UART_MspInit+0x160>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013c0:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <HAL_UART_MspInit+0x16c>)
 80013c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <HAL_UART_MspInit+0x168>)
 80013f6:	f000 fd19 	bl	8001e2c <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8001400:	f7ff fdf0 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <HAL_UART_MspInit+0x168>)
 8001408:	675a      	str	r2, [r3, #116]	@ 0x74
 800140a:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_UART_MspInit+0x168>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001410:	bf00      	nop
 8001412:	37b0      	adds	r7, #176	@ 0xb0
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013800 	.word	0x40013800
 800141c:	40021000 	.word	0x40021000
 8001420:	20000328 	.word	0x20000328
 8001424:	40020044 	.word	0x40020044
 8001428:	20000370 	.word	0x20000370
 800142c:	40020058 	.word	0x40020058

08001430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <HAL_InitTick+0xc8>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	4a2d      	ldr	r2, [pc, #180]	@ (80014f8 <HAL_InitTick+0xc8>)
 8001444:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001448:	6613      	str	r3, [r2, #96]	@ 0x60
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_InitTick+0xc8>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001456:	f107 020c 	add.w	r2, r7, #12
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f002 ffb5 	bl	80043d0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001466:	f002 ff9d 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 800146a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146e:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <HAL_InitTick+0xcc>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3b01      	subs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <HAL_InitTick+0xd0>)
 800147c:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <HAL_InitTick+0xd4>)
 800147e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_InitTick+0xd0>)
 8001482:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001486:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001488:	4a1d      	ldr	r2, [pc, #116]	@ (8001500 <HAL_InitTick+0xd0>)
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <HAL_InitTick+0xd0>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HAL_InitTick+0xd0>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <HAL_InitTick+0xd0>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014a0:	4817      	ldr	r0, [pc, #92]	@ (8001500 <HAL_InitTick+0xd0>)
 80014a2:	f004 f909 	bl	80056b8 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80014ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11b      	bne.n	80014ec <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014b4:	4812      	ldr	r0, [pc, #72]	@ (8001500 <HAL_InitTick+0xd0>)
 80014b6:	f004 f961 	bl	800577c <HAL_TIM_Base_Start_IT>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80014c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d111      	bne.n	80014ec <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014c8:	2019      	movs	r0, #25
 80014ca:	f000 fa9b 	bl	8001a04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d808      	bhi.n	80014e6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	2019      	movs	r0, #25
 80014da:	f000 fa77 	bl	80019cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <HAL_InitTick+0xd8>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e002      	b.n	80014ec <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3730      	adds	r7, #48	@ 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	200004a8 	.word	0x200004a8
 8001504:	40012c00 	.word	0x40012c00
 8001508:	20000004 	.word	0x20000004

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <NMI_Handler+0x4>

08001514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <MemManage_Handler+0x4>

08001524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <UsageFault_Handler+0x4>

08001534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <DMA1_Channel2_IRQHandler+0x10>)
 8001572:	f000 fd13 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000258 	.word	0x20000258

08001580 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <DMA1_Channel3_IRQHandler+0x10>)
 8001586:	f000 fd09 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000210 	.word	0x20000210

08001594 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <DMA1_Channel4_IRQHandler+0x10>)
 800159a:	f000 fcff 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000328 	.word	0x20000328

080015a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <DMA1_Channel5_IRQHandler+0x10>)
 80015ae:	f000 fcf5 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000370 	.word	0x20000370

080015bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015c2:	f004 f94b 	bl	800585c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004a8 	.word	0x200004a8

080015d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <OTG_FS_IRQHandler+0x10>)
 80015d6:	f001 f891 	bl	80026fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200019dc 	.word	0x200019dc

080015e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
  }

  return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fcb3 	bl	8000fa4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
  }
  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800167e:	605a      	str	r2, [r3, #4]
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f009 fab0 	bl	800ac54 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20018000 	.word	0x20018000
 8001720:	00000400 	.word	0x00000400
 8001724:	200004f4 	.word	0x200004f4
 8001728:	20002230 	.word	0x20002230

0800172c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001788 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001754:	f7ff ffea 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177e:	f009 fa6f 	bl	800ac60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001782:	f7ff f9cd 	bl	8000b20 <main>

08001786 <LoopForever>:

LoopForever:
    b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001788:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001794:	0800b2ac 	.word	0x0800b2ac
  ldr r2, =_sbss
 8001798:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800179c:	2000222c 	.word	0x2000222c

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>

080017a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f902 	bl	80019b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b2:	200f      	movs	r0, #15
 80017b4:	f7ff fe3c 	bl	8001430 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	e001      	b.n	80017c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c4:	f7ff fc9c 	bl	8001100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	200004f8 	.word	0x200004f8

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200004f8 	.word	0x200004f8

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008

0800185c <__NVIC_SetPriorityGrouping>:
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	@ (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	@ (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff4c 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019de:	f7ff ff61 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 80019e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f7ff ffb1 	bl	8001950 <NVIC_EncodePriority>
 80019ee:	4602      	mov	r2, r0
 80019f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff80 	bl	80018fc <__NVIC_SetPriority>
}
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff54 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e054      	b.n	8001adc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7f5b      	ldrb	r3, [r3, #29]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fb80 	bl	8001148 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_CRC_Init+0xc4>)
 8001a5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0218 	bic.w	r2, r2, #24
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	e00c      	b.n	8001a8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f948 	bl	8001d10 <HAL_CRCEx_Polynomial_Set>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e028      	b.n	8001adc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	795b      	ldrb	r3, [r3, #5]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a9a:	611a      	str	r2, [r3, #16]
 8001a9c:	e004      	b.n	8001aa8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6912      	ldr	r2, [r2, #16]
 8001aa6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	04c11db7 	.word	0x04c11db7

08001ae8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2202      	movs	r2, #2
 8001afc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d006      	beq.n	8001b24 <HAL_CRC_Calculate+0x3c>
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d829      	bhi.n	8001b6e <HAL_CRC_Calculate+0x86>
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d019      	beq.n	8001b52 <HAL_CRC_Calculate+0x6a>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d01e      	beq.n	8001b60 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001b22:	e024      	b.n	8001b6e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e00a      	b.n	8001b40 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	441a      	add	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3f0      	bcc.n	8001b2a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	e00e      	b.n	8001b70 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f812 	bl	8001b80 <CRC_Handle_8>
 8001b5c:	6138      	str	r0, [r7, #16]
      break;
 8001b5e:	e007      	b.n	8001b70 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f899 	bl	8001c9c <CRC_Handle_16>
 8001b6a:	6138      	str	r0, [r7, #16]
      break;
 8001b6c:	e000      	b.n	8001b70 <HAL_CRC_Calculate+0x88>
      break;
 8001b6e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b76:	693b      	ldr	r3, [r7, #16]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e023      	b.n	8001bda <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	440b      	add	r3, r1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bac:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001bbc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bd0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3d6      	bcc.n	8001b92 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04d      	beq.n	8001c8a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d116      	bne.n	8001c40 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	3301      	adds	r3, #1
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	440b      	add	r3, r1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	8b7a      	ldrh	r2, [r7, #26]
 8001c3e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d11f      	bne.n	8001c8a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	440b      	add	r3, r1
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	8b7a      	ldrh	r2, [r7, #26]
 8001c76:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3724      	adds	r7, #36	@ 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e013      	b.n	8001cd6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3e6      	bcc.n	8001cae <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d20:	231f      	movs	r3, #31
 8001d22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
 8001d32:	e063      	b.n	8001dfc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d34:	bf00      	nop
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	613a      	str	r2, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_CRCEx_Polynomial_Set+0x44>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b18      	cmp	r3, #24
 8001d58:	d846      	bhi.n	8001de8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001def 	.word	0x08001def
 8001d64:	08001de9 	.word	0x08001de9
 8001d68:	08001de9 	.word	0x08001de9
 8001d6c:	08001de9 	.word	0x08001de9
 8001d70:	08001de9 	.word	0x08001de9
 8001d74:	08001de9 	.word	0x08001de9
 8001d78:	08001de9 	.word	0x08001de9
 8001d7c:	08001de9 	.word	0x08001de9
 8001d80:	08001ddd 	.word	0x08001ddd
 8001d84:	08001de9 	.word	0x08001de9
 8001d88:	08001de9 	.word	0x08001de9
 8001d8c:	08001de9 	.word	0x08001de9
 8001d90:	08001de9 	.word	0x08001de9
 8001d94:	08001de9 	.word	0x08001de9
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001de9 	.word	0x08001de9
 8001da0:	08001dd1 	.word	0x08001dd1
 8001da4:	08001de9 	.word	0x08001de9
 8001da8:	08001de9 	.word	0x08001de9
 8001dac:	08001de9 	.word	0x08001de9
 8001db0:	08001de9 	.word	0x08001de9
 8001db4:	08001de9 	.word	0x08001de9
 8001db8:	08001de9 	.word	0x08001de9
 8001dbc:	08001de9 	.word	0x08001de9
 8001dc0:	08001dc5 	.word	0x08001dc5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d913      	bls.n	8001df2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dce:	e010      	b.n	8001df2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d90f      	bls.n	8001df6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dda:	e00c      	b.n	8001df6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	d90b      	bls.n	8001dfa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001de6:	e008      	b.n	8001dfa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
        break;
 8001dec:	e006      	b.n	8001dfc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dee:	bf00      	nop
 8001df0:	e004      	b.n	8001dfc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001df2:	bf00      	nop
 8001df4:	e002      	b.n	8001dfc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001df6:	bf00      	nop
 8001df8:	e000      	b.n	8001dfc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dfa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 0118 	bic.w	r1, r3, #24
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e098      	b.n	8001f70 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <HAL_DMA_Init+0x150>)
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d80f      	bhi.n	8001e6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b4b      	ldr	r3, [pc, #300]	@ (8001f80 <HAL_DMA_Init+0x154>)
 8001e52:	4413      	add	r3, r2
 8001e54:	4a4b      	ldr	r2, [pc, #300]	@ (8001f84 <HAL_DMA_Init+0x158>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a48      	ldr	r2, [pc, #288]	@ (8001f88 <HAL_DMA_Init+0x15c>)
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e68:	e00e      	b.n	8001e88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <HAL_DMA_Init+0x160>)
 8001e72:	4413      	add	r3, r2
 8001e74:	4a43      	ldr	r2, [pc, #268]	@ (8001f84 <HAL_DMA_Init+0x158>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a42      	ldr	r2, [pc, #264]	@ (8001f90 <HAL_DMA_Init+0x164>)
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ee2:	d039      	beq.n	8001f58 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <HAL_DMA_Init+0x15c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11a      	bne.n	8001f24 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001eee:	4b29      	ldr	r3, [pc, #164]	@ (8001f94 <HAL_DMA_Init+0x168>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f003 031c 	and.w	r3, r3, #28
 8001efa:	210f      	movs	r1, #15
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4924      	ldr	r1, [pc, #144]	@ (8001f94 <HAL_DMA_Init+0x168>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <HAL_DMA_Init+0x168>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	f003 031c 	and.w	r3, r3, #28
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	491d      	ldr	r1, [pc, #116]	@ (8001f94 <HAL_DMA_Init+0x168>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
 8001f22:	e019      	b.n	8001f58 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_DMA_Init+0x16c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	f003 031c 	and.w	r3, r3, #28
 8001f30:	210f      	movs	r1, #15
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	4917      	ldr	r1, [pc, #92]	@ (8001f98 <HAL_DMA_Init+0x16c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <HAL_DMA_Init+0x16c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f003 031c 	and.w	r3, r3, #28
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	4911      	ldr	r1, [pc, #68]	@ (8001f98 <HAL_DMA_Init+0x16c>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40020407 	.word	0x40020407
 8001f80:	bffdfff8 	.word	0xbffdfff8
 8001f84:	cccccccd 	.word	0xcccccccd
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	bffdfbf8 	.word	0xbffdfbf8
 8001f90:	40020400 	.word	0x40020400
 8001f94:	400200a8 	.word	0x400200a8
 8001f98:	400204a8 	.word	0x400204a8

08001f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	f003 031c 	and.w	r3, r3, #28
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d026      	beq.n	8002016 <HAL_DMA_IRQHandler+0x7a>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d021      	beq.n	8002016 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	f003 021c 	and.w	r2, r3, #28
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	2b00      	cmp	r3, #0
 800200a:	d071      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002014:	e06c      	b.n	80020f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f003 031c 	and.w	r3, r3, #28
 800201e:	2202      	movs	r2, #2
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02e      	beq.n	8002088 <HAL_DMA_IRQHandler+0xec>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d029      	beq.n	8002088 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10b      	bne.n	800205a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020a 	bic.w	r2, r2, #10
 8002050:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f003 021c 	and.w	r2, r3, #28
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	2102      	movs	r1, #2
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d038      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002086:	e033      	b.n	80020f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208c:	f003 031c 	and.w	r3, r3, #28
 8002090:	2208      	movs	r2, #8
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d02a      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x156>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d025      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 020e 	bic.w	r2, r2, #14
 80020b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f003 021c 	and.w	r2, r3, #28
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
}
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e17f      	b.n	800240c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8171 	beq.w	8002406 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d005      	beq.n	800213c <HAL_GPIO_Init+0x40>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d118      	bne.n	80021dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021b0:	2201      	movs	r2, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f003 0201 	and.w	r2, r3, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d017      	beq.n	8002218 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d123      	bne.n	800226c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80ac 	beq.w	8002406 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b5f      	ldr	r3, [pc, #380]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	4a5e      	ldr	r2, [pc, #376]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ba:	4b5c      	ldr	r3, [pc, #368]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002430 <HAL_GPIO_Init+0x334>)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022f0:	d025      	beq.n	800233e <HAL_GPIO_Init+0x242>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <HAL_GPIO_Init+0x338>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01f      	beq.n	800233a <HAL_GPIO_Init+0x23e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002438 <HAL_GPIO_Init+0x33c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x23a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4d      	ldr	r2, [pc, #308]	@ (800243c <HAL_GPIO_Init+0x340>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x236>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4c      	ldr	r2, [pc, #304]	@ (8002440 <HAL_GPIO_Init+0x344>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x232>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4b      	ldr	r2, [pc, #300]	@ (8002444 <HAL_GPIO_Init+0x348>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x22e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4a      	ldr	r2, [pc, #296]	@ (8002448 <HAL_GPIO_Init+0x34c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x22a>
 8002322:	2306      	movs	r3, #6
 8002324:	e00c      	b.n	8002340 <HAL_GPIO_Init+0x244>
 8002326:	2307      	movs	r3, #7
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800232a:	2305      	movs	r3, #5
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x244>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x244>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800233e:	2300      	movs	r3, #0
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002350:	4937      	ldr	r1, [pc, #220]	@ (8002430 <HAL_GPIO_Init+0x334>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235e:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <HAL_GPIO_Init+0x350>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002382:	4a32      	ldr	r2, [pc, #200]	@ (800244c <HAL_GPIO_Init+0x350>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002388:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_GPIO_Init+0x350>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023ac:	4a27      	ldr	r2, [pc, #156]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023b2:	4b26      	ldr	r3, [pc, #152]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d6:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002400:	4a12      	ldr	r2, [pc, #72]	@ (800244c <HAL_GPIO_Init+0x350>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	f47f ae78 	bne.w	800210c <HAL_GPIO_Init+0x10>
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	48000400 	.word	0x48000400
 8002438:	48000800 	.word	0x48000800
 800243c:	48000c00 	.word	0x48000c00
 8002440:	48001000 	.word	0x48001000
 8002444:	48001400 	.word	0x48001400
 8002448:	48001800 	.word	0x48001800
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800246c:	e002      	b.n	8002474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af02      	add	r7, sp, #8
 8002486:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e101      	b.n	8002696 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f007 fd9a 	bl	8009fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2203      	movs	r2, #3
 80024b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 f9bb 	bl	800683a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7c1a      	ldrb	r2, [r3, #16]
 80024cc:	f88d 2000 	strb.w	r2, [sp]
 80024d0:	3304      	adds	r3, #4
 80024d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d4:	f004 f8d7 	bl	8006686 <USB_CoreInit>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0d5      	b.n	8002696 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 f9b3 	bl	800685c <USB_SetCurrentMode>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0c6      	b.n	8002696 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e04a      	b.n	80025a4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3315      	adds	r3, #21
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3314      	adds	r3, #20
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	b298      	uxth	r0, r3
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	332e      	adds	r3, #46	@ 0x2e
 800254a:	4602      	mov	r2, r0
 800254c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3318      	adds	r3, #24
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	331c      	adds	r3, #28
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3320      	adds	r3, #32
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	3324      	adds	r3, #36	@ 0x24
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	791b      	ldrb	r3, [r3, #4]
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3af      	bcc.n	800250e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e044      	b.n	800263e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b5      	bcc.n	80025b4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7c1a      	ldrb	r2, [r3, #16]
 8002650:	f88d 2000 	strb.w	r2, [sp]
 8002654:	3304      	adds	r3, #4
 8002656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002658:	f004 f94c 	bl	80068f4 <USB_DevInit>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e013      	b.n	8002696 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7b1b      	ldrb	r3, [r3, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f86d 	bl	8003764 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f005 f903 	bl	800789a <USB_DevDisconnect>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_PCD_Start+0x1c>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e01c      	b.n	80026f4 <HAL_PCD_Start+0x56>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7b5b      	ldrb	r3, [r3, #13]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f89c 	bl	8006818 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 f8b7 	bl	8007858 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b08d      	sub	sp, #52	@ 0x34
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f005 f975 	bl	8007a02 <USB_GetMode>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 8481 	bne.w	8003022 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f005 f8d9 	bl	80078dc <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8477 	beq.w	8003020 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f005 f8c6 	bl	80078dc <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f002 0202 	and.w	r2, r2, #2
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f005 f8b4 	bl	80078dc <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d161      	bne.n	8002842 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0210 	bic.w	r2, r2, #16
 800278c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	0c5b      	lsrs	r3, r3, #17
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d124      	bne.n	8002804 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d035      	beq.n	8002832 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	6a38      	ldr	r0, [r7, #32]
 80027da:	f004 feeb 	bl	80075b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ea:	441a      	add	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fc:	441a      	add	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	e016      	b.n	8002832 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	0c5b      	lsrs	r3, r3, #17
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	2b06      	cmp	r3, #6
 800280e:	d110      	bne.n	8002832 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002816:	2208      	movs	r2, #8
 8002818:	4619      	mov	r1, r3
 800281a:	6a38      	ldr	r0, [r7, #32]
 800281c:	f004 feca 	bl	80075b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282c:	441a      	add	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0210 	orr.w	r2, r2, #16
 8002840:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f005 f848 	bl	80078dc <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002852:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002856:	f040 80a7 	bne.w	80029a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f005 f84d 	bl	8007902 <USB_ReadDevAllOutEpInterrupt>
 8002868:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800286a:	e099      	b.n	80029a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 808e 	beq.w	8002994 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f005 f871 	bl	800796a <USB_ReadDevOutEPInterrupt>
 8002888:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a0:	461a      	mov	r2, r3
 80028a2:	2301      	movs	r3, #1
 80028a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fe81 	bl	80035b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	2308      	movs	r3, #8
 80028c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 febd 	bl	800364c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	2310      	movs	r3, #16
 80028ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d030      	beq.n	800295a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002900:	2b80      	cmp	r3, #128	@ 0x80
 8002902:	d109      	bne.n	8002918 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002916:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f007 fca0 	bl	800a288 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	2302      	movs	r3, #2
 8002958:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2320      	movs	r3, #32
 8002974:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002992:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	3301      	adds	r3, #1
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f af62 	bne.w	800286c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 ff95 	bl	80078dc <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029bc:	f040 80a4 	bne.w	8002b08 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f004 ffb6 	bl	8007936 <USB_ReadDevAllInEpInterrupt>
 80029ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029d0:	e096      	b.n	8002b00 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 808b 	beq.w	8002af4 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 ffdc 	bl	80079a6 <USB_ReadDevInEPInterrupt>
 80029ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f007 fb91 	bl	800a15e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a52:	461a      	mov	r2, r3
 8002a54:	2308      	movs	r3, #8
 8002a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2310      	movs	r3, #16
 8002a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2340      	movs	r3, #64	@ 0x40
 8002a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a9c:	6a38      	ldr	r0, [r7, #32]
 8002a9e:	f004 f871 	bl	8006b84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	3310      	adds	r3, #16
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f007 fbee 	bl	800a2ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002adc:	461a      	mov	r2, r3
 8002ade:	2302      	movs	r3, #2
 8002ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fcd6 	bl	80034a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	3301      	adds	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f af65 	bne.w	80029d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fee5 	bl	80078dc <USB_ReadInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b1c:	d122      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d108      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b44:	2100      	movs	r1, #0
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f007 fe22 	bl	800a790 <HAL_PCDEx_LPM_Callback>
 8002b4c:	e002      	b.n	8002b54 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f007 fb72 	bl	800a238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 feb7 	bl	80078dc <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b78:	d112      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f007 fb2e 	bl	800a1ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 fe99 	bl	80078dc <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb4:	d121      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bc4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d111      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bea:	2101      	movs	r1, #1
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f007 fdcf 	bl	800a790 <HAL_PCDEx_LPM_Callback>
 8002bf2:	e002      	b.n	8002bfa <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f007 faf9 	bl	800a1ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fe6c 	bl	80078dc <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0e:	f040 80b6 	bne.w	8002d7e <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 ffa9 	bl	8006b84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c36:	e046      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c44:	461a      	mov	r2, r3
 8002c46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c5c:	0151      	lsls	r1, r2, #5
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	440a      	add	r2, r1
 8002c62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c90:	0151      	lsls	r1, r2, #5
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	440a      	add	r2, r1
 8002c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb0:	0151      	lsls	r1, r2, #5
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	440a      	add	r2, r1
 8002cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cbe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d3b2      	bcc.n	8002c38 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ce4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7bdb      	ldrb	r3, [r3, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfe:	f043 030b 	orr.w	r3, r3, #11
 8002d02:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d14:	f043 030b 	orr.w	r3, r3, #11
 8002d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1a:	e015      	b.n	8002d48 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d2e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d32:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d42:	f043 030b 	orr.w	r3, r3, #11
 8002d46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d56:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f004 fe7b 	bl	8007a64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fdaa 	bl	80078dc <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d92:	d123      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fe40 	bl	8007a1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 ff67 	bl	8006c76 <USB_GetDevSpeed>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681c      	ldr	r4, [r3, #0]
 8002db4:	f001 fad4 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 8002db8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f003 fc8d 	bl	80066e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f007 f9f1 	bl	800a1ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fd7b 	bl	80078dc <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d10a      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f007 f9ce 	bl	800a192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 0208 	and.w	r2, r2, #8
 8002e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fd66 	bl	80078dc <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	2b80      	cmp	r3, #128	@ 0x80
 8002e18:	d123      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2a:	e014      	b.n	8002e56 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 faf7 	bl	800343e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	3301      	adds	r3, #1
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	791b      	ldrb	r3, [r3, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d3e4      	bcc.n	8002e2c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fd38 	bl	80078dc <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e76:	d13c      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	e02b      	b.n	8002ed6 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d115      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da12      	bge.n	8002ed0 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3317      	adds	r3, #23
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fab7 	bl	800343e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	791b      	ldrb	r3, [r3, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d3cd      	bcc.n	8002e7e <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fcf0 	bl	80078dc <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f06:	d156      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f08:	2301      	movs	r3, #1
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0c:	e045      	b.n	8002f9a <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d12e      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da2b      	bge.n	8002f94 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d121      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f90:	6053      	str	r3, [r2, #4]
            break;
 8002f92:	e008      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	3301      	adds	r3, #1
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d3b3      	bcc.n	8002f0e <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 fc8e 	bl	80078dc <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fca:	d10a      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f007 f97f 	bl	800a2d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fc78 	bl	80078dc <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d115      	bne.n	8003022 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f007 f96f 	bl	800a2ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e000      	b.n	8003022 <HAL_PCD_IRQHandler+0x926>
      return;
 8003020:	bf00      	nop
    }
  }
}
 8003022:	3734      	adds	r7, #52	@ 0x34
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}

08003028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_PCD_SetAddress+0x1a>
 800303e:	2302      	movs	r3, #2
 8003040:	e012      	b.n	8003068 <HAL_PCD_SetAddress+0x40>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f004 fbd7 	bl	800780c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	70fb      	strb	r3, [r7, #3]
 8003082:	460b      	mov	r3, r1
 8003084:	803b      	strh	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800308e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003092:	2b00      	cmp	r3, #0
 8003094:	da0f      	bge.n	80030b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	3310      	adds	r3, #16
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	705a      	strb	r2, [r3, #1]
 80030b4:	e00f      	b.n	80030d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030e2:	883b      	ldrh	r3, [r7, #0]
 80030e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	78ba      	ldrb	r2, [r7, #2]
 80030f0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003104:	78bb      	ldrb	r3, [r7, #2]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d102      	bne.n	8003110 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_PCD_EP_Open+0xae>
 800311a:	2302      	movs	r3, #2
 800311c:	e00e      	b.n	800313c <HAL_PCD_EP_Open+0xcc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fdc1 	bl	8006cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800313a:	7afb      	ldrb	r3, [r7, #11]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da0f      	bge.n	8003178 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3310      	adds	r3, #16
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	705a      	strb	r2, [r3, #1]
 8003176:	e00f      	b.n	8003198 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_PCD_EP_Close+0x6e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e00e      	b.n	80031d0 <HAL_PCD_EP_Close+0x8c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fdff 	bl	8006dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	3304      	adds	r3, #4
 8003200:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6979      	ldr	r1, [r7, #20]
 800322c:	4618      	mov	r0, r3
 800322e:	f003 fea5 	bl	8006f7c <USB_EPStartXfer>

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	460b      	mov	r3, r1
 800327a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	f003 020f 	and.w	r2, r3, #15
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3310      	adds	r3, #16
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	3304      	adds	r3, #4
 8003292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2201      	movs	r2, #1
 80032aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fe5c 	bl	8006f7c <USB_EPStartXfer>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	7912      	ldrb	r2, [r2, #4]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e04e      	b.n	800338a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da0f      	bge.n	8003314 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 020f 	and.w	r2, r3, #15
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	3310      	adds	r3, #16
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	705a      	strb	r2, [r3, #1]
 8003312:	e00d      	b.n	8003330 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_PCD_EP_SetStall+0x82>
 800334c:	2302      	movs	r3, #2
 800334e:	e01c      	b.n	800338a <HAL_PCD_EP_SetStall+0xbc>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	4618      	mov	r0, r3
 8003360:	f004 f980 	bl	8007664 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f004 fb72 	bl	8007a64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	7912      	ldrb	r2, [r2, #4]
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e042      	b.n	8003436 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da0f      	bge.n	80033d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3310      	adds	r3, #16
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	705a      	strb	r2, [r3, #1]
 80033d6:	e00f      	b.n	80033f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_PCD_EP_ClrStall+0x86>
 8003414:	2302      	movs	r3, #2
 8003416:	e00e      	b.n	8003436 <HAL_PCD_EP_ClrStall+0xa4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	4618      	mov	r0, r3
 8003428:	f004 f98a 	bl	8007740 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800344a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	da0c      	bge.n	800346c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 020f 	and.w	r2, r3, #15
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	3310      	adds	r3, #16
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	3304      	adds	r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e00c      	b.n	8003486 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 ffad 	bl	80073ec <USB_EPStopXfer>
 8003492:	4603      	mov	r3, r0
 8003494:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003496:	7afb      	ldrb	r3, [r7, #11]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	3310      	adds	r3, #16
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d901      	bls.n	80034d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e067      	b.n	80035a8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d902      	bls.n	80034f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3303      	adds	r3, #3
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034fc:	e026      	b.n	800354c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	429a      	cmp	r2, r3
 8003512:	d902      	bls.n	800351a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3303      	adds	r3, #3
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	68d9      	ldr	r1, [r3, #12]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	b29b      	uxth	r3, r3
 800352e:	6978      	ldr	r0, [r7, #20]
 8003530:	f004 f806 	bl	8007540 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	441a      	add	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	429a      	cmp	r2, r3
 8003560:	d809      	bhi.n	8003576 <PCD_WriteEmptyTxFifo+0xd6>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356a:	429a      	cmp	r2, r3
 800356c:	d203      	bcs.n	8003576 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1c3      	bne.n	80034fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	429a      	cmp	r2, r3
 8003580:	d811      	bhi.n	80035a6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	2201      	movs	r2, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	43db      	mvns	r3, r3
 800359c:	6939      	ldr	r1, [r7, #16]
 800359e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035a2:	4013      	ands	r3, r2
 80035a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	333c      	adds	r3, #60	@ 0x3c
 80035c8:	3304      	adds	r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a19      	ldr	r2, [pc, #100]	@ (8003648 <PCD_EP_OutXfrComplete_int+0x98>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d124      	bne.n	8003630 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003602:	6093      	str	r3, [r2, #8]
 8003604:	e01a      	b.n	800363c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361c:	461a      	mov	r2, r3
 800361e:	2320      	movs	r3, #32
 8003620:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f006 fd7d 	bl	800a128 <HAL_PCD_DataOutStageCallback>
 800362e:	e005      	b.n	800363c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f006 fd76 	bl	800a128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	4f54310a 	.word	0x4f54310a

0800364c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	333c      	adds	r3, #60	@ 0x3c
 8003664:	3304      	adds	r3, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a0c      	ldr	r2, [pc, #48]	@ (80036b0 <PCD_EP_OutSetupPacket_int+0x64>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d90e      	bls.n	80036a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003698:	461a      	mov	r2, r3
 800369a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800369e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f006 fd2f 	bl	800a104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	4f54300a 	.word	0x4f54300a

080036b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
 80036c0:	4613      	mov	r3, r2
 80036c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036d2:	883b      	ldrh	r3, [r7, #0]
 80036d4:	0419      	lsls	r1, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	430a      	orrs	r2, r1
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e0:	e028      	b.n	8003734 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e00d      	b.n	8003712 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	3340      	adds	r3, #64	@ 0x40
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	3301      	adds	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	3b01      	subs	r3, #1
 8003718:	429a      	cmp	r2, r3
 800371a:	d3ec      	bcc.n	80036f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800371c:	883b      	ldrh	r3, [r7, #0]
 800371e:	0418      	lsls	r0, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	3b01      	subs	r3, #1
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	4302      	orrs	r2, r0
 800372c:	3340      	adds	r3, #64	@ 0x40
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003796:	f043 0303 	orr.w	r3, r3, #3
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000

080037c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d6:	d130      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d8:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e4:	d038      	beq.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037f6:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2232      	movs	r2, #50	@ 0x32
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	3301      	adds	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380c:	e002      	b.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3b01      	subs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003814:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d102      	bne.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f2      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003828:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003834:	d110      	bne.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800383a:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003846:	d007      	beq.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003848:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003850:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003856:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40007000 	.word	0x40007000
 800386c:	20000000 	.word	0x20000000
 8003870:	431bde83 	.word	0x431bde83

08003874 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800387e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003882:	6053      	str	r3, [r2, #4]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40007000 	.word	0x40007000

08003894 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e3ca      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a6:	4b97      	ldr	r3, [pc, #604]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b0:	4b94      	ldr	r3, [pc, #592]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80e4 	beq.w	8003a90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_RCC_OscConfig+0x4a>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	f040 808b 	bne.w	80039ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 8087 	bne.w	80039ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038de:	4b89      	ldr	r3, [pc, #548]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_RCC_OscConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e3a2      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	4b82      	ldr	r3, [pc, #520]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_RCC_OscConfig+0x7c>
 8003906:	4b7f      	ldr	r3, [pc, #508]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390e:	e005      	b.n	800391c <HAL_RCC_OscConfig+0x88>
 8003910:	4b7c      	ldr	r3, [pc, #496]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800391c:	4293      	cmp	r3, r2
 800391e:	d223      	bcs.n	8003968 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fd85 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e383      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003934:	4b73      	ldr	r3, [pc, #460]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a72      	ldr	r2, [pc, #456]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 800393a:	f043 0308 	orr.w	r3, r3, #8
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b70      	ldr	r3, [pc, #448]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	496d      	ldr	r1, [pc, #436]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003952:	4b6c      	ldr	r3, [pc, #432]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	4968      	ldr	r1, [pc, #416]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
 8003966:	e025      	b.n	80039b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003968:	4b66      	ldr	r3, [pc, #408]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 800396e:	f043 0308 	orr.w	r3, r3, #8
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b63      	ldr	r3, [pc, #396]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4960      	ldr	r1, [pc, #384]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003986:	4b5f      	ldr	r3, [pc, #380]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	495b      	ldr	r1, [pc, #364]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fd45 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e343      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039b4:	f000 fc4a 	bl	800424c <HAL_RCC_GetSysClockFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b52      	ldr	r3, [pc, #328]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	4950      	ldr	r1, [pc, #320]	@ (8003b08 <HAL_RCC_OscConfig+0x274>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
 80039d0:	4a4e      	ldr	r2, [pc, #312]	@ (8003b0c <HAL_RCC_OscConfig+0x278>)
 80039d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003b10 <HAL_RCC_OscConfig+0x27c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fd29 	bl	8001430 <HAL_InitTick>
 80039de:	4603      	mov	r3, r0
 80039e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d052      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	e327      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d032      	beq.n	8003a5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039f4:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a42      	ldr	r2, [pc, #264]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a00:	f7fd fefc 	bl	80017fc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a08:	f7fd fef8 	bl	80017fc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e310      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a26:	4b37      	ldr	r3, [pc, #220]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a36      	ldr	r2, [pc, #216]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b34      	ldr	r3, [pc, #208]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4931      	ldr	r1, [pc, #196]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a44:	4b2f      	ldr	r3, [pc, #188]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	021b      	lsls	r3, r3, #8
 8003a52:	492c      	ldr	r1, [pc, #176]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
 8003a58:	e01a      	b.n	8003a90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a29      	ldr	r2, [pc, #164]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a66:	f7fd fec9 	bl	80017fc <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a6e:	f7fd fec5 	bl	80017fc <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e2dd      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a80:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x1da>
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d074      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x21a>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d10e      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d10b      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aae:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d064      	beq.n	8003b84 <HAL_RCC_OscConfig+0x2f0>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d160      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e2ba      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_OscConfig+0x24a>
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e026      	b.n	8003b2c <HAL_RCC_OscConfig+0x298>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae6:	d115      	bne.n	8003b14 <HAL_RCC_OscConfig+0x280>
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a05      	ldr	r2, [pc, #20]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a02      	ldr	r2, [pc, #8]	@ (8003b04 <HAL_RCC_OscConfig+0x270>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e014      	b.n	8003b2c <HAL_RCC_OscConfig+0x298>
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	0800b254 	.word	0x0800b254
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000004 	.word	0x20000004
 8003b14:	4ba0      	ldr	r3, [pc, #640]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a9f      	ldr	r2, [pc, #636]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b9d      	ldr	r3, [pc, #628]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a9c      	ldr	r2, [pc, #624]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fe62 	bl	80017fc <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fe5e 	bl	80017fc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e276      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4e:	4b92      	ldr	r3, [pc, #584]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2a8>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fe4e 	bl	80017fc <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fe4a 	bl	80017fc <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e262      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b76:	4b88      	ldr	r3, [pc, #544]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2d0>
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d060      	beq.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x310>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d116      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_OscConfig+0x328>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e23f      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b76      	ldr	r3, [pc, #472]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	4973      	ldr	r1, [pc, #460]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	e040      	b.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d023      	beq.n	8003c22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bda:	4b6f      	ldr	r3, [pc, #444]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6e      	ldr	r2, [pc, #440]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd fe09 	bl	80017fc <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fd fe05 	bl	80017fc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e21d      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c00:	4b65      	ldr	r3, [pc, #404]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b62      	ldr	r3, [pc, #392]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	495f      	ldr	r1, [pc, #380]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	e018      	b.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b5d      	ldr	r3, [pc, #372]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5c      	ldr	r2, [pc, #368]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fde5 	bl	80017fc <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fd fde1 	bl	80017fc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e1f9      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c48:	4b53      	ldr	r3, [pc, #332]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03c      	beq.n	8003cda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c68:	4b4b      	ldr	r3, [pc, #300]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd fdc0 	bl	80017fc <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd fdbc 	bl	80017fc <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1d4      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c92:	4b41      	ldr	r3, [pc, #260]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <HAL_RCC_OscConfig+0x3ec>
 8003ca0:	e01b      	b.n	8003cda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fda3 	bl	80017fc <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd fd9f 	bl	80017fc <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1b7      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ccc:	4b32      	ldr	r3, [pc, #200]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ef      	bne.n	8003cba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80a6 	beq.w	8003e34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cec:	4b2a      	ldr	r3, [pc, #168]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	4a26      	ldr	r2, [pc, #152]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d04:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <HAL_RCC_OscConfig+0x508>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d118      	bne.n	8003d52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d20:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <HAL_RCC_OscConfig+0x508>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1d      	ldr	r2, [pc, #116]	@ (8003d9c <HAL_RCC_OscConfig+0x508>)
 8003d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fd66 	bl	80017fc <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7fd fd62 	bl	80017fc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e17a      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d46:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <HAL_RCC_OscConfig+0x508>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d108      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4d8>
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d60:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d6a:	e029      	b.n	8003dc0 <HAL_RCC_OscConfig+0x52c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d115      	bne.n	8003da0 <HAL_RCC_OscConfig+0x50c>
 8003d74:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	4a03      	ldr	r2, [pc, #12]	@ (8003d98 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d94:	e014      	b.n	8003dc0 <HAL_RCC_OscConfig+0x52c>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	4b9c      	ldr	r3, [pc, #624]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	4a9b      	ldr	r2, [pc, #620]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db0:	4b98      	ldr	r3, [pc, #608]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	4a97      	ldr	r2, [pc, #604]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d016      	beq.n	8003df6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fd fd18 	bl	80017fc <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fd14 	bl	80017fc <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e12a      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de6:	4b8b      	ldr	r3, [pc, #556]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ed      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x53c>
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fd fd01 	bl	80017fc <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fd fcfd 	bl	80017fc <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e113      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e14:	4b7f      	ldr	r3, [pc, #508]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1ed      	bne.n	8003dfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e28:	4b7a      	ldr	r3, [pc, #488]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2c:	4a79      	ldr	r2, [pc, #484]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80fe 	beq.w	800403a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	f040 80d0 	bne.w	8003fe8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e48:	4b72      	ldr	r3, [pc, #456]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0203 	and.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d130      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	3b01      	subs	r3, #1
 8003e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d127      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d11f      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e88:	2a07      	cmp	r2, #7
 8003e8a:	bf14      	ite	ne
 8003e8c:	2201      	movne	r2, #1
 8003e8e:	2200      	moveq	r2, #0
 8003e90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d113      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d06e      	beq.n	8003f9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d069      	beq.n	8003f98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ec4:	4b53      	ldr	r3, [pc, #332]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ed0:	4b50      	ldr	r3, [pc, #320]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0ad      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eec:	f7fd fc86 	bl	80017fc <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fd fc82 	bl	80017fc <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e09a      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f06:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f12:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	4b40      	ldr	r3, [pc, #256]	@ (8004018 <HAL_RCC_OscConfig+0x784>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f22:	3a01      	subs	r2, #1
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	4311      	orrs	r1, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f2c:	0212      	lsls	r2, r2, #8
 8003f2e:	4311      	orrs	r1, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f34:	0852      	lsrs	r2, r2, #1
 8003f36:	3a01      	subs	r2, #1
 8003f38:	0552      	lsls	r2, r2, #21
 8003f3a:	4311      	orrs	r1, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f40:	0852      	lsrs	r2, r2, #1
 8003f42:	3a01      	subs	r2, #1
 8003f44:	0652      	lsls	r2, r2, #25
 8003f46:	4311      	orrs	r1, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f4c:	0912      	lsrs	r2, r2, #4
 8003f4e:	0452      	lsls	r2, r2, #17
 8003f50:	430a      	orrs	r2, r1
 8003f52:	4930      	ldr	r1, [pc, #192]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f58:	4b2e      	ldr	r3, [pc, #184]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f64:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a2a      	ldr	r2, [pc, #168]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f70:	f7fd fc44 	bl	80017fc <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd fc40 	bl	80017fc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e058      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8a:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f96:	e050      	b.n	800403a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04f      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d148      	bne.n	800403a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a19      	ldr	r2, [pc, #100]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb4:	4b17      	ldr	r3, [pc, #92]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a16      	ldr	r2, [pc, #88]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fc0:	f7fd fc1c 	bl	80017fc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd fc18 	bl	80017fc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e030      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x734>
 8003fe6:	e028      	b.n	800403a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d023      	beq.n	8004036 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <HAL_RCC_OscConfig+0x780>)
 8003ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fd fbff 	bl	80017fc <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	e00c      	b.n	800401c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004002:	f7fd fbfb 	bl	80017fc <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d905      	bls.n	800401c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e013      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
 8004014:	40021000 	.word	0x40021000
 8004018:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401c:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <HAL_RCC_OscConfig+0x7b0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ec      	bne.n	8004002 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_RCC_OscConfig+0x7b0>)
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	4905      	ldr	r1, [pc, #20]	@ (8004044 <HAL_RCC_OscConfig+0x7b0>)
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_RCC_OscConfig+0x7b4>)
 8004030:	4013      	ands	r3, r2
 8004032:	60cb      	str	r3, [r1, #12]
 8004034:	e001      	b.n	800403a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	feeefffc 	.word	0xfeeefffc

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0e7      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b75      	ldr	r3, [pc, #468]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d910      	bls.n	8004090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b72      	ldr	r3, [pc, #456]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 0207 	bic.w	r2, r3, #7
 8004076:	4970      	ldr	r1, [pc, #448]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b6e      	ldr	r3, [pc, #440]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0cf      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	4b66      	ldr	r3, [pc, #408]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d908      	bls.n	80040be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b63      	ldr	r3, [pc, #396]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4960      	ldr	r1, [pc, #384]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04c      	beq.n	8004164 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	4b5a      	ldr	r3, [pc, #360]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d121      	bne.n	8004122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e0a6      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ea:	4b54      	ldr	r3, [pc, #336]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d115      	bne.n	8004122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e09a      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004102:	4b4e      	ldr	r3, [pc, #312]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e08e      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e086      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b46      	ldr	r3, [pc, #280]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4943      	ldr	r1, [pc, #268]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004134:	f7fd fb62 	bl	80017fc <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fd fb5e 	bl	80017fc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e06e      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b3a      	ldr	r3, [pc, #232]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800417c:	429a      	cmp	r2, r3
 800417e:	d208      	bcs.n	8004192 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b2e      	ldr	r3, [pc, #184]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	492b      	ldr	r1, [pc, #172]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004192:	4b29      	ldr	r3, [pc, #164]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d210      	bcs.n	80041c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a0:	4b25      	ldr	r3, [pc, #148]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 0207 	bic.w	r2, r3, #7
 80041a8:	4923      	ldr	r1, [pc, #140]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b0:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <HAL_RCC_ClockConfig+0x1ec>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e036      	b.n	8004230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4918      	ldr	r1, [pc, #96]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ec:	4b13      	ldr	r3, [pc, #76]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4910      	ldr	r1, [pc, #64]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004200:	f000 f824 	bl	800424c <HAL_RCC_GetSysClockFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	490b      	ldr	r1, [pc, #44]	@ (8004240 <HAL_RCC_ClockConfig+0x1f4>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	4a09      	ldr	r2, [pc, #36]	@ (8004244 <HAL_RCC_ClockConfig+0x1f8>)
 800421e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004220:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <HAL_RCC_ClockConfig+0x1fc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd f903 	bl	8001430 <HAL_InitTick>
 800422a:	4603      	mov	r3, r0
 800422c:	72fb      	strb	r3, [r7, #11]

  return status;
 800422e:	7afb      	ldrb	r3, [r7, #11]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40022000 	.word	0x40022000
 800423c:	40021000 	.word	0x40021000
 8004240:	0800b254 	.word	0x0800b254
 8004244:	20000000 	.word	0x20000000
 8004248:	20000004 	.word	0x20000004

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	@ 0x24
 8004250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004264:	4b3b      	ldr	r3, [pc, #236]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d121      	bne.n	80042be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d11e      	bne.n	80042be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004280:	4b34      	ldr	r3, [pc, #208]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800428c:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e005      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800429c:	4b2d      	ldr	r3, [pc, #180]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d102      	bne.n	80042ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042c4:	4b25      	ldr	r3, [pc, #148]	@ (800435c <HAL_RCC_GetSysClockFreq+0x110>)
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e004      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042d0:	4b22      	ldr	r3, [pc, #136]	@ (800435c <HAL_RCC_GetSysClockFreq+0x110>)
 80042d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d134      	bne.n	8004344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d003      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xac>
 80042f0:	e005      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042f2:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_RCC_GetSysClockFreq+0x110>)
 80042f4:	617b      	str	r3, [r7, #20]
      break;
 80042f6:	e005      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042f8:	4b18      	ldr	r3, [pc, #96]	@ (800435c <HAL_RCC_GetSysClockFreq+0x110>)
 80042fa:	617b      	str	r3, [r7, #20]
      break;
 80042fc:	e002      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	617b      	str	r3, [r7, #20]
      break;
 8004302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004304:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	fb03 f202 	mul.w	r2, r3, r2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800432a:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x108>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	0e5b      	lsrs	r3, r3, #25
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	3301      	adds	r3, #1
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004344:	69bb      	ldr	r3, [r7, #24]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3724      	adds	r7, #36	@ 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	0800b26c 	.word	0x0800b26c
 800435c:	00f42400 	.word	0x00f42400

08004360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_RCC_GetHCLKFreq+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000000 	.word	0x20000000

08004378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800437c:	f7ff fff0 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4904      	ldr	r1, [pc, #16]	@ (80043a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800b264 	.word	0x0800b264

080043a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043a8:	f7ff ffda 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0adb      	lsrs	r3, r3, #11
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4904      	ldr	r1, [pc, #16]	@ (80043cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	0800b264 	.word	0x0800b264

080043d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	220f      	movs	r2, #15
 80043de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80043e0:	4b12      	ldr	r3, [pc, #72]	@ (800442c <HAL_RCC_GetClockConfig+0x5c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0203 	and.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80043ec:	4b0f      	ldr	r3, [pc, #60]	@ (800442c <HAL_RCC_GetClockConfig+0x5c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043f8:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <HAL_RCC_GetClockConfig+0x5c>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004404:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_RCC_GetClockConfig+0x5c>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <HAL_RCC_GetClockConfig+0x60>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0207 	and.w	r2, r3, #7
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40022000 	.word	0x40022000

08004434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004440:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800444c:	f7ff f9ae 	bl	80037ac <HAL_PWREx_GetVoltageRange>
 8004450:	6178      	str	r0, [r7, #20]
 8004452:	e014      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004454:	4b25      	ldr	r3, [pc, #148]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004460:	4b22      	ldr	r3, [pc, #136]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800446c:	f7ff f99e 	bl	80037ac <HAL_PWREx_GetVoltageRange>
 8004470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004476:	4a1d      	ldr	r2, [pc, #116]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004484:	d10b      	bne.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b80      	cmp	r3, #128	@ 0x80
 800448a:	d919      	bls.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004490:	d902      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004492:	2302      	movs	r3, #2
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e013      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004498:	2301      	movs	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e010      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d902      	bls.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044a4:	2303      	movs	r3, #3
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e00a      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b80      	cmp	r3, #128	@ 0x80
 80044ae:	d102      	bne.n	80044b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b0:	2302      	movs	r3, #2
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e004      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b70      	cmp	r3, #112	@ 0x70
 80044ba:	d101      	bne.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044bc:	2301      	movs	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	4909      	ldr	r1, [pc, #36]	@ (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044d0:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40022000 	.word	0x40022000

080044f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004500:	2300      	movs	r3, #0
 8004502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d041      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004518:	d02a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800451a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800451e:	d824      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800452a:	d81e      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004536:	e018      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004538:	4b86      	ldr	r3, [pc, #536]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a85      	ldr	r2, [pc, #532]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004544:	e015      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fabb 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3320      	adds	r3, #32
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fba6 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	74fb      	strb	r3, [r7, #19]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004578:	4b76      	ldr	r3, [pc, #472]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004586:	4973      	ldr	r1, [pc, #460]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800458e:	e001      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d041      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045a8:	d02a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045ae:	d824      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ba:	d81e      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045c4:	d010      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045c6:	e018      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c8:	4b62      	ldr	r3, [pc, #392]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a61      	ldr	r2, [pc, #388]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045d4:	e015      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa73 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e6:	e00c      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3320      	adds	r3, #32
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb5e 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	74fb      	strb	r3, [r7, #19]
      break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004608:	4b52      	ldr	r3, [pc, #328]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004616:	494f      	ldr	r1, [pc, #316]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800461e:	e001      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80a0 	beq.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004636:	4b47      	ldr	r3, [pc, #284]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b41      	ldr	r3, [pc, #260]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004650:	4a40      	ldr	r2, [pc, #256]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004656:	6593      	str	r3, [r2, #88]	@ 0x58
 8004658:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004668:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3a      	ldr	r2, [pc, #232]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004674:	f7fd f8c2 	bl	80017fc <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800467a:	e009      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fd f8be 	bl	80017fc <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	74fb      	strb	r3, [r7, #19]
        break;
 800468e:	e005      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004690:	4b31      	ldr	r3, [pc, #196]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ef      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d15c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d019      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046c0:	4b24      	ldr	r3, [pc, #144]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046cc:	4b21      	ldr	r3, [pc, #132]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d2:	4a20      	ldr	r2, [pc, #128]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046ec:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fd f87d 	bl	80017fc <HAL_GetTick>
 8004702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	e00b      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd f879 	bl	80017fc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d902      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	74fb      	strb	r3, [r7, #19]
            break;
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ec      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004732:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004742:	4904      	ldr	r1, [pc, #16]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800474a:	e009      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004760:	7c7b      	ldrb	r3, [r7, #17]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004766:	4b9e      	ldr	r3, [pc, #632]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	4a9d      	ldr	r2, [pc, #628]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800477e:	4b98      	ldr	r3, [pc, #608]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004784:	f023 0203 	bic.w	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	4994      	ldr	r1, [pc, #592]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047a0:	4b8f      	ldr	r3, [pc, #572]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	f023 020c 	bic.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ae:	498c      	ldr	r1, [pc, #560]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047c2:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	4983      	ldr	r1, [pc, #524]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e4:	4b7e      	ldr	r3, [pc, #504]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	497b      	ldr	r1, [pc, #492]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004806:	4b76      	ldr	r3, [pc, #472]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004814:	4972      	ldr	r1, [pc, #456]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004828:	4b6d      	ldr	r3, [pc, #436]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	496a      	ldr	r1, [pc, #424]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	4961      	ldr	r1, [pc, #388]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800486c:	4b5c      	ldr	r3, [pc, #368]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487a:	4959      	ldr	r1, [pc, #356]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488e:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489c:	4950      	ldr	r1, [pc, #320]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b0:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	4948      	ldr	r1, [pc, #288]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d2:	4b43      	ldr	r3, [pc, #268]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	493f      	ldr	r1, [pc, #252]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d028      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f4:	4b3a      	ldr	r3, [pc, #232]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004902:	4937      	ldr	r1, [pc, #220]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004912:	d106      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004914:	4b32      	ldr	r3, [pc, #200]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a31      	ldr	r2, [pc, #196]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800491e:	60d3      	str	r3, [r2, #12]
 8004920:	e011      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800492a:	d10c      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f8c8 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d028      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004952:	4b23      	ldr	r3, [pc, #140]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004958:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004960:	491f      	ldr	r1, [pc, #124]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004970:	d106      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4a1a      	ldr	r2, [pc, #104]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800497c:	60d3      	str	r3, [r2, #12]
 800497e:	e011      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2101      	movs	r1, #1
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f899 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049be:	4908      	ldr	r1, [pc, #32]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e014      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f867 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02f      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a22:	4928      	ldr	r1, [pc, #160]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f844 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a4a:	7cfb      	ldrb	r3, [r7, #19]
 8004a4c:	74bb      	strb	r3, [r7, #18]
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f925 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a80:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a8e:	490d      	ldr	r1, [pc, #52]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aa2:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab2:	4904      	ldr	r1, [pc, #16]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad6:	4b75      	ldr	r3, [pc, #468]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ae2:	4b72      	ldr	r3, [pc, #456]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d10d      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
       ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004afa:	4b6c      	ldr	r3, [pc, #432]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
       ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d047      	beq.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e044      	b.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d018      	beq.n	8004b4e <RCCEx_PLLSAI1_Config+0x86>
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d825      	bhi.n	8004b6c <RCCEx_PLLSAI1_Config+0xa4>
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d002      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0x62>
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d009      	beq.n	8004b3c <RCCEx_PLLSAI1_Config+0x74>
 8004b28:	e020      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b2a:	4b60      	ldr	r3, [pc, #384]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11d      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3a:	e01a      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d116      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4c:	e013      	b.n	8004b76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4e:	4b57      	ldr	r3, [pc, #348]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b5a:	4b54      	ldr	r3, [pc, #336]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b6a:	e006      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	e004      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b82:	4b4a      	ldr	r3, [pc, #296]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	430b      	orrs	r3, r1
 8004b98:	4944      	ldr	r1, [pc, #272]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d17d      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ba4:	4b41      	ldr	r3, [pc, #260]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004baa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fc fe24 	bl	80017fc <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb6:	e009      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb8:	f7fc fe20 	bl	80017fc <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bca:	e005      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bcc:	4b37      	ldr	r3, [pc, #220]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ef      	bne.n	8004bb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d160      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be4:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6892      	ldr	r2, [r2, #8]
 8004bf4:	0211      	lsls	r1, r2, #8
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	0912      	lsrs	r2, r2, #4
 8004bfc:	0452      	lsls	r2, r2, #17
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	492a      	ldr	r1, [pc, #168]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	610b      	str	r3, [r1, #16]
 8004c06:	e027      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d112      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0e:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	0211      	lsls	r1, r2, #8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6912      	ldr	r2, [r2, #16]
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	3a01      	subs	r2, #1
 8004c28:	0552      	lsls	r2, r2, #21
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	491f      	ldr	r1, [pc, #124]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
 8004c32:	e011      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c34:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6952      	ldr	r2, [r2, #20]
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0652      	lsls	r2, r2, #25
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4916      	ldr	r1, [pc, #88]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c58:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fc fdca 	bl	80017fc <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c6c:	f7fc fdc6 	bl	80017fc <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c80:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ef      	beq.n	8004c6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	4904      	ldr	r1, [pc, #16]	@ (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cca:	4b67      	ldr	r3, [pc, #412]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10d      	bne.n	8004cf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ce2:	4b61      	ldr	r3, [pc, #388]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d047      	beq.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e044      	b.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d018      	beq.n	8004d36 <RCCEx_PLLSAI2_Config+0x86>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d825      	bhi.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <RCCEx_PLLSAI2_Config+0x62>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d009      	beq.n	8004d24 <RCCEx_PLLSAI2_Config+0x74>
 8004d10:	e020      	b.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d12:	4b55      	ldr	r3, [pc, #340]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d22:	e01a      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d24:	4b50      	ldr	r3, [pc, #320]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e013      	b.n	8004d5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d36:	4b4c      	ldr	r3, [pc, #304]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d42:	4b49      	ldr	r3, [pc, #292]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e004      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4939      	ldr	r1, [pc, #228]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d167      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d8c:	4b36      	ldr	r3, [pc, #216]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a35      	ldr	r2, [pc, #212]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fc fd30 	bl	80017fc <HAL_GetTick>
 8004d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d9e:	e009      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da0:	f7fc fd2c 	bl	80017fc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d902      	bls.n	8004db4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	73fb      	strb	r3, [r7, #15]
        break;
 8004db2:	e005      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004db4:	4b2c      	ldr	r3, [pc, #176]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ef      	bne.n	8004da0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d14a      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d111      	bne.n	8004df0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dcc:	4b26      	ldr	r3, [pc, #152]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	0211      	lsls	r1, r2, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68d2      	ldr	r2, [r2, #12]
 8004de2:	0912      	lsrs	r2, r2, #4
 8004de4:	0452      	lsls	r2, r2, #17
 8004de6:	430a      	orrs	r2, r1
 8004de8:	491f      	ldr	r1, [pc, #124]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	614b      	str	r3, [r1, #20]
 8004dee:	e011      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004df8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6912      	ldr	r2, [r2, #16]
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	4916      	ldr	r1, [pc, #88]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e14:	4b14      	ldr	r3, [pc, #80]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fc fcec 	bl	80017fc <HAL_GetTick>
 8004e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e26:	e009      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e28:	f7fc fce8 	bl	80017fc <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d902      	bls.n	8004e3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
          break;
 8004e3a:	e005      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4904      	ldr	r1, [pc, #16]	@ (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000

08004e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e095      	b.n	8004faa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d108      	bne.n	8004e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e8e:	d009      	beq.n	8004ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	61da      	str	r2, [r3, #28]
 8004e96:	e005      	b.n	8004ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc f962 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ee4:	d902      	bls.n	8004eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e002      	b.n	8004ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004efa:	d007      	beq.n	8004f0c <HAL_SPI_Init+0xa0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4e:	ea42 0103 	orr.w	r1, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	f003 0204 	and.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f88:	ea42 0103 	orr.w	r1, r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b08a      	sub	sp, #40	@ 0x28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fc4:	f7fc fc1a 	bl	80017fc <HAL_GetTick>
 8004fc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fe0:	7ffb      	ldrb	r3, [r7, #31]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d00c      	beq.n	8005000 <HAL_SPI_TransmitReceive+0x4e>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fec:	d106      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x4a>
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d001      	beq.n	8005000 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e1f3      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x60>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x60>
 800500c:	887b      	ldrh	r3, [r7, #2]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e1e8      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x72>
 8005020:	2302      	movs	r3, #2
 8005022:	e1e1      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b04      	cmp	r3, #4
 8005036:	d003      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2205      	movs	r2, #5
 800503c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	887a      	ldrh	r2, [r7, #2]
 8005066:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005082:	d802      	bhi.n	800508a <HAL_SPI_TransmitReceive+0xd8>
 8005084:	8abb      	ldrh	r3, [r7, #20]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d908      	bls.n	800509c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e007      	b.n	80050ac <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b40      	cmp	r3, #64	@ 0x40
 80050b8:	d007      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050d2:	f240 8083 	bls.w	80051dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x132>
 80050de:	8afb      	ldrh	r3, [r7, #22]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d16f      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	881a      	ldrh	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f4:	1c9a      	adds	r2, r3, #2
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005108:	e05c      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	d11b      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x19e>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x19e>
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2b01      	cmp	r3, #1
 8005126:	d113      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	881a      	ldrh	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d11c      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x1e6>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	b292      	uxth	r2, r2
 8005176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005194:	2301      	movs	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005198:	f7fc fb30 	bl	80017fc <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d80d      	bhi.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ae:	d009      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e111      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d19d      	bne.n	800510a <HAL_SPI_TransmitReceive+0x158>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d197      	bne.n	800510a <HAL_SPI_TransmitReceive+0x158>
 80051da:	e0e5      	b.n	80053a8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x23a>
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f040 80d1 	bne.w	800538e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d912      	bls.n	800521c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b02      	subs	r3, #2
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800521a:	e0b8      	b.n	800538e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005242:	e0a4      	b.n	800538e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d134      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x30a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02f      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x30a>
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	2b01      	cmp	r3, #1
 8005260:	d12c      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d912      	bls.n	8005292 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	881a      	ldrh	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b02      	subs	r3, #2
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005290:	e012      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d148      	bne.n	800535c <HAL_SPI_TransmitReceive+0x3aa>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d042      	beq.n	800535c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d923      	bls.n	800532a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	b292      	uxth	r2, r2
 80052ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b02      	subs	r3, #2
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d81f      	bhi.n	8005358 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	e016      	b.n	8005358 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f103 020c 	add.w	r2, r3, #12
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005358:	2301      	movs	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800535c:	f7fc fa4e 	bl	80017fc <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005368:	429a      	cmp	r2, r3
 800536a:	d803      	bhi.n	8005374 <HAL_SPI_TransmitReceive+0x3c2>
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005372:	d102      	bne.n	800537a <HAL_SPI_TransmitReceive+0x3c8>
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e02c      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	f47f af55 	bne.w	8005244 <HAL_SPI_TransmitReceive+0x292>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f47f af4e 	bne.w	8005244 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053a8:	6a3a      	ldr	r2, [r7, #32]
 80053aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f93d 	bl	800562c <SPI_EndRxTxTransaction>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00e      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
  }
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3728      	adds	r7, #40	@ 0x28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005400:	f7fc f9fc 	bl	80017fc <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	4413      	add	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005410:	f7fc f9f4 	bl	80017fc <HAL_GetTick>
 8005414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005416:	4b39      	ldr	r3, [pc, #228]	@ (80054fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	015b      	lsls	r3, r3, #5
 800541c:	0d1b      	lsrs	r3, r3, #20
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005426:	e054      	b.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800542e:	d050      	beq.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005430:	f7fc f9e4 	bl	80017fc <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	429a      	cmp	r2, r3
 800543e:	d902      	bls.n	8005446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d13d      	bne.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800545e:	d111      	bne.n	8005484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005468:	d004      	beq.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005472:	d107      	bne.n	8005484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548c:	d10f      	bne.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e017      	b.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d19b      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000000 	.word	0x20000000

08005500 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	@ 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005512:	f7fc f973 	bl	80017fc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	4413      	add	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005522:	f7fc f96b 	bl	80017fc <HAL_GetTick>
 8005526:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005530:	4b3d      	ldr	r3, [pc, #244]	@ (8005628 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	00da      	lsls	r2, r3, #3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	0d1b      	lsrs	r3, r3, #20
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005548:	e060      	b.n	800560c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005550:	d107      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005560:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005568:	d050      	beq.n	800560c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800556a:	f7fc f947 	bl	80017fc <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005576:	429a      	cmp	r2, r3
 8005578:	d902      	bls.n	8005580 <SPI_WaitFifoStateUntilTimeout+0x80>
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d13d      	bne.n	80055fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800558e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005598:	d111      	bne.n	80055be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a2:	d004      	beq.n	80055ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ac:	d107      	bne.n	80055be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055c6:	d10f      	bne.n	80055e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e010      	b.n	800561e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3b01      	subs	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d196      	bne.n	800554a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	@ 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000000 	.word	0x20000000

0800562c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff5b 	bl	8005500 <SPI_WaitFifoStateUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e027      	b.n	80056b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	2180      	movs	r1, #128	@ 0x80
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fec0 	bl	80053f0 <SPI_WaitFlagStateUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e014      	b.n	80056b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff ff34 	bl	8005500 <SPI_WaitFifoStateUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e000      	b.n	80056b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e049      	b.n	800575e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f841 	bl	8005766 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f000 f9e0 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e04f      	b.n	8005834 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a23      	ldr	r2, [pc, #140]	@ (8005840 <HAL_TIM_Base_Start_IT+0xc4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01d      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057be:	d018      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005844 <HAL_TIM_Base_Start_IT+0xc8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <HAL_TIM_Base_Start_IT+0xcc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <HAL_TIM_Base_Start_IT+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <HAL_TIM_Base_Start_IT+0xd4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a19      	ldr	r2, [pc, #100]	@ (8005854 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d115      	bne.n	800581e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	4b17      	ldr	r3, [pc, #92]	@ (8005858 <HAL_TIM_Base_Start_IT+0xdc>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d015      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800580a:	d011      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	e008      	b.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	e000      	b.n	8005832 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005830:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	00010007 	.word	0x00010007

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d020      	beq.n	80058c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01b      	beq.n	80058c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0202 	mvn.w	r2, #2
 8005890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8e9 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8db 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f8ec 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d020      	beq.n	800590c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0204 	mvn.w	r2, #4
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8c3 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8b5 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8c6 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0208 	mvn.w	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2204      	movs	r2, #4
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f89d 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f88f 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8a0 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d020      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0210 	mvn.w	r2, #16
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2208      	movs	r2, #8
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f877 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f869 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f87a 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0201 	mvn.w	r2, #1
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb fafc 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f913 	bl	8005c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00c      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f90b 	bl	8005c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f834 	bl	8005aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00c      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f06f 0220 	mvn.w	r2, #32
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8d3 	bl	8005c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a46      	ldr	r2, [pc, #280]	@ (8005be8 <TIM_Base_SetConfig+0x12c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ada:	d00f      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a43      	ldr	r2, [pc, #268]	@ (8005bec <TIM_Base_SetConfig+0x130>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a42      	ldr	r2, [pc, #264]	@ (8005bf0 <TIM_Base_SetConfig+0x134>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d007      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a41      	ldr	r2, [pc, #260]	@ (8005bf4 <TIM_Base_SetConfig+0x138>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a40      	ldr	r2, [pc, #256]	@ (8005bf8 <TIM_Base_SetConfig+0x13c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d108      	bne.n	8005b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a35      	ldr	r2, [pc, #212]	@ (8005be8 <TIM_Base_SetConfig+0x12c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01f      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1c:	d01b      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a32      	ldr	r2, [pc, #200]	@ (8005bec <TIM_Base_SetConfig+0x130>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d017      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a31      	ldr	r2, [pc, #196]	@ (8005bf0 <TIM_Base_SetConfig+0x134>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a30      	ldr	r2, [pc, #192]	@ (8005bf4 <TIM_Base_SetConfig+0x138>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf8 <TIM_Base_SetConfig+0x13c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2e      	ldr	r2, [pc, #184]	@ (8005bfc <TIM_Base_SetConfig+0x140>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2d      	ldr	r2, [pc, #180]	@ (8005c00 <TIM_Base_SetConfig+0x144>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0x9a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	@ (8005c04 <TIM_Base_SetConfig+0x148>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	@ (8005be8 <TIM_Base_SetConfig+0x12c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0xf8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <TIM_Base_SetConfig+0x13c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0xf8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a17      	ldr	r2, [pc, #92]	@ (8005bfc <TIM_Base_SetConfig+0x140>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0xf8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	@ (8005c00 <TIM_Base_SetConfig+0x144>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0xf8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a15      	ldr	r2, [pc, #84]	@ (8005c04 <TIM_Base_SetConfig+0x148>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40014800 	.word	0x40014800

08005c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e040      	b.n	8005cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb fb2a 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	@ 0x24
 8005c70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fae0 	bl	8006250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f825 	bl	8005ce0 <UART_SetConfig>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e01b      	b.n	8005cd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fb5f 	bl	8006394 <UART_CheckIdleState>
 8005cd6:	4603      	mov	r3, r0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce4:	b08a      	sub	sp, #40	@ 0x28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8005fa0 <UART_SetConfig+0x2c0>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a99      	ldr	r2, [pc, #612]	@ (8005fa4 <UART_SetConfig+0x2c4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a90      	ldr	r2, [pc, #576]	@ (8005fa8 <UART_SetConfig+0x2c8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d126      	bne.n	8005db8 <UART_SetConfig+0xd8>
 8005d6a:	4b90      	ldr	r3, [pc, #576]	@ (8005fac <UART_SetConfig+0x2cc>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d81b      	bhi.n	8005db0 <UART_SetConfig+0xd0>
 8005d78:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0xa0>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005da9 	.word	0x08005da9
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d96:	e116      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9e:	e112      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da6:	e10e      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dae:	e10a      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db6:	e106      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a7c      	ldr	r2, [pc, #496]	@ (8005fb0 <UART_SetConfig+0x2d0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d138      	bne.n	8005e34 <UART_SetConfig+0x154>
 8005dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8005fac <UART_SetConfig+0x2cc>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc8:	f003 030c 	and.w	r3, r3, #12
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d82d      	bhi.n	8005e2c <UART_SetConfig+0x14c>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <UART_SetConfig+0xf8>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e2d 	.word	0x08005e2d
 8005de0:	08005e2d 	.word	0x08005e2d
 8005de4:	08005e2d 	.word	0x08005e2d
 8005de8:	08005e1d 	.word	0x08005e1d
 8005dec:	08005e2d 	.word	0x08005e2d
 8005df0:	08005e2d 	.word	0x08005e2d
 8005df4:	08005e2d 	.word	0x08005e2d
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	08005e2d 	.word	0x08005e2d
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e25 	.word	0x08005e25
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e12:	e0d8      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e14:	2302      	movs	r3, #2
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e0d4      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e0d0      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2a:	e0cc      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e32:	e0c8      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a5e      	ldr	r2, [pc, #376]	@ (8005fb4 <UART_SetConfig+0x2d4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d125      	bne.n	8005e8a <UART_SetConfig+0x1aa>
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005fac <UART_SetConfig+0x2cc>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e48:	2b30      	cmp	r3, #48	@ 0x30
 8005e4a:	d016      	beq.n	8005e7a <UART_SetConfig+0x19a>
 8005e4c:	2b30      	cmp	r3, #48	@ 0x30
 8005e4e:	d818      	bhi.n	8005e82 <UART_SetConfig+0x1a2>
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d00a      	beq.n	8005e6a <UART_SetConfig+0x18a>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d814      	bhi.n	8005e82 <UART_SetConfig+0x1a2>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <UART_SetConfig+0x182>
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d008      	beq.n	8005e72 <UART_SetConfig+0x192>
 8005e60:	e00f      	b.n	8005e82 <UART_SetConfig+0x1a2>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e68:	e0ad      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e70:	e0a9      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e72:	2304      	movs	r3, #4
 8005e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e78:	e0a5      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e80:	e0a1      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e82:	2310      	movs	r3, #16
 8005e84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e88:	e09d      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8005fb8 <UART_SetConfig+0x2d8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d125      	bne.n	8005ee0 <UART_SetConfig+0x200>
 8005e94:	4b45      	ldr	r3, [pc, #276]	@ (8005fac <UART_SetConfig+0x2cc>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ea0:	d016      	beq.n	8005ed0 <UART_SetConfig+0x1f0>
 8005ea2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ea4:	d818      	bhi.n	8005ed8 <UART_SetConfig+0x1f8>
 8005ea6:	2b80      	cmp	r3, #128	@ 0x80
 8005ea8:	d00a      	beq.n	8005ec0 <UART_SetConfig+0x1e0>
 8005eaa:	2b80      	cmp	r3, #128	@ 0x80
 8005eac:	d814      	bhi.n	8005ed8 <UART_SetConfig+0x1f8>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <UART_SetConfig+0x1d8>
 8005eb2:	2b40      	cmp	r3, #64	@ 0x40
 8005eb4:	d008      	beq.n	8005ec8 <UART_SetConfig+0x1e8>
 8005eb6:	e00f      	b.n	8005ed8 <UART_SetConfig+0x1f8>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebe:	e082      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec6:	e07e      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ece:	e07a      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed6:	e076      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ede:	e072      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a35      	ldr	r2, [pc, #212]	@ (8005fbc <UART_SetConfig+0x2dc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d12a      	bne.n	8005f40 <UART_SetConfig+0x260>
 8005eea:	4b30      	ldr	r3, [pc, #192]	@ (8005fac <UART_SetConfig+0x2cc>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef8:	d01a      	beq.n	8005f30 <UART_SetConfig+0x250>
 8005efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efe:	d81b      	bhi.n	8005f38 <UART_SetConfig+0x258>
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f04:	d00c      	beq.n	8005f20 <UART_SetConfig+0x240>
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0a:	d815      	bhi.n	8005f38 <UART_SetConfig+0x258>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <UART_SetConfig+0x238>
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f14:	d008      	beq.n	8005f28 <UART_SetConfig+0x248>
 8005f16:	e00f      	b.n	8005f38 <UART_SetConfig+0x258>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1e:	e052      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f26:	e04e      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2e:	e04a      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f36:	e046      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3e:	e042      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <UART_SetConfig+0x2c4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d13a      	bne.n	8005fc0 <UART_SetConfig+0x2e0>
 8005f4a:	4b18      	ldr	r3, [pc, #96]	@ (8005fac <UART_SetConfig+0x2cc>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f58:	d01a      	beq.n	8005f90 <UART_SetConfig+0x2b0>
 8005f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f5e:	d81b      	bhi.n	8005f98 <UART_SetConfig+0x2b8>
 8005f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f64:	d00c      	beq.n	8005f80 <UART_SetConfig+0x2a0>
 8005f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f6a:	d815      	bhi.n	8005f98 <UART_SetConfig+0x2b8>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <UART_SetConfig+0x298>
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f74:	d008      	beq.n	8005f88 <UART_SetConfig+0x2a8>
 8005f76:	e00f      	b.n	8005f98 <UART_SetConfig+0x2b8>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f7e:	e022      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f80:	2302      	movs	r3, #2
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f86:	e01e      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f8e:	e01a      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f96:	e016      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9e:	e012      	b.n	8005fc6 <UART_SetConfig+0x2e6>
 8005fa0:	efff69f3 	.word	0xefff69f3
 8005fa4:	40008000 	.word	0x40008000
 8005fa8:	40013800 	.word	0x40013800
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40004400 	.word	0x40004400
 8005fb4:	40004800 	.word	0x40004800
 8005fb8:	40004c00 	.word	0x40004c00
 8005fbc:	40005000 	.word	0x40005000
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a9f      	ldr	r2, [pc, #636]	@ (8006248 <UART_SetConfig+0x568>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d17a      	bne.n	80060c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d824      	bhi.n	8006022 <UART_SetConfig+0x342>
 8005fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <UART_SetConfig+0x300>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006023 	.word	0x08006023
 8005ff0:	08006013 	.word	0x08006013
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	08006023 	.word	0x08006023
 8005ffc:	08006023 	.word	0x08006023
 8006000:	0800601b 	.word	0x0800601b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fe f9b8 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 8006008:	61f8      	str	r0, [r7, #28]
        break;
 800600a:	e010      	b.n	800602e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800600c:	4b8f      	ldr	r3, [pc, #572]	@ (800624c <UART_SetConfig+0x56c>)
 800600e:	61fb      	str	r3, [r7, #28]
        break;
 8006010:	e00d      	b.n	800602e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006012:	f7fe f91b 	bl	800424c <HAL_RCC_GetSysClockFreq>
 8006016:	61f8      	str	r0, [r7, #28]
        break;
 8006018:	e009      	b.n	800602e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601e:	61fb      	str	r3, [r7, #28]
        break;
 8006020:	e005      	b.n	800602e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800602c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80fb 	beq.w	800622c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	4413      	add	r3, r2
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	429a      	cmp	r2, r3
 8006044:	d305      	bcc.n	8006052 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	429a      	cmp	r2, r3
 8006050:	d903      	bls.n	800605a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006058:	e0e8      	b.n	800622c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2200      	movs	r2, #0
 800605e:	461c      	mov	r4, r3
 8006060:	4615      	mov	r5, r2
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	022b      	lsls	r3, r5, #8
 800606c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006070:	0222      	lsls	r2, r4, #8
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	6849      	ldr	r1, [r1, #4]
 8006076:	0849      	lsrs	r1, r1, #1
 8006078:	2000      	movs	r0, #0
 800607a:	4688      	mov	r8, r1
 800607c:	4681      	mov	r9, r0
 800607e:	eb12 0a08 	adds.w	sl, r2, r8
 8006082:	eb43 0b09 	adc.w	fp, r3, r9
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006094:	4650      	mov	r0, sl
 8006096:	4659      	mov	r1, fp
 8006098:	f7fa f896 	bl	80001c8 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4613      	mov	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060aa:	d308      	bcc.n	80060be <UART_SetConfig+0x3de>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060b2:	d204      	bcs.n	80060be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	60da      	str	r2, [r3, #12]
 80060bc:	e0b6      	b.n	800622c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060c4:	e0b2      	b.n	800622c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ce:	d15e      	bne.n	800618e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d828      	bhi.n	800612a <UART_SetConfig+0x44a>
 80060d8:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0x400>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	08006105 	.word	0x08006105
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	0800612b 	.word	0x0800612b
 80060f0:	0800611b 	.word	0x0800611b
 80060f4:	0800612b 	.word	0x0800612b
 80060f8:	0800612b 	.word	0x0800612b
 80060fc:	0800612b 	.word	0x0800612b
 8006100:	08006123 	.word	0x08006123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fe f938 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 8006108:	61f8      	str	r0, [r7, #28]
        break;
 800610a:	e014      	b.n	8006136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610c:	f7fe f94a 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 8006110:	61f8      	str	r0, [r7, #28]
        break;
 8006112:	e010      	b.n	8006136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b4d      	ldr	r3, [pc, #308]	@ (800624c <UART_SetConfig+0x56c>)
 8006116:	61fb      	str	r3, [r7, #28]
        break;
 8006118:	e00d      	b.n	8006136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fe f897 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800611e:	61f8      	str	r0, [r7, #28]
        break;
 8006120:	e009      	b.n	8006136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006126:	61fb      	str	r3, [r7, #28]
        break;
 8006128:	e005      	b.n	8006136 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d077      	beq.n	800622c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005a      	lsls	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	441a      	add	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b0f      	cmp	r3, #15
 8006156:	d916      	bls.n	8006186 <UART_SetConfig+0x4a6>
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800615e:	d212      	bcs.n	8006186 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f023 030f 	bic.w	r3, r3, #15
 8006168:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	b29a      	uxth	r2, r3
 8006176:	8afb      	ldrh	r3, [r7, #22]
 8006178:	4313      	orrs	r3, r2
 800617a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	8afa      	ldrh	r2, [r7, #22]
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	e052      	b.n	800622c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800618c:	e04e      	b.n	800622c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800618e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006192:	2b08      	cmp	r3, #8
 8006194:	d827      	bhi.n	80061e6 <UART_SetConfig+0x506>
 8006196:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <UART_SetConfig+0x4bc>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061c1 	.word	0x080061c1
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061d1 	.word	0x080061d1
 80061a8:	080061e7 	.word	0x080061e7
 80061ac:	080061d7 	.word	0x080061d7
 80061b0:	080061e7 	.word	0x080061e7
 80061b4:	080061e7 	.word	0x080061e7
 80061b8:	080061e7 	.word	0x080061e7
 80061bc:	080061df 	.word	0x080061df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c0:	f7fe f8da 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 80061c4:	61f8      	str	r0, [r7, #28]
        break;
 80061c6:	e014      	b.n	80061f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c8:	f7fe f8ec 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 80061cc:	61f8      	str	r0, [r7, #28]
        break;
 80061ce:	e010      	b.n	80061f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d0:	4b1e      	ldr	r3, [pc, #120]	@ (800624c <UART_SetConfig+0x56c>)
 80061d2:	61fb      	str	r3, [r7, #28]
        break;
 80061d4:	e00d      	b.n	80061f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d6:	f7fe f839 	bl	800424c <HAL_RCC_GetSysClockFreq>
 80061da:	61f8      	str	r0, [r7, #28]
        break;
 80061dc:	e009      	b.n	80061f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e2:	61fb      	str	r3, [r7, #28]
        break;
 80061e4:	e005      	b.n	80061f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061f0:	bf00      	nop
    }

    if (pclk != 0U)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d019      	beq.n	800622c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	085a      	lsrs	r2, r3, #1
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	d909      	bls.n	8006226 <UART_SetConfig+0x546>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006218:	d205      	bcs.n	8006226 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60da      	str	r2, [r3, #12]
 8006224:	e002      	b.n	800622c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006238:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800623c:	4618      	mov	r0, r3
 800623e:	3728      	adds	r7, #40	@ 0x28
 8006240:	46bd      	mov	sp, r7
 8006242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006246:	bf00      	nop
 8006248:	40008000 	.word	0x40008000
 800624c:	00f42400 	.word	0x00f42400

08006250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01a      	beq.n	8006366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800634e:	d10a      	bne.n	8006366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b098      	sub	sp, #96	@ 0x60
 8006398:	af02      	add	r7, sp, #8
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063a4:	f7fb fa2a 	bl	80017fc <HAL_GetTick>
 80063a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d12e      	bne.n	8006416 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c0:	2200      	movs	r2, #0
 80063c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f88c 	bl	80064e4 <UART_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d021      	beq.n	8006416 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e6      	bne.n	80063d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e062      	b.n	80064dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b04      	cmp	r3, #4
 8006422:	d149      	bne.n	80064b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006424:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642c:	2200      	movs	r2, #0
 800642e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f856 	bl	80064e4 <UART_WaitOnFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03c      	beq.n	80064b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	623b      	str	r3, [r7, #32]
   return(result);
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645c:	633b      	str	r3, [r7, #48]	@ 0x30
 800645e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e6      	bne.n	800643e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006490:	61fa      	str	r2, [r7, #28]
 8006492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	617b      	str	r3, [r7, #20]
   return(result);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e011      	b.n	80064dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3758      	adds	r7, #88	@ 0x58
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f4:	e04f      	b.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064fc:	d04b      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fe:	f7fb f97d 	bl	80017fc <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	429a      	cmp	r2, r3
 800650c:	d302      	bcc.n	8006514 <UART_WaitOnFlagUntilTimeout+0x30>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e04e      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d037      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b80      	cmp	r3, #128	@ 0x80
 800652a:	d034      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb2>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d031      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b08      	cmp	r3, #8
 800653e:	d110      	bne.n	8006562 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2208      	movs	r2, #8
 8006546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f838 	bl	80065be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2208      	movs	r2, #8
 8006552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e029      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006570:	d111      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800657a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f81e 	bl	80065be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e00f      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4013      	ands	r3, r2
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	bf0c      	ite	eq
 80065a6:	2301      	moveq	r3, #1
 80065a8:	2300      	movne	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d0a0      	beq.n	80064f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065be:	b480      	push	{r7}
 80065c0:	b095      	sub	sp, #84	@ 0x54
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e6      	bne.n	80065c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	61fb      	str	r3, [r7, #28]
   return(result);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3308      	adds	r3, #8
 8006616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006618:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800661a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800661e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e5      	bne.n	80065f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006630:	2b01      	cmp	r3, #1
 8006632:	d118      	bne.n	8006666 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	60bb      	str	r3, [r7, #8]
   return(result);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 0310 	bic.w	r3, r3, #16
 8006648:	647b      	str	r3, [r7, #68]	@ 0x44
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	613b      	str	r3, [r7, #16]
   return(result);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e6      	bne.n	8006634 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800667a:	bf00      	nop
 800667c:	3754      	adds	r7, #84	@ 0x54
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006686:	b084      	sub	sp, #16
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	f107 001c 	add.w	r0, r7, #28
 8006694:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fa25 	bl	8007af4 <USB_CoreReset>
 80066aa:	4603      	mov	r3, r0
 80066ac:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80066ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80066c2:	e005      	b.n	80066d0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066dc:	b004      	add	sp, #16
 80066de:	4770      	bx	lr

080066e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d165      	bne.n	80067c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4a3e      	ldr	r2, [pc, #248]	@ (80067f0 <USB_SetTurnaroundTime+0x110>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d906      	bls.n	800670a <USB_SetTurnaroundTime+0x2a>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a3d      	ldr	r2, [pc, #244]	@ (80067f4 <USB_SetTurnaroundTime+0x114>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d202      	bcs.n	800670a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006704:	230f      	movs	r3, #15
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e05c      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4a39      	ldr	r2, [pc, #228]	@ (80067f4 <USB_SetTurnaroundTime+0x114>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d306      	bcc.n	8006720 <USB_SetTurnaroundTime+0x40>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4a38      	ldr	r2, [pc, #224]	@ (80067f8 <USB_SetTurnaroundTime+0x118>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d202      	bcs.n	8006720 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800671a:	230e      	movs	r3, #14
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	e051      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4a35      	ldr	r2, [pc, #212]	@ (80067f8 <USB_SetTurnaroundTime+0x118>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d306      	bcc.n	8006736 <USB_SetTurnaroundTime+0x56>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4a34      	ldr	r2, [pc, #208]	@ (80067fc <USB_SetTurnaroundTime+0x11c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d202      	bcs.n	8006736 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006730:	230d      	movs	r3, #13
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	e046      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4a30      	ldr	r2, [pc, #192]	@ (80067fc <USB_SetTurnaroundTime+0x11c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d306      	bcc.n	800674c <USB_SetTurnaroundTime+0x6c>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4a2f      	ldr	r2, [pc, #188]	@ (8006800 <USB_SetTurnaroundTime+0x120>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d802      	bhi.n	800674c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006746:	230c      	movs	r3, #12
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e03b      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4a2c      	ldr	r2, [pc, #176]	@ (8006800 <USB_SetTurnaroundTime+0x120>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d906      	bls.n	8006762 <USB_SetTurnaroundTime+0x82>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4a2b      	ldr	r2, [pc, #172]	@ (8006804 <USB_SetTurnaroundTime+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d802      	bhi.n	8006762 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800675c:	230b      	movs	r3, #11
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e030      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4a27      	ldr	r2, [pc, #156]	@ (8006804 <USB_SetTurnaroundTime+0x124>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d906      	bls.n	8006778 <USB_SetTurnaroundTime+0x98>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4a26      	ldr	r2, [pc, #152]	@ (8006808 <USB_SetTurnaroundTime+0x128>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d802      	bhi.n	8006778 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006772:	230a      	movs	r3, #10
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e025      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4a23      	ldr	r2, [pc, #140]	@ (8006808 <USB_SetTurnaroundTime+0x128>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d906      	bls.n	800678e <USB_SetTurnaroundTime+0xae>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4a22      	ldr	r2, [pc, #136]	@ (800680c <USB_SetTurnaroundTime+0x12c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d202      	bcs.n	800678e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006788:	2309      	movs	r3, #9
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e01a      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4a1e      	ldr	r2, [pc, #120]	@ (800680c <USB_SetTurnaroundTime+0x12c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d306      	bcc.n	80067a4 <USB_SetTurnaroundTime+0xc4>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <USB_SetTurnaroundTime+0x130>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d802      	bhi.n	80067a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800679e:	2308      	movs	r3, #8
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e00f      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006810 <USB_SetTurnaroundTime+0x130>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d906      	bls.n	80067ba <USB_SetTurnaroundTime+0xda>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4a19      	ldr	r2, [pc, #100]	@ (8006814 <USB_SetTurnaroundTime+0x134>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d202      	bcs.n	80067ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067b4:	2307      	movs	r3, #7
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e004      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067ba:	2306      	movs	r3, #6
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	e001      	b.n	80067c4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067c0:	2309      	movs	r3, #9
 80067c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	00d8acbf 	.word	0x00d8acbf
 80067f4:	00e4e1c0 	.word	0x00e4e1c0
 80067f8:	00f42400 	.word	0x00f42400
 80067fc:	01067380 	.word	0x01067380
 8006800:	011a499f 	.word	0x011a499f
 8006804:	01312cff 	.word	0x01312cff
 8006808:	014ca43f 	.word	0x014ca43f
 800680c:	016e3600 	.word	0x016e3600
 8006810:	01a6ab1f 	.word	0x01a6ab1f
 8006814:	01e84800 	.word	0x01e84800

08006818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f043 0201 	orr.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d115      	bne.n	80068aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800688a:	200a      	movs	r0, #10
 800688c:	f7fa ffc2 	bl	8001814 <HAL_Delay>
      ms += 10U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	330a      	adds	r3, #10
 8006894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 f8b3 	bl	8007a02 <USB_GetMode>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d01e      	beq.n	80068e0 <USB_SetCurrentMode+0x84>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80068a6:	d9f0      	bls.n	800688a <USB_SetCurrentMode+0x2e>
 80068a8:	e01a      	b.n	80068e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d115      	bne.n	80068dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068bc:	200a      	movs	r0, #10
 80068be:	f7fa ffa9 	bl	8001814 <HAL_Delay>
      ms += 10U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	330a      	adds	r3, #10
 80068c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 f89a 	bl	8007a02 <USB_GetMode>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <USB_SetCurrentMode+0x84>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80068d8:	d9f0      	bls.n	80068bc <USB_SetCurrentMode+0x60>
 80068da:	e001      	b.n	80068e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e005      	b.n	80068ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80068e4:	d101      	bne.n	80068ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068f4:	b084      	sub	sp, #16
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b086      	sub	sp, #24
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800690e:	2300      	movs	r3, #0
 8006910:	613b      	str	r3, [r7, #16]
 8006912:	e009      	b.n	8006928 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3340      	adds	r3, #64	@ 0x40
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	2200      	movs	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3301      	adds	r3, #1
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b0e      	cmp	r3, #14
 800692c:	d9f2      	bls.n	8006914 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800692e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11c      	bne.n	8006970 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	e005      	b.n	800697c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006974:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006988:	2103      	movs	r1, #3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f95a 	bl	8006c44 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006990:	2110      	movs	r1, #16
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f8f6 	bl	8006b84 <USB_FlushTxFifo>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f920 	bl	8006be8 <USB_FlushRxFifo>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b8:	461a      	mov	r2, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c4:	461a      	mov	r2, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d0:	461a      	mov	r2, r3
 80069d2:	2300      	movs	r3, #0
 80069d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	e043      	b.n	8006a64 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069f2:	d118      	bne.n	8006a26 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a06:	461a      	mov	r2, r3
 8006a08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e013      	b.n	8006a38 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	e008      	b.n	8006a38 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a32:	461a      	mov	r2, r3
 8006a34:	2300      	movs	r3, #0
 8006a36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a44:	461a      	mov	r2, r3
 8006a46:	2300      	movs	r3, #0
 8006a48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a56:	461a      	mov	r2, r3
 8006a58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3301      	adds	r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a68:	461a      	mov	r2, r3
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d3b5      	bcc.n	80069dc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	e043      	b.n	8006afe <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a8c:	d118      	bne.n	8006ac0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	e013      	b.n	8006ad2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	e008      	b.n	8006ad2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006acc:	461a      	mov	r2, r3
 8006ace:	2300      	movs	r3, #0
 8006ad0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af0:	461a      	mov	r2, r3
 8006af2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006af6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3301      	adds	r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b02:	461a      	mov	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d3b5      	bcc.n	8006a76 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f043 0210 	orr.w	r2, r3, #16
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	4b10      	ldr	r3, [pc, #64]	@ (8006b80 <USB_DevInit+0x28c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f043 0208 	orr.w	r2, r3, #8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d107      	bne.n	8006b70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b68:	f043 0304 	orr.w	r3, r3, #4
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b7c:	b004      	add	sp, #16
 8006b7e:	4770      	bx	lr
 8006b80:	803c3800 	.word	0x803c3800

08006b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b9e:	d901      	bls.n	8006ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e01b      	b.n	8006bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	daf2      	bge.n	8006b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	019b      	lsls	r3, r3, #6
 8006bb4:	f043 0220 	orr.w	r2, r3, #32
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc8:	d901      	bls.n	8006bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e006      	b.n	8006bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d0f0      	beq.n	8006bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c00:	d901      	bls.n	8006c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e018      	b.n	8006c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	daf2      	bge.n	8006bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2210      	movs	r2, #16
 8006c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c24:	d901      	bls.n	8006c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e006      	b.n	8006c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b10      	cmp	r3, #16
 8006c34:	d0f0      	beq.n	8006c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 0306 	and.w	r3, r3, #6
 8006c8e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d002      	beq.n	8006c9c <USB_GetDevSpeed+0x26>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b06      	cmp	r3, #6
 8006c9a:	d102      	bne.n	8006ca2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	75fb      	strb	r3, [r7, #23]
 8006ca0:	e001      	b.n	8006ca6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006ca2:	230f      	movs	r3, #15
 8006ca4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d13a      	bne.n	8006d46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d155      	bne.n	8006db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	791b      	ldrb	r3, [r3, #4]
 8006d22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	059b      	lsls	r3, r3, #22
 8006d2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	e036      	b.n	8006db4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d4c:	69da      	ldr	r2, [r3, #28]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	2101      	movs	r1, #1
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d64:	4313      	orrs	r3, r2
 8006d66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d11a      	bne.n	8006db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	791b      	ldrb	r3, [r3, #4]
 8006d98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d161      	bne.n	8006ea4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006df6:	d11f      	bne.n	8006e38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	2101      	movs	r1, #1
 8006e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	43db      	mvns	r3, r3
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e58:	4013      	ands	r3, r2
 8006e5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	43db      	mvns	r3, r3
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	0159      	lsls	r1, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4b35      	ldr	r3, [pc, #212]	@ (8006f74 <USB_DeactivateEndpoint+0x1b0>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]
 8006ea2:	e060      	b.n	8006f66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eba:	d11f      	bne.n	8006efc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006eda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	43db      	mvns	r3, r3
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	2101      	movs	r1, #1
 8006f32:	fa01 f303 	lsl.w	r3, r1, r3
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f40:	4013      	ands	r3, r2
 8006f42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	0159      	lsls	r1, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	440b      	add	r3, r1
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4b05      	ldr	r3, [pc, #20]	@ (8006f78 <USB_DeactivateEndpoint+0x1b4>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	ec337800 	.word	0xec337800
 8006f78:	eff37800 	.word	0xeff37800

08006f7c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	f040 812d 	bne.w	80071f4 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d132      	bne.n	8007008 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fbc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fc0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007000:	0cdb      	lsrs	r3, r3, #19
 8007002:	04db      	lsls	r3, r3, #19
 8007004:	6113      	str	r3, [r2, #16]
 8007006:	e097      	b.n	8007138 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007022:	0cdb      	lsrs	r3, r3, #19
 8007024:	04db      	lsls	r3, r3, #19
 8007026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007042:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007046:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800704a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d11a      	bne.n	8007088 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	691a      	ldr	r2, [r3, #16]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007080:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007084:	6113      	str	r3, [r2, #16]
 8007086:	e044      	b.n	8007112 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4413      	add	r3, r2
 8007092:	1e5a      	subs	r2, r3, #1
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	04d9      	lsls	r1, r3, #19
 80070b0:	4b8f      	ldr	r3, [pc, #572]	@ (80072f0 <USB_EPStartXfer+0x374>)
 80070b2:	400b      	ands	r3, r1
 80070b4:	6939      	ldr	r1, [r7, #16]
 80070b6:	0148      	lsls	r0, r1, #5
 80070b8:	6979      	ldr	r1, [r7, #20]
 80070ba:	4401      	add	r1, r0
 80070bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070c0:	4313      	orrs	r3, r2
 80070c2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	791b      	ldrb	r3, [r3, #4]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d122      	bne.n	8007112 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80070ea:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	075b      	lsls	r3, r3, #29
 80070fe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007102:	6939      	ldr	r1, [r7, #16]
 8007104:	0148      	lsls	r0, r1, #5
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	4401      	add	r1, r0
 800710a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800710e:	4313      	orrs	r3, r2
 8007110:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007128:	6939      	ldr	r1, [r7, #16]
 800712a:	0148      	lsls	r0, r1, #5
 800712c:	6979      	ldr	r1, [r7, #20]
 800712e:	4401      	add	r1, r0
 8007130:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007134:	4313      	orrs	r3, r2
 8007136:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007152:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007156:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	791b      	ldrb	r3, [r3, #4]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d015      	beq.n	800718c <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 813a 	beq.w	80073de <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	2101      	movs	r1, #1
 800717c:	fa01 f303 	lsl.w	r3, r1, r3
 8007180:	6979      	ldr	r1, [r7, #20]
 8007182:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007186:	4313      	orrs	r3, r2
 8007188:	634b      	str	r3, [r1, #52]	@ 0x34
 800718a:	e128      	b.n	80073de <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007198:	2b00      	cmp	r3, #0
 800719a:	d110      	bne.n	80071be <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	e00f      	b.n	80071de <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071dc:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68d9      	ldr	r1, [r3, #12]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f9a7 	bl	8007540 <USB_WritePacket>
 80071f2:	e0f4      	b.n	80073de <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800720e:	0cdb      	lsrs	r3, r3, #19
 8007210:	04db      	lsls	r3, r3, #19
 8007212:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800722e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007232:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007236:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d12f      	bne.n	800729e <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726c:	6939      	ldr	r1, [r7, #16]
 800726e:	0148      	lsls	r0, r1, #5
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	4401      	add	r1, r0
 8007274:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007278:	4313      	orrs	r3, r2
 800727a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800729a:	6113      	str	r3, [r2, #16]
 800729c:	e062      	b.n	8007364 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d126      	bne.n	80072f4 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072bc:	6939      	ldr	r1, [r7, #16]
 80072be:	0148      	lsls	r0, r1, #5
 80072c0:	6979      	ldr	r1, [r7, #20]
 80072c2:	4401      	add	r1, r0
 80072c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072c8:	4313      	orrs	r3, r2
 80072ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	0151      	lsls	r1, r2, #5
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	440a      	add	r2, r1
 80072e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072ea:	6113      	str	r3, [r2, #16]
 80072ec:	e03a      	b.n	8007364 <USB_EPStartXfer+0x3e8>
 80072ee:	bf00      	nop
 80072f0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	4413      	add	r3, r2
 80072fe:	1e5a      	subs	r2, r3, #1
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	fbb2 f3f3 	udiv	r3, r2, r3
 8007308:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	89fa      	ldrh	r2, [r7, #14]
 8007310:	fb03 f202 	mul.w	r2, r3, r2
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	89fb      	ldrh	r3, [r7, #14]
 8007328:	04d9      	lsls	r1, r3, #19
 800732a:	4b2f      	ldr	r3, [pc, #188]	@ (80073e8 <USB_EPStartXfer+0x46c>)
 800732c:	400b      	ands	r3, r1
 800732e:	6939      	ldr	r1, [r7, #16]
 8007330:	0148      	lsls	r0, r1, #5
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	4401      	add	r1, r0
 8007336:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800733a:	4313      	orrs	r3, r2
 800733c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007354:	6939      	ldr	r1, [r7, #16]
 8007356:	0148      	lsls	r0, r1, #5
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	4401      	add	r1, r0
 800735c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007360:	4313      	orrs	r3, r2
 8007362:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d128      	bne.n	80073be <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007378:	2b00      	cmp	r3, #0
 800737a:	d110      	bne.n	800739e <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007396:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e00f      	b.n	80073be <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073bc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80073dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	1ff80000 	.word	0x1ff80000

080073ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d14a      	bne.n	80074a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800741e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007422:	f040 8086 	bne.w	8007532 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007448:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	7812      	ldrb	r2, [r2, #0]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800746c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f242 7210 	movw	r2, #10000	@ 0x2710
 800747a:	4293      	cmp	r3, r2
 800747c:	d902      	bls.n	8007484 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
          break;
 8007482:	e056      	b.n	8007532 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800749c:	d0e7      	beq.n	800746e <USB_EPStopXfer+0x82>
 800749e:	e048      	b.n	8007532 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b8:	d13b      	bne.n	8007532 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007500:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800750e:	4293      	cmp	r3, r2
 8007510:	d902      	bls.n	8007518 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	75fb      	strb	r3, [r7, #23]
          break;
 8007516:	e00c      	b.n	8007532 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800752c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007530:	d0e7      	beq.n	8007502 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
}
 8007534:	4618      	mov	r0, r3
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007540:	b480      	push	{r7}
 8007542:	b089      	sub	sp, #36	@ 0x24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4611      	mov	r1, r2
 800754c:	461a      	mov	r2, r3
 800754e:	460b      	mov	r3, r1
 8007550:	71fb      	strb	r3, [r7, #7]
 8007552:	4613      	mov	r3, r2
 8007554:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800755e:	88bb      	ldrh	r3, [r7, #4]
 8007560:	3303      	adds	r3, #3
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e018      	b.n	800759e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	031a      	lsls	r2, r3, #12
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4413      	add	r3, r2
 8007574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007578:	461a      	mov	r2, r3
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	3301      	adds	r3, #1
 8007584:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3301      	adds	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	3301      	adds	r3, #1
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d3e2      	bcc.n	800756c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3724      	adds	r7, #36	@ 0x24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b08b      	sub	sp, #44	@ 0x2c
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	089b      	lsrs	r3, r3, #2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075da:	2300      	movs	r3, #0
 80075dc:	623b      	str	r3, [r7, #32]
 80075de:	e014      	b.n	800760a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	3301      	adds	r3, #1
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	3301      	adds	r3, #1
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	3301      	adds	r3, #1
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	3301      	adds	r3, #1
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	3301      	adds	r3, #1
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	6a3a      	ldr	r2, [r7, #32]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	429a      	cmp	r2, r3
 8007610:	d3e6      	bcc.n	80075e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007612:	8bfb      	ldrh	r3, [r7, #30]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01e      	beq.n	8007656 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007622:	461a      	mov	r2, r3
 8007624:	f107 0310 	add.w	r3, r7, #16
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
 8007638:	b2da      	uxtb	r2, r3
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	701a      	strb	r2, [r3, #0]
      i++;
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	3301      	adds	r3, #1
 8007642:	623b      	str	r3, [r7, #32]
      pDest++;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	3301      	adds	r3, #1
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800764a:	8bfb      	ldrh	r3, [r7, #30]
 800764c:	3b01      	subs	r3, #1
 800764e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007650:	8bfb      	ldrh	r3, [r7, #30]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1ea      	bne.n	800762c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007658:	4618      	mov	r0, r3
 800765a:	372c      	adds	r7, #44	@ 0x2c
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d12c      	bne.n	80076da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	db12      	blt.n	80076b8 <USB_EPSetStall+0x54>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00f      	beq.n	80076b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80076b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	e02b      	b.n	8007732 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	db12      	blt.n	8007712 <USB_EPSetStall+0xae>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00f      	beq.n	8007712 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	440a      	add	r2, r1
 8007708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800770c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007710:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800772c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d128      	bne.n	80077ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007776:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800777a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	791b      	ldrb	r3, [r3, #4]
 8007780:	2b03      	cmp	r3, #3
 8007782:	d003      	beq.n	800778c <USB_EPClearStall+0x4c>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	791b      	ldrb	r3, [r3, #4]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d138      	bne.n	80077fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	e027      	b.n	80077fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	791b      	ldrb	r3, [r3, #4]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d003      	beq.n	80077de <USB_EPClearStall+0x9e>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d10f      	bne.n	80077fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800782a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800782e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007840:	68f9      	ldr	r1, [r7, #12]
 8007842:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007872:	f023 0303 	bic.w	r3, r3, #3
 8007876:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007886:	f023 0302 	bic.w	r3, r3, #2
 800788a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800789a:	b480      	push	{r7}
 800789c:	b085      	sub	sp, #20
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078b4:	f023 0303 	bic.w	r3, r3, #3
 80078b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078c8:	f043 0302 	orr.w	r3, r3, #2
 80078cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4013      	ands	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078f4:	68fb      	ldr	r3, [r7, #12]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	4013      	ands	r3, r2
 8007924:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	0c1b      	lsrs	r3, r3, #16
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	4013      	ands	r3, r2
 8007958:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	b29b      	uxth	r3, r3
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	4013      	ands	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007998:	68bb      	ldr	r3, [r7, #8]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b087      	sub	sp, #28
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	fa22 f303 	lsr.w	r3, r2, r3
 80079d6:	01db      	lsls	r3, r3, #7
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4013      	ands	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079f4:	68bb      	ldr	r3, [r7, #8]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a3c:	f023 0307 	bic.w	r3, r3, #7
 8007a40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	333c      	adds	r3, #60	@ 0x3c
 8007a76:	3304      	adds	r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <USB_EP0_OutStart+0x8c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d90a      	bls.n	8007a9a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a94:	d101      	bne.n	8007a9a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e024      	b.n	8007ae4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ac8:	f043 0318 	orr.w	r3, r3, #24
 8007acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007adc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007ae0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	4f54300a 	.word	0x4f54300a

08007af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b0c:	d901      	bls.n	8007b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e01b      	b.n	8007b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	daf2      	bge.n	8007b00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f043 0201 	orr.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b36:	d901      	bls.n	8007b3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e006      	b.n	8007b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d0f0      	beq.n	8007b2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b68:	f002 fe60 	bl	800a82c <USBD_static_malloc>
 8007b6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32b0      	adds	r2, #176	@ 0xb0
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b84:	2302      	movs	r3, #2
 8007b86:	e0d4      	b.n	8007d32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f003 f848 	bl	800ac24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	32b0      	adds	r2, #176	@ 0xb0
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32b0      	adds	r2, #176	@ 0xb0
 8007bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7c1b      	ldrb	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d138      	bne.n	8007c32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8007d3c <USBD_CDC_Init+0x1e4>)
 8007bc2:	7819      	ldrb	r1, [r3, #0]
 8007bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bc8:	2202      	movs	r2, #2
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f002 fc1a 	bl	800a404 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8007d3c <USBD_CDC_Init+0x1e4>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	3324      	adds	r3, #36	@ 0x24
 8007be6:	2201      	movs	r2, #1
 8007be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bea:	4b55      	ldr	r3, [pc, #340]	@ (8007d40 <USBD_CDC_Init+0x1e8>)
 8007bec:	7819      	ldrb	r1, [r3, #0]
 8007bee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f002 fc05 	bl	800a404 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bfa:	4b51      	ldr	r3, [pc, #324]	@ (8007d40 <USBD_CDC_Init+0x1e8>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f003 020f 	and.w	r2, r3, #15
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c12:	2201      	movs	r2, #1
 8007c14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c16:	4b4b      	ldr	r3, [pc, #300]	@ (8007d44 <USBD_CDC_Init+0x1ec>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3326      	adds	r3, #38	@ 0x26
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e035      	b.n	8007c9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c32:	4b42      	ldr	r3, [pc, #264]	@ (8007d3c <USBD_CDC_Init+0x1e4>)
 8007c34:	7819      	ldrb	r1, [r3, #0]
 8007c36:	2340      	movs	r3, #64	@ 0x40
 8007c38:	2202      	movs	r2, #2
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f002 fbe2 	bl	800a404 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c40:	4b3e      	ldr	r3, [pc, #248]	@ (8007d3c <USBD_CDC_Init+0x1e4>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f003 020f 	and.w	r2, r3, #15
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	3324      	adds	r3, #36	@ 0x24
 8007c56:	2201      	movs	r2, #1
 8007c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c5a:	4b39      	ldr	r3, [pc, #228]	@ (8007d40 <USBD_CDC_Init+0x1e8>)
 8007c5c:	7819      	ldrb	r1, [r3, #0]
 8007c5e:	2340      	movs	r3, #64	@ 0x40
 8007c60:	2202      	movs	r2, #2
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f002 fbce 	bl	800a404 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c68:	4b35      	ldr	r3, [pc, #212]	@ (8007d40 <USBD_CDC_Init+0x1e8>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c80:	2201      	movs	r2, #1
 8007c82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c84:	4b2f      	ldr	r3, [pc, #188]	@ (8007d44 <USBD_CDC_Init+0x1ec>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 020f 	and.w	r2, r3, #15
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	3326      	adds	r3, #38	@ 0x26
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c9e:	4b29      	ldr	r3, [pc, #164]	@ (8007d44 <USBD_CDC_Init+0x1ec>)
 8007ca0:	7819      	ldrb	r1, [r3, #0]
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f002 fbac 	bl	800a404 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cac:	4b25      	ldr	r3, [pc, #148]	@ (8007d44 <USBD_CDC_Init+0x1ec>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 020f 	and.w	r2, r3, #15
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3324      	adds	r3, #36	@ 0x24
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	33b0      	adds	r3, #176	@ 0xb0
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e018      	b.n	8007d32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	7c1b      	ldrb	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d08:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <USBD_CDC_Init+0x1e8>)
 8007d0a:	7819      	ldrb	r1, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f002 fcee 	bl	800a6f8 <USBD_LL_PrepareReceive>
 8007d1c:	e008      	b.n	8007d30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d1e:	4b08      	ldr	r3, [pc, #32]	@ (8007d40 <USBD_CDC_Init+0x1e8>)
 8007d20:	7819      	ldrb	r1, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d28:	2340      	movs	r3, #64	@ 0x40
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f002 fce4 	bl	800a6f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000093 	.word	0x20000093
 8007d40:	20000094 	.word	0x20000094
 8007d44:	20000095 	.word	0x20000095

08007d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d54:	4b3a      	ldr	r3, [pc, #232]	@ (8007e40 <USBD_CDC_DeInit+0xf8>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f002 fb90 	bl	800a480 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d60:	4b37      	ldr	r3, [pc, #220]	@ (8007e40 <USBD_CDC_DeInit+0xf8>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 020f 	and.w	r2, r3, #15
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	3324      	adds	r3, #36	@ 0x24
 8007d76:	2200      	movs	r2, #0
 8007d78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d7a:	4b32      	ldr	r3, [pc, #200]	@ (8007e44 <USBD_CDC_DeInit+0xfc>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f002 fb7d 	bl	800a480 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d86:	4b2f      	ldr	r3, [pc, #188]	@ (8007e44 <USBD_CDC_DeInit+0xfc>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 020f 	and.w	r2, r3, #15
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d9e:	2200      	movs	r2, #0
 8007da0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007da2:	4b29      	ldr	r3, [pc, #164]	@ (8007e48 <USBD_CDC_DeInit+0x100>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f002 fb69 	bl	800a480 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007dae:	4b26      	ldr	r3, [pc, #152]	@ (8007e48 <USBD_CDC_DeInit+0x100>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	f003 020f 	and.w	r2, r3, #15
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	3324      	adds	r3, #36	@ 0x24
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007e48 <USBD_CDC_DeInit+0x100>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3326      	adds	r3, #38	@ 0x26
 8007dde:	2200      	movs	r2, #0
 8007de0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32b0      	adds	r2, #176	@ 0xb0
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01f      	beq.n	8007e34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	33b0      	adds	r3, #176	@ 0xb0
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	32b0      	adds	r2, #176	@ 0xb0
 8007e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f002 fd16 	bl	800a848 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	32b0      	adds	r2, #176	@ 0xb0
 8007e26:	2100      	movs	r1, #0
 8007e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000093 	.word	0x20000093
 8007e44:	20000094 	.word	0x20000094
 8007e48:	20000095 	.word	0x20000095

08007e4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	32b0      	adds	r2, #176	@ 0xb0
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e0bf      	b.n	8007ffc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d050      	beq.n	8007f2a <USBD_CDC_Setup+0xde>
 8007e88:	2b20      	cmp	r3, #32
 8007e8a:	f040 80af 	bne.w	8007fec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	88db      	ldrh	r3, [r3, #6]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d03a      	beq.n	8007f0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	da1b      	bge.n	8007ed8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	33b0      	adds	r3, #176	@ 0xb0
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007eb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	88d2      	ldrh	r2, [r2, #6]
 8007ebc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	88db      	ldrh	r3, [r3, #6]
 8007ec2:	2b07      	cmp	r3, #7
 8007ec4:	bf28      	it	cs
 8007ec6:	2307      	movcs	r3, #7
 8007ec8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	89fa      	ldrh	r2, [r7, #14]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 fdbd 	bl	8009a50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ed6:	e090      	b.n	8007ffa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	785a      	ldrb	r2, [r3, #1]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	88db      	ldrh	r3, [r3, #6]
 8007ee6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ee8:	d803      	bhi.n	8007ef2 <USBD_CDC_Setup+0xa6>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	88db      	ldrh	r3, [r3, #6]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	e000      	b.n	8007ef4 <USBD_CDC_Setup+0xa8>
 8007ef2:	2240      	movs	r2, #64	@ 0x40
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007efa:	6939      	ldr	r1, [r7, #16]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007f02:	461a      	mov	r2, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 fdcf 	bl	8009aa8 <USBD_CtlPrepareRx>
      break;
 8007f0a:	e076      	b.n	8007ffa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	33b0      	adds	r3, #176	@ 0xb0
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	7850      	ldrb	r0, [r2, #1]
 8007f22:	2200      	movs	r2, #0
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	4798      	blx	r3
      break;
 8007f28:	e067      	b.n	8007ffa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	785b      	ldrb	r3, [r3, #1]
 8007f2e:	2b0b      	cmp	r3, #11
 8007f30:	d851      	bhi.n	8007fd6 <USBD_CDC_Setup+0x18a>
 8007f32:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <USBD_CDC_Setup+0xec>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007fe5 	.word	0x08007fe5
 8007f40:	08007fd7 	.word	0x08007fd7
 8007f44:	08007fd7 	.word	0x08007fd7
 8007f48:	08007fd7 	.word	0x08007fd7
 8007f4c:	08007fd7 	.word	0x08007fd7
 8007f50:	08007fd7 	.word	0x08007fd7
 8007f54:	08007fd7 	.word	0x08007fd7
 8007f58:	08007fd7 	.word	0x08007fd7
 8007f5c:	08007fd7 	.word	0x08007fd7
 8007f60:	08007f93 	.word	0x08007f93
 8007f64:	08007fbd 	.word	0x08007fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d107      	bne.n	8007f84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f74:	f107 030a 	add.w	r3, r7, #10
 8007f78:	2202      	movs	r2, #2
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 fd67 	bl	8009a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f82:	e032      	b.n	8007fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fce5 	bl	8009956 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f90:	e02b      	b.n	8007fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d107      	bne.n	8007fae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f9e:	f107 030d 	add.w	r3, r7, #13
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fd52 	bl	8009a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fac:	e01d      	b.n	8007fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 fcd0 	bl	8009956 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007fba:	e016      	b.n	8007fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d00f      	beq.n	8007fe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fcc3 	bl	8009956 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fd4:	e008      	b.n	8007fe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 fcbc 	bl	8009956 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fe2:	e002      	b.n	8007fea <USBD_CDC_Setup+0x19e>
          break;
 8007fe4:	bf00      	nop
 8007fe6:	e008      	b.n	8007ffa <USBD_CDC_Setup+0x1ae>
          break;
 8007fe8:	bf00      	nop
      }
      break;
 8007fea:	e006      	b.n	8007ffa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fcb1 	bl	8009956 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	32b0      	adds	r2, #176	@ 0xb0
 8008022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	e065      	b.n	80080fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	32b0      	adds	r2, #176	@ 0xb0
 8008038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	3318      	adds	r3, #24
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d02f      	beq.n	80080b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	f003 020f 	and.w	r2, r3, #15
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	3318      	adds	r3, #24
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	f003 010f 	and.w	r1, r3, #15
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	460b      	mov	r3, r1
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	440b      	add	r3, r1
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4403      	add	r3, r0
 8008080:	331c      	adds	r3, #28
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	fbb2 f1f3 	udiv	r1, r2, r3
 8008088:	fb01 f303 	mul.w	r3, r1, r3
 800808c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800808e:	2b00      	cmp	r3, #0
 8008090:	d112      	bne.n	80080b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	f003 020f 	and.w	r2, r3, #15
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	3318      	adds	r3, #24
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080aa:	78f9      	ldrb	r1, [r7, #3]
 80080ac:	2300      	movs	r3, #0
 80080ae:	2200      	movs	r2, #0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f002 fae9 	bl	800a688 <USBD_LL_Transmit>
 80080b6:	e01f      	b.n	80080f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	33b0      	adds	r3, #176	@ 0xb0
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	33b0      	adds	r3, #176	@ 0xb0
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	32b0      	adds	r2, #176	@ 0xb0
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	32b0      	adds	r2, #176	@ 0xb0
 8008128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	e01a      	b.n	800816a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f002 fb15 	bl	800a768 <USBD_LL_GetRxDataSize>
 800813e:	4602      	mov	r2, r0
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	33b0      	adds	r3, #176	@ 0xb0
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008164:	4611      	mov	r1, r2
 8008166:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	32b0      	adds	r2, #176	@ 0xb0
 8008184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	e024      	b.n	80081de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	33b0      	adds	r3, #176	@ 0xb0
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d019      	beq.n	80081dc <USBD_CDC_EP0_RxReady+0x6a>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80081ae:	2bff      	cmp	r3, #255	@ 0xff
 80081b0:	d014      	beq.n	80081dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	33b0      	adds	r3, #176	@ 0xb0
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80081ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	22ff      	movs	r2, #255	@ 0xff
 80081d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081f0:	2182      	movs	r1, #130	@ 0x82
 80081f2:	4818      	ldr	r0, [pc, #96]	@ (8008254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081f4:	f000 fd4f 	bl	8008c96 <USBD_GetEpDesc>
 80081f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081fa:	2101      	movs	r1, #1
 80081fc:	4815      	ldr	r0, [pc, #84]	@ (8008254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081fe:	f000 fd4a 	bl	8008c96 <USBD_GetEpDesc>
 8008202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008204:	2181      	movs	r1, #129	@ 0x81
 8008206:	4813      	ldr	r0, [pc, #76]	@ (8008254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008208:	f000 fd45 	bl	8008c96 <USBD_GetEpDesc>
 800820c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2210      	movs	r2, #16
 8008218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d006      	beq.n	800822e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2200      	movs	r2, #0
 8008224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008228:	711a      	strb	r2, [r3, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d006      	beq.n	8008242 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800823c:	711a      	strb	r2, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2243      	movs	r2, #67	@ 0x43
 8008246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008248:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000050 	.word	0x20000050

08008258 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008260:	2182      	movs	r1, #130	@ 0x82
 8008262:	4818      	ldr	r0, [pc, #96]	@ (80082c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008264:	f000 fd17 	bl	8008c96 <USBD_GetEpDesc>
 8008268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800826a:	2101      	movs	r1, #1
 800826c:	4815      	ldr	r0, [pc, #84]	@ (80082c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800826e:	f000 fd12 	bl	8008c96 <USBD_GetEpDesc>
 8008272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008274:	2181      	movs	r1, #129	@ 0x81
 8008276:	4813      	ldr	r0, [pc, #76]	@ (80082c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008278:	f000 fd0d 	bl	8008c96 <USBD_GetEpDesc>
 800827c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2210      	movs	r2, #16
 8008288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d006      	beq.n	800829e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2200      	movs	r2, #0
 8008294:	711a      	strb	r2, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f042 0202 	orr.w	r2, r2, #2
 800829c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d006      	beq.n	80082b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	711a      	strb	r2, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f042 0202 	orr.w	r2, r2, #2
 80082b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2243      	movs	r2, #67	@ 0x43
 80082b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082b8:	4b02      	ldr	r3, [pc, #8]	@ (80082c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000050 	.word	0x20000050

080082c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082d0:	2182      	movs	r1, #130	@ 0x82
 80082d2:	4818      	ldr	r0, [pc, #96]	@ (8008334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082d4:	f000 fcdf 	bl	8008c96 <USBD_GetEpDesc>
 80082d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082da:	2101      	movs	r1, #1
 80082dc:	4815      	ldr	r0, [pc, #84]	@ (8008334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082de:	f000 fcda 	bl	8008c96 <USBD_GetEpDesc>
 80082e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082e4:	2181      	movs	r1, #129	@ 0x81
 80082e6:	4813      	ldr	r0, [pc, #76]	@ (8008334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082e8:	f000 fcd5 	bl	8008c96 <USBD_GetEpDesc>
 80082ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2210      	movs	r2, #16
 80082f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d006      	beq.n	800830e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2200      	movs	r2, #0
 8008304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008308:	711a      	strb	r2, [r3, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800831c:	711a      	strb	r2, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2243      	movs	r2, #67	@ 0x43
 8008326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008328:	4b02      	ldr	r3, [pc, #8]	@ (8008334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000050 	.word	0x20000050

08008338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	220a      	movs	r2, #10
 8008344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008346:	4b03      	ldr	r3, [pc, #12]	@ (8008354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	2000000c 	.word	0x2000000c

08008358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e009      	b.n	8008380 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	33b0      	adds	r3, #176	@ 0xb0
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	32b0      	adds	r2, #176	@ 0xb0
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e008      	b.n	80083c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	32b0      	adds	r2, #176	@ 0xb0
 80083e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e004      	b.n	80083fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32b0      	adds	r2, #176	@ 0xb0
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800842e:	2303      	movs	r3, #3
 8008430:	e025      	b.n	800847e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008438:	2b00      	cmp	r3, #0
 800843a:	d11f      	bne.n	800847c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2201      	movs	r2, #1
 8008440:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008444:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <USBD_CDC_TransmitPacket+0x7c>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4403      	add	r3, r0
 800845e:	3318      	adds	r3, #24
 8008460:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008462:	4b09      	ldr	r3, [pc, #36]	@ (8008488 <USBD_CDC_TransmitPacket+0x7c>)
 8008464:	7819      	ldrb	r1, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f002 f908 	bl	800a688 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000093 	.word	0x20000093

0800848c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	32b0      	adds	r2, #176	@ 0xb0
 800849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32b0      	adds	r2, #176	@ 0xb0
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e018      	b.n	80084ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084c2:	4b0c      	ldr	r3, [pc, #48]	@ (80084f4 <USBD_CDC_ReceivePacket+0x68>)
 80084c4:	7819      	ldrb	r1, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f002 f911 	bl	800a6f8 <USBD_LL_PrepareReceive>
 80084d6:	e008      	b.n	80084ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084d8:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <USBD_CDC_ReceivePacket+0x68>)
 80084da:	7819      	ldrb	r1, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084e2:	2340      	movs	r3, #64	@ 0x40
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 f907 	bl	800a6f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000094 	.word	0x20000094

080084f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	4613      	mov	r3, r2
 8008504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	e01f      	b.n	8008550 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	79fa      	ldrb	r2, [r7, #7]
 8008542:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f001 fedf 	bl	800a308 <USBD_LL_Init>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	e025      	b.n	80085bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32ae      	adds	r2, #174	@ 0xae
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00f      	beq.n	80085ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32ae      	adds	r2, #174	@ 0xae
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	f107 020e 	add.w	r2, r7, #14
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	4602      	mov	r2, r0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 fee7 	bl	800a3a0 <USBD_LL_Start>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	78fa      	ldrb	r2, [r7, #3]
 8008616:	4611      	mov	r1, r2
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f001 f936 	bl	80098e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	2b02      	cmp	r3, #2
 8008698:	d01a      	beq.n	80086d0 <USBD_LL_SetupStage+0x72>
 800869a:	2b02      	cmp	r3, #2
 800869c:	d822      	bhi.n	80086e4 <USBD_LL_SetupStage+0x86>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <USBD_LL_SetupStage+0x4a>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d00a      	beq.n	80086bc <USBD_LL_SetupStage+0x5e>
 80086a6:	e01d      	b.n	80086e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fb63 	bl	8008d7c <USBD_StdDevReq>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ba:	e020      	b.n	80086fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fbcb 	bl	8008e60 <USBD_StdItfReq>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
      break;
 80086ce:	e016      	b.n	80086fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc2d 	bl	8008f38 <USBD_StdEPReq>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
      break;
 80086e2:	e00c      	b.n	80086fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fefa 	bl	800a4ec <USBD_LL_StallEP>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
      break;
 80086fc:	bf00      	nop
  }

  return ret;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	460b      	mov	r3, r1
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d16e      	bne.n	80087fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008726:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800872e:	2b03      	cmp	r3, #3
 8008730:	f040 8098 	bne.w	8008864 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	429a      	cmp	r2, r3
 800873e:	d913      	bls.n	8008768 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	1ad2      	subs	r2, r2, r3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	4293      	cmp	r3, r2
 8008758:	bf28      	it	cs
 800875a:	4613      	movcs	r3, r2
 800875c:	461a      	mov	r2, r3
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f001 f9be 	bl	8009ae2 <USBD_CtlContinueRx>
 8008766:	e07d      	b.n	8008864 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800876e:	f003 031f 	and.w	r3, r3, #31
 8008772:	2b02      	cmp	r3, #2
 8008774:	d014      	beq.n	80087a0 <USBD_LL_DataOutStage+0x98>
 8008776:	2b02      	cmp	r3, #2
 8008778:	d81d      	bhi.n	80087b6 <USBD_LL_DataOutStage+0xae>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <USBD_LL_DataOutStage+0x7c>
 800877e:	2b01      	cmp	r3, #1
 8008780:	d003      	beq.n	800878a <USBD_LL_DataOutStage+0x82>
 8008782:	e018      	b.n	80087b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	75bb      	strb	r3, [r7, #22]
            break;
 8008788:	e018      	b.n	80087bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008790:	b2db      	uxtb	r3, r3
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 fa64 	bl	8008c62 <USBD_CoreFindIF>
 800879a:	4603      	mov	r3, r0
 800879c:	75bb      	strb	r3, [r7, #22]
            break;
 800879e:	e00d      	b.n	80087bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fa66 	bl	8008c7c <USBD_CoreFindEP>
 80087b0:	4603      	mov	r3, r0
 80087b2:	75bb      	strb	r3, [r7, #22]
            break;
 80087b4:	e002      	b.n	80087bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	75bb      	strb	r3, [r7, #22]
            break;
 80087ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d119      	bne.n	80087f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d113      	bne.n	80087f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087ce:	7dba      	ldrb	r2, [r7, #22]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	32ae      	adds	r2, #174	@ 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087de:	7dba      	ldrb	r2, [r7, #22]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087e6:	7dba      	ldrb	r2, [r7, #22]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	32ae      	adds	r2, #174	@ 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f001 f984 	bl	8009b04 <USBD_CtlSendStatus>
 80087fc:	e032      	b.n	8008864 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008804:	b2db      	uxtb	r3, r3
 8008806:	4619      	mov	r1, r3
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fa37 	bl	8008c7c <USBD_CoreFindEP>
 800880e:	4603      	mov	r3, r0
 8008810:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008812:	7dbb      	ldrb	r3, [r7, #22]
 8008814:	2bff      	cmp	r3, #255	@ 0xff
 8008816:	d025      	beq.n	8008864 <USBD_LL_DataOutStage+0x15c>
 8008818:	7dbb      	ldrb	r3, [r7, #22]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d122      	bne.n	8008864 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d117      	bne.n	800885a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800882a:	7dba      	ldrb	r2, [r7, #22]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	32ae      	adds	r2, #174	@ 0xae
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00f      	beq.n	800885a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800883a:	7dba      	ldrb	r2, [r7, #22]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008842:	7dba      	ldrb	r2, [r7, #22]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	32ae      	adds	r2, #174	@ 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	7afa      	ldrb	r2, [r7, #11]
 8008850:	4611      	mov	r1, r2
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	4798      	blx	r3
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	e000      	b.n	8008866 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b086      	sub	sp, #24
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	460b      	mov	r3, r1
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d16f      	bne.n	8008962 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3314      	adds	r3, #20
 8008886:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800888e:	2b02      	cmp	r3, #2
 8008890:	d15a      	bne.n	8008948 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	429a      	cmp	r2, r3
 800889c:	d914      	bls.n	80088c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f001 f8e6 	bl	8009a86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ba:	2300      	movs	r3, #0
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f001 ff19 	bl	800a6f8 <USBD_LL_PrepareReceive>
 80088c6:	e03f      	b.n	8008948 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d11c      	bne.n	800890e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088dc:	429a      	cmp	r2, r3
 80088de:	d316      	bcc.n	800890e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20f      	bcs.n	800890e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088ee:	2200      	movs	r2, #0
 80088f0:	2100      	movs	r1, #0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f001 f8c7 	bl	8009a86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008900:	2300      	movs	r3, #0
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f001 fef6 	bl	800a6f8 <USBD_LL_PrepareReceive>
 800890c:	e01c      	b.n	8008948 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b03      	cmp	r3, #3
 8008918:	d10f      	bne.n	800893a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800893a:	2180      	movs	r1, #128	@ 0x80
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f001 fdd5 	bl	800a4ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f001 f8f1 	bl	8009b2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d03a      	beq.n	80089c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fe42 	bl	80085dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008960:	e032      	b.n	80089c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008968:	b2db      	uxtb	r3, r3
 800896a:	4619      	mov	r1, r3
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f985 	bl	8008c7c <USBD_CoreFindEP>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	2bff      	cmp	r3, #255	@ 0xff
 800897a:	d025      	beq.n	80089c8 <USBD_LL_DataInStage+0x15a>
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d122      	bne.n	80089c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b03      	cmp	r3, #3
 800898c:	d11c      	bne.n	80089c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800898e:	7dfa      	ldrb	r2, [r7, #23]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	32ae      	adds	r2, #174	@ 0xae
 8008994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d014      	beq.n	80089c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800899e:	7dfa      	ldrb	r2, [r7, #23]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089a6:	7dfa      	ldrb	r2, [r7, #23]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	32ae      	adds	r2, #174	@ 0xae
 80089ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	7afa      	ldrb	r2, [r7, #11]
 80089b4:	4611      	mov	r1, r2
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089be:	7dbb      	ldrb	r3, [r7, #22]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089c4:	7dbb      	ldrb	r3, [r7, #22]
 80089c6:	e000      	b.n	80089ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d014      	beq.n	8008a38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00e      	beq.n	8008a38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6852      	ldr	r2, [r2, #4]
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	4611      	mov	r1, r2
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a38:	2340      	movs	r3, #64	@ 0x40
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 fce0 	bl	800a404 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2240      	movs	r2, #64	@ 0x40
 8008a50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a54:	2340      	movs	r3, #64	@ 0x40
 8008a56:	2200      	movs	r2, #0
 8008a58:	2180      	movs	r1, #128	@ 0x80
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 fcd2 	bl	800a404 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2240      	movs	r2, #64	@ 0x40
 8008a6a:	621a      	str	r2, [r3, #32]

  return ret;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d006      	beq.n	8008ab8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2204      	movs	r2, #4
 8008abc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d106      	bne.n	8008af0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d110      	bne.n	8008b34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	32ae      	adds	r2, #174	@ 0xae
 8008b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e01c      	b.n	8008b9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d115      	bne.n	8008b98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	32ae      	adds	r2, #174	@ 0xae
 8008b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32ae      	adds	r2, #174	@ 0xae
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	4611      	mov	r1, r2
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	32ae      	adds	r2, #174	@ 0xae
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e01c      	b.n	8008bfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d115      	bne.n	8008bfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32ae      	adds	r2, #174	@ 0xae
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	32ae      	adds	r2, #174	@ 0xae
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00e      	beq.n	8008c58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6852      	ldr	r2, [r2, #4]
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	4611      	mov	r1, r2
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b086      	sub	sp, #24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	885b      	ldrh	r3, [r3, #2]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	7812      	ldrb	r2, [r2, #0]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d91f      	bls.n	8008cfc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cc2:	e013      	b.n	8008cec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008cc4:	f107 030a 	add.w	r3, r7, #10
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6978      	ldr	r0, [r7, #20]
 8008ccc:	f000 f81b 	bl	8008d06 <USBD_GetNextDesc>
 8008cd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d108      	bne.n	8008cec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	789b      	ldrb	r3, [r3, #2]
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d008      	beq.n	8008cfa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	897b      	ldrh	r3, [r7, #10]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d8e5      	bhi.n	8008cc4 <USBD_GetEpDesc+0x2e>
 8008cf8:	e000      	b.n	8008cfc <USBD_GetEpDesc+0x66>
          break;
 8008cfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008cfc:	693b      	ldr	r3, [r7, #16]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	7812      	ldrb	r2, [r2, #0]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d30:	68fb      	ldr	r3, [r7, #12]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b087      	sub	sp, #28
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	3301      	adds	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d5c:	8a3b      	ldrh	r3, [r7, #16]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	b21a      	sxth	r2, r3
 8008d62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	b21b      	sxth	r3, r3
 8008d6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d6c:	89fb      	ldrh	r3, [r7, #14]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d005      	beq.n	8008da2 <USBD_StdDevReq+0x26>
 8008d96:	2b40      	cmp	r3, #64	@ 0x40
 8008d98:	d857      	bhi.n	8008e4a <USBD_StdDevReq+0xce>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00f      	beq.n	8008dbe <USBD_StdDevReq+0x42>
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d153      	bne.n	8008e4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	32ae      	adds	r2, #174	@ 0xae
 8008dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]
      break;
 8008dbc:	e04a      	b.n	8008e54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	d83b      	bhi.n	8008e3e <USBD_StdDevReq+0xc2>
 8008dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dcc <USBD_StdDevReq+0x50>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008e21 	.word	0x08008e21
 8008dd0:	08008e35 	.word	0x08008e35
 8008dd4:	08008e3f 	.word	0x08008e3f
 8008dd8:	08008e2b 	.word	0x08008e2b
 8008ddc:	08008e3f 	.word	0x08008e3f
 8008de0:	08008dff 	.word	0x08008dff
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008e3f 	.word	0x08008e3f
 8008dec:	08008e17 	.word	0x08008e17
 8008df0:	08008e09 	.word	0x08008e09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa3c 	bl	8009274 <USBD_GetDescriptor>
          break;
 8008dfc:	e024      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fbcb 	bl	800959c <USBD_SetAddress>
          break;
 8008e06:	e01f      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fc0a 	bl	8009624 <USBD_SetConfig>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
          break;
 8008e14:	e018      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fcad 	bl	8009778 <USBD_GetConfig>
          break;
 8008e1e:	e013      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fcde 	bl	80097e4 <USBD_GetStatus>
          break;
 8008e28:	e00e      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fd0d 	bl	800984c <USBD_SetFeature>
          break;
 8008e32:	e009      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fd31 	bl	800989e <USBD_ClrFeature>
          break;
 8008e3c:	e004      	b.n	8008e48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fd88 	bl	8009956 <USBD_CtlError>
          break;
 8008e46:	bf00      	nop
      }
      break;
 8008e48:	e004      	b.n	8008e54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fd82 	bl	8009956 <USBD_CtlError>
      break;
 8008e52:	bf00      	nop
  }

  return ret;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop

08008e60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e76:	2b40      	cmp	r3, #64	@ 0x40
 8008e78:	d005      	beq.n	8008e86 <USBD_StdItfReq+0x26>
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	d852      	bhi.n	8008f24 <USBD_StdItfReq+0xc4>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USBD_StdItfReq+0x26>
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d14e      	bne.n	8008f24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d840      	bhi.n	8008f16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	889b      	ldrh	r3, [r3, #4]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d836      	bhi.n	8008f0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	889b      	ldrh	r3, [r3, #4]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff fedb 	bl	8008c62 <USBD_CoreFindIF>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2bff      	cmp	r3, #255	@ 0xff
 8008eb4:	d01d      	beq.n	8008ef2 <USBD_StdItfReq+0x92>
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d11a      	bne.n	8008ef2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ebc:	7bba      	ldrb	r2, [r7, #14]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32ae      	adds	r2, #174	@ 0xae
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00f      	beq.n	8008eec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ecc:	7bba      	ldrb	r2, [r7, #14]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ed4:	7bba      	ldrb	r2, [r7, #14]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	32ae      	adds	r2, #174	@ 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008eea:	e004      	b.n	8008ef6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ef0:	e001      	b.n	8008ef6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d110      	bne.n	8008f20 <USBD_StdItfReq+0xc0>
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fdfd 	bl	8009b04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f0a:	e009      	b.n	8008f20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fd21 	bl	8009956 <USBD_CtlError>
          break;
 8008f14:	e004      	b.n	8008f20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fd1c 	bl	8009956 <USBD_CtlError>
          break;
 8008f1e:	e000      	b.n	8008f22 <USBD_StdItfReq+0xc2>
          break;
 8008f20:	bf00      	nop
      }
      break;
 8008f22:	e004      	b.n	8008f2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fd15 	bl	8009956 <USBD_CtlError>
      break;
 8008f2c:	bf00      	nop
  }

  return ret;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	889b      	ldrh	r3, [r3, #4]
 8008f4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f54:	2b40      	cmp	r3, #64	@ 0x40
 8008f56:	d007      	beq.n	8008f68 <USBD_StdEPReq+0x30>
 8008f58:	2b40      	cmp	r3, #64	@ 0x40
 8008f5a:	f200 817f 	bhi.w	800925c <USBD_StdEPReq+0x324>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d02a      	beq.n	8008fb8 <USBD_StdEPReq+0x80>
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	f040 817a 	bne.w	800925c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff fe85 	bl	8008c7c <USBD_CoreFindEP>
 8008f72:	4603      	mov	r3, r0
 8008f74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f76:	7b7b      	ldrb	r3, [r7, #13]
 8008f78:	2bff      	cmp	r3, #255	@ 0xff
 8008f7a:	f000 8174 	beq.w	8009266 <USBD_StdEPReq+0x32e>
 8008f7e:	7b7b      	ldrb	r3, [r7, #13]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f040 8170 	bne.w	8009266 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f86:	7b7a      	ldrb	r2, [r7, #13]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f8e:	7b7a      	ldrb	r2, [r7, #13]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	32ae      	adds	r2, #174	@ 0xae
 8008f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8163 	beq.w	8009266 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fa0:	7b7a      	ldrb	r2, [r7, #13]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32ae      	adds	r2, #174	@ 0xae
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fb6:	e156      	b.n	8009266 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d008      	beq.n	8008fd2 <USBD_StdEPReq+0x9a>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	f300 8145 	bgt.w	8009250 <USBD_StdEPReq+0x318>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 809b 	beq.w	8009102 <USBD_StdEPReq+0x1ca>
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d03c      	beq.n	800904a <USBD_StdEPReq+0x112>
 8008fd0:	e13e      	b.n	8009250 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d002      	beq.n	8008fe4 <USBD_StdEPReq+0xac>
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d016      	beq.n	8009010 <USBD_StdEPReq+0xd8>
 8008fe2:	e02c      	b.n	800903e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00d      	beq.n	8009006 <USBD_StdEPReq+0xce>
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	2b80      	cmp	r3, #128	@ 0x80
 8008fee:	d00a      	beq.n	8009006 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fa79 	bl	800a4ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ffa:	2180      	movs	r1, #128	@ 0x80
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fa75 	bl	800a4ec <USBD_LL_StallEP>
 8009002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009004:	e020      	b.n	8009048 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fca4 	bl	8009956 <USBD_CtlError>
              break;
 800900e:	e01b      	b.n	8009048 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	885b      	ldrh	r3, [r3, #2]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10e      	bne.n	8009036 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <USBD_StdEPReq+0xfe>
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b80      	cmp	r3, #128	@ 0x80
 8009022:	d008      	beq.n	8009036 <USBD_StdEPReq+0xfe>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	88db      	ldrh	r3, [r3, #6]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fa5b 	bl	800a4ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fd64 	bl	8009b04 <USBD_CtlSendStatus>

              break;
 800903c:	e004      	b.n	8009048 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fc88 	bl	8009956 <USBD_CtlError>
              break;
 8009046:	bf00      	nop
          }
          break;
 8009048:	e107      	b.n	800925a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d002      	beq.n	800905c <USBD_StdEPReq+0x124>
 8009056:	2b03      	cmp	r3, #3
 8009058:	d016      	beq.n	8009088 <USBD_StdEPReq+0x150>
 800905a:	e04b      	b.n	80090f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00d      	beq.n	800907e <USBD_StdEPReq+0x146>
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	2b80      	cmp	r3, #128	@ 0x80
 8009066:	d00a      	beq.n	800907e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 fa3d 	bl	800a4ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009072:	2180      	movs	r1, #128	@ 0x80
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 fa39 	bl	800a4ec <USBD_LL_StallEP>
 800907a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800907c:	e040      	b.n	8009100 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fc68 	bl	8009956 <USBD_CtlError>
              break;
 8009086:	e03b      	b.n	8009100 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	885b      	ldrh	r3, [r3, #2]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d136      	bne.n	80090fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009096:	2b00      	cmp	r3, #0
 8009098:	d004      	beq.n	80090a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 fa5a 	bl	800a558 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fd2d 	bl	8009b04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff fde4 	bl	8008c7c <USBD_CoreFindEP>
 80090b4:	4603      	mov	r3, r0
 80090b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090b8:	7b7b      	ldrb	r3, [r7, #13]
 80090ba:	2bff      	cmp	r3, #255	@ 0xff
 80090bc:	d01f      	beq.n	80090fe <USBD_StdEPReq+0x1c6>
 80090be:	7b7b      	ldrb	r3, [r7, #13]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d11c      	bne.n	80090fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090c4:	7b7a      	ldrb	r2, [r7, #13]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090cc:	7b7a      	ldrb	r2, [r7, #13]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	32ae      	adds	r2, #174	@ 0xae
 80090d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090dc:	7b7a      	ldrb	r2, [r7, #13]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	32ae      	adds	r2, #174	@ 0xae
 80090e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090f2:	e004      	b.n	80090fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fc2d 	bl	8009956 <USBD_CtlError>
              break;
 80090fc:	e000      	b.n	8009100 <USBD_StdEPReq+0x1c8>
              break;
 80090fe:	bf00      	nop
          }
          break;
 8009100:	e0ab      	b.n	800925a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b02      	cmp	r3, #2
 800910c:	d002      	beq.n	8009114 <USBD_StdEPReq+0x1dc>
 800910e:	2b03      	cmp	r3, #3
 8009110:	d032      	beq.n	8009178 <USBD_StdEPReq+0x240>
 8009112:	e097      	b.n	8009244 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <USBD_StdEPReq+0x1f2>
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b80      	cmp	r3, #128	@ 0x80
 800911e:	d004      	beq.n	800912a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fc17 	bl	8009956 <USBD_CtlError>
                break;
 8009128:	e091      	b.n	800924e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da0b      	bge.n	800914a <USBD_StdEPReq+0x212>
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	3310      	adds	r3, #16
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	3304      	adds	r3, #4
 8009148:	e00b      	b.n	8009162 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	4413      	add	r3, r2
 8009160:	3304      	adds	r3, #4
 8009162:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2202      	movs	r2, #2
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fc6d 	bl	8009a50 <USBD_CtlSendData>
              break;
 8009176:	e06a      	b.n	800924e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800917c:	2b00      	cmp	r3, #0
 800917e:	da11      	bge.n	80091a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	f003 020f 	and.w	r2, r3, #15
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	3324      	adds	r3, #36	@ 0x24
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d117      	bne.n	80091ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fbda 	bl	8009956 <USBD_CtlError>
                  break;
 80091a2:	e054      	b.n	800924e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	f003 020f 	and.w	r2, r3, #15
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	4613      	mov	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d104      	bne.n	80091ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fbc7 	bl	8009956 <USBD_CtlError>
                  break;
 80091c8:	e041      	b.n	800924e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da0b      	bge.n	80091ea <USBD_StdEPReq+0x2b2>
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	3310      	adds	r3, #16
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	3304      	adds	r3, #4
 80091e8:	e00b      	b.n	8009202 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	4413      	add	r3, r2
 8009200:	3304      	adds	r3, #4
 8009202:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <USBD_StdEPReq+0x2d8>
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	2b80      	cmp	r3, #128	@ 0x80
 800920e:	d103      	bne.n	8009218 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	e00e      	b.n	8009236 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 f9d1 	bl	800a5c4 <USBD_LL_IsStallEP>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2201      	movs	r2, #1
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e002      	b.n	8009236 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2202      	movs	r2, #2
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc07 	bl	8009a50 <USBD_CtlSendData>
              break;
 8009242:	e004      	b.n	800924e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fb85 	bl	8009956 <USBD_CtlError>
              break;
 800924c:	bf00      	nop
          }
          break;
 800924e:	e004      	b.n	800925a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fb7f 	bl	8009956 <USBD_CtlError>
          break;
 8009258:	bf00      	nop
      }
      break;
 800925a:	e005      	b.n	8009268 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fb79 	bl	8009956 <USBD_CtlError>
      break;
 8009264:	e000      	b.n	8009268 <USBD_StdEPReq+0x330>
      break;
 8009266:	bf00      	nop
  }

  return ret;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	885b      	ldrh	r3, [r3, #2]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	2b0e      	cmp	r3, #14
 8009296:	f200 8152 	bhi.w	800953e <USBD_GetDescriptor+0x2ca>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBD_GetDescriptor+0x2c>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	08009311 	.word	0x08009311
 80092a4:	08009329 	.word	0x08009329
 80092a8:	08009369 	.word	0x08009369
 80092ac:	0800953f 	.word	0x0800953f
 80092b0:	0800953f 	.word	0x0800953f
 80092b4:	080094df 	.word	0x080094df
 80092b8:	0800950b 	.word	0x0800950b
 80092bc:	0800953f 	.word	0x0800953f
 80092c0:	0800953f 	.word	0x0800953f
 80092c4:	0800953f 	.word	0x0800953f
 80092c8:	0800953f 	.word	0x0800953f
 80092cc:	0800953f 	.word	0x0800953f
 80092d0:	0800953f 	.word	0x0800953f
 80092d4:	0800953f 	.word	0x0800953f
 80092d8:	080092dd 	.word	0x080092dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092fe:	e126      	b.n	800954e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fb27 	bl	8009956 <USBD_CtlError>
        err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
      break;
 800930e:	e11e      	b.n	800954e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
      break;
 8009326:	e112      	b.n	800954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7c1b      	ldrb	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10d      	bne.n	800934c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009338:	f107 0208 	add.w	r2, r7, #8
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	2202      	movs	r2, #2
 8009348:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800934a:	e100      	b.n	800954e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	f107 0208 	add.w	r2, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	2202      	movs	r2, #2
 8009364:	701a      	strb	r2, [r3, #0]
      break;
 8009366:	e0f2      	b.n	800954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	885b      	ldrh	r3, [r3, #2]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b05      	cmp	r3, #5
 8009370:	f200 80ac 	bhi.w	80094cc <USBD_GetDescriptor+0x258>
 8009374:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <USBD_GetDescriptor+0x108>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	08009395 	.word	0x08009395
 8009380:	080093c9 	.word	0x080093c9
 8009384:	080093fd 	.word	0x080093fd
 8009388:	08009431 	.word	0x08009431
 800938c:	08009465 	.word	0x08009465
 8009390:	08009499 	.word	0x08009499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b6:	e091      	b.n	80094dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 facb 	bl	8009956 <USBD_CtlError>
            err++;
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	3301      	adds	r3, #1
 80093c4:	72fb      	strb	r3, [r7, #11]
          break;
 80093c6:	e089      	b.n	80094dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e077      	b.n	80094dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fab1 	bl	8009956 <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e06f      	b.n	80094dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e05d      	b.n	80094dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa97 	bl	8009956 <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e055      	b.n	80094dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7c12      	ldrb	r2, [r2, #16]
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009452:	e043      	b.n	80094dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa7d 	bl	8009956 <USBD_CtlError>
            err++;
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	3301      	adds	r3, #1
 8009460:	72fb      	strb	r3, [r7, #11]
          break;
 8009462:	e03b      	b.n	80094dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7c12      	ldrb	r2, [r2, #16]
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009486:	e029      	b.n	80094dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa63 	bl	8009956 <USBD_CtlError>
            err++;
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	3301      	adds	r3, #1
 8009494:	72fb      	strb	r3, [r7, #11]
          break;
 8009496:	e021      	b.n	80094dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ba:	e00f      	b.n	80094dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa49 	bl	8009956 <USBD_CtlError>
            err++;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	3301      	adds	r3, #1
 80094c8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ca:	e007      	b.n	80094dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa41 	bl	8009956 <USBD_CtlError>
          err++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	3301      	adds	r3, #1
 80094d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80094da:	bf00      	nop
      }
      break;
 80094dc:	e037      	b.n	800954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	7c1b      	ldrb	r3, [r3, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d109      	bne.n	80094fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ee:	f107 0208 	add.w	r2, r7, #8
 80094f2:	4610      	mov	r0, r2
 80094f4:	4798      	blx	r3
 80094f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f8:	e029      	b.n	800954e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa2a 	bl	8009956 <USBD_CtlError>
        err++;
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	3301      	adds	r3, #1
 8009506:	72fb      	strb	r3, [r7, #11]
      break;
 8009508:	e021      	b.n	800954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	7c1b      	ldrb	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10d      	bne.n	800952e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951a:	f107 0208 	add.w	r2, r7, #8
 800951e:	4610      	mov	r0, r2
 8009520:	4798      	blx	r3
 8009522:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	2207      	movs	r2, #7
 800952a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800952c:	e00f      	b.n	800954e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fa10 	bl	8009956 <USBD_CtlError>
        err++;
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	3301      	adds	r3, #1
 800953a:	72fb      	strb	r3, [r7, #11]
      break;
 800953c:	e007      	b.n	800954e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa08 	bl	8009956 <USBD_CtlError>
      err++;
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	3301      	adds	r3, #1
 800954a:	72fb      	strb	r3, [r7, #11]
      break;
 800954c:	bf00      	nop
  }

  if (err != 0U)
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11e      	bne.n	8009592 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	88db      	ldrh	r3, [r3, #6]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d016      	beq.n	800958a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800955c:	893b      	ldrh	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88da      	ldrh	r2, [r3, #6]
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	4293      	cmp	r3, r2
 800956a:	bf28      	it	cs
 800956c:	4613      	movcs	r3, r2
 800956e:	b29b      	uxth	r3, r3
 8009570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009572:	893b      	ldrh	r3, [r7, #8]
 8009574:	461a      	mov	r2, r3
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa69 	bl	8009a50 <USBD_CtlSendData>
 800957e:	e009      	b.n	8009594 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f9e7 	bl	8009956 <USBD_CtlError>
 8009588:	e004      	b.n	8009594 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 faba 	bl	8009b04 <USBD_CtlSendStatus>
 8009590:	e000      	b.n	8009594 <USBD_GetDescriptor+0x320>
    return;
 8009592:	bf00      	nop
  }
}
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop

0800959c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	889b      	ldrh	r3, [r3, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d131      	bne.n	8009612 <USBD_SetAddress+0x76>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	88db      	ldrh	r3, [r3, #6]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d12d      	bne.n	8009612 <USBD_SetAddress+0x76>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	885b      	ldrh	r3, [r3, #2]
 80095ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80095bc:	d829      	bhi.n	8009612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d104      	bne.n	80095e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f9bc 	bl	8009956 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095de:	e01d      	b.n	800961c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7bfa      	ldrb	r2, [r7, #15]
 80095e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 f815 	bl	800a61c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa86 	bl	8009b04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	e009      	b.n	800961c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009610:	e004      	b.n	800961c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f99e 	bl	8009956 <USBD_CtlError>
  }
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	4b4e      	ldr	r3, [pc, #312]	@ (8009774 <USBD_SetConfig+0x150>)
 800963a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800963c:	4b4d      	ldr	r3, [pc, #308]	@ (8009774 <USBD_SetConfig+0x150>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d905      	bls.n	8009650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f985 	bl	8009956 <USBD_CtlError>
    return USBD_FAIL;
 800964c:	2303      	movs	r3, #3
 800964e:	e08c      	b.n	800976a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d002      	beq.n	8009662 <USBD_SetConfig+0x3e>
 800965c:	2b03      	cmp	r3, #3
 800965e:	d029      	beq.n	80096b4 <USBD_SetConfig+0x90>
 8009660:	e075      	b.n	800974e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009662:	4b44      	ldr	r3, [pc, #272]	@ (8009774 <USBD_SetConfig+0x150>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d020      	beq.n	80096ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800966a:	4b42      	ldr	r3, [pc, #264]	@ (8009774 <USBD_SetConfig+0x150>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009674:	4b3f      	ldr	r3, [pc, #252]	@ (8009774 <USBD_SetConfig+0x150>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7fe ffb9 	bl	80085f2 <USBD_SetClassConfig>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d008      	beq.n	800969c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f962 	bl	8009956 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800969a:	e065      	b.n	8009768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fa31 	bl	8009b04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2203      	movs	r2, #3
 80096a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80096aa:	e05d      	b.n	8009768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fa29 	bl	8009b04 <USBD_CtlSendStatus>
      break;
 80096b2:	e059      	b.n	8009768 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009774 <USBD_SetConfig+0x150>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d112      	bne.n	80096e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80096c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009774 <USBD_SetConfig+0x150>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096ce:	4b29      	ldr	r3, [pc, #164]	@ (8009774 <USBD_SetConfig+0x150>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7fe ffa8 	bl	800862a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa12 	bl	8009b04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096e0:	e042      	b.n	8009768 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096e2:	4b24      	ldr	r3, [pc, #144]	@ (8009774 <USBD_SetConfig+0x150>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d02a      	beq.n	8009746 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7fe ff96 	bl	800862a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009774 <USBD_SetConfig+0x150>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009708:	4b1a      	ldr	r3, [pc, #104]	@ (8009774 <USBD_SetConfig+0x150>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fe ff6f 	bl	80085f2 <USBD_SetClassConfig>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00f      	beq.n	800973e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f918 	bl	8009956 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7fe ff7b 	bl	800862a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800973c:	e014      	b.n	8009768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9e0 	bl	8009b04 <USBD_CtlSendStatus>
      break;
 8009744:	e010      	b.n	8009768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9dc 	bl	8009b04 <USBD_CtlSendStatus>
      break;
 800974c:	e00c      	b.n	8009768 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f900 	bl	8009956 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009756:	4b07      	ldr	r3, [pc, #28]	@ (8009774 <USBD_SetConfig+0x150>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fe ff64 	bl	800862a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
      break;
 8009766:	bf00      	nop
  }

  return ret;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200004fc 	.word	0x200004fc

08009778 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	88db      	ldrh	r3, [r3, #6]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d004      	beq.n	8009794 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f8e2 	bl	8009956 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009792:	e023      	b.n	80097dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b02      	cmp	r3, #2
 800979e:	dc02      	bgt.n	80097a6 <USBD_GetConfig+0x2e>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dc03      	bgt.n	80097ac <USBD_GetConfig+0x34>
 80097a4:	e015      	b.n	80097d2 <USBD_GetConfig+0x5a>
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d00b      	beq.n	80097c2 <USBD_GetConfig+0x4a>
 80097aa:	e012      	b.n	80097d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3308      	adds	r3, #8
 80097b6:	2201      	movs	r2, #1
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f948 	bl	8009a50 <USBD_CtlSendData>
        break;
 80097c0:	e00c      	b.n	80097dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	2201      	movs	r2, #1
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f940 	bl	8009a50 <USBD_CtlSendData>
        break;
 80097d0:	e004      	b.n	80097dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8be 	bl	8009956 <USBD_CtlError>
        break;
 80097da:	bf00      	nop
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d81e      	bhi.n	800983a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	88db      	ldrh	r3, [r3, #6]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d004      	beq.n	800980e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f8a5 	bl	8009956 <USBD_CtlError>
        break;
 800980c:	e01a      	b.n	8009844 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f043 0202 	orr.w	r2, r3, #2
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	330c      	adds	r3, #12
 800982e:	2202      	movs	r2, #2
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f90c 	bl	8009a50 <USBD_CtlSendData>
      break;
 8009838:	e004      	b.n	8009844 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f88a 	bl	8009956 <USBD_CtlError>
      break;
 8009842:	bf00      	nop
  }
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d107      	bne.n	800986e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f94c 	bl	8009b04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800986c:	e013      	b.n	8009896 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	885b      	ldrh	r3, [r3, #2]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d10b      	bne.n	800988e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	889b      	ldrh	r3, [r3, #4]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b29b      	uxth	r3, r3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f93c 	bl	8009b04 <USBD_CtlSendStatus>
}
 800988c:	e003      	b.n	8009896 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f860 	bl	8009956 <USBD_CtlError>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	3b01      	subs	r3, #1
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d80b      	bhi.n	80098ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	885b      	ldrh	r3, [r3, #2]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10c      	bne.n	80098d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f91c 	bl	8009b04 <USBD_CtlSendStatus>
      }
      break;
 80098cc:	e004      	b.n	80098d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f840 	bl	8009956 <USBD_CtlError>
      break;
 80098d6:	e000      	b.n	80098da <USBD_ClrFeature+0x3c>
      break;
 80098d8:	bf00      	nop
  }
}
 80098da:	bf00      	nop
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	781a      	ldrb	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f7ff fa16 	bl	8008d3e <SWAPBYTE>
 8009912:	4603      	mov	r3, r0
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3301      	adds	r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7ff fa09 	bl	8008d3e <SWAPBYTE>
 800992c:	4603      	mov	r3, r0
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3301      	adds	r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff f9fc 	bl	8008d3e <SWAPBYTE>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	80da      	strh	r2, [r3, #6]
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009960:	2180      	movs	r1, #128	@ 0x80
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fdc2 	bl	800a4ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009968:	2100      	movs	r1, #0
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fdbe 	bl	800a4ec <USBD_LL_StallEP>
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d042      	beq.n	8009a14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009992:	6938      	ldr	r0, [r7, #16]
 8009994:	f000 f842 	bl	8009a1c <USBD_GetLen>
 8009998:	4603      	mov	r3, r0
 800999a:	3301      	adds	r3, #1
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a2:	d808      	bhi.n	80099b6 <USBD_GetString+0x3e>
 80099a4:	6938      	ldr	r0, [r7, #16]
 80099a6:	f000 f839 	bl	8009a1c <USBD_GetLen>
 80099aa:	4603      	mov	r3, r0
 80099ac:	3301      	adds	r3, #1
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	e001      	b.n	80099ba <USBD_GetString+0x42>
 80099b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	4413      	add	r3, r2
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	7812      	ldrb	r2, [r2, #0]
 80099c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	3301      	adds	r3, #1
 80099ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	4413      	add	r3, r2
 80099d6:	2203      	movs	r2, #3
 80099d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	3301      	adds	r3, #1
 80099de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099e0:	e013      	b.n	8009a0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	4413      	add	r3, r2
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3301      	adds	r3, #1
 80099f2:	613b      	str	r3, [r7, #16]
    idx++;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	3301      	adds	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	4413      	add	r3, r2
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	3301      	adds	r3, #1
 8009a08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e7      	bne.n	80099e2 <USBD_GetString+0x6a>
 8009a12:	e000      	b.n	8009a16 <USBD_GetString+0x9e>
    return;
 8009a14:	bf00      	nop
  }
}
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a2c:	e005      	b.n	8009a3a <USBD_GetLen+0x1e>
  {
    len++;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	3301      	adds	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	3301      	adds	r3, #1
 8009a38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f5      	bne.n	8009a2e <USBD_GetLen+0x12>
  }

  return len;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	2100      	movs	r1, #0
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fe06 	bl	800a688 <USBD_LL_Transmit>

  return USBD_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	2100      	movs	r1, #0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fdf5 	bl	800a688 <USBD_LL_Transmit>

  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 fe10 	bl	800a6f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	2100      	movs	r1, #0
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fdff 	bl	800a6f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b14:	2300      	movs	r3, #0
 8009b16:	2200      	movs	r2, #0
 8009b18:	2100      	movs	r1, #0
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fdb4 	bl	800a688 <USBD_LL_Transmit>

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2205      	movs	r2, #5
 8009b36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fdd9 	bl	800a6f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b54:	2200      	movs	r2, #0
 8009b56:	4912      	ldr	r1, [pc, #72]	@ (8009ba0 <MX_USB_DEVICE_Init+0x50>)
 8009b58:	4812      	ldr	r0, [pc, #72]	@ (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b5a:	f7fe fccd 	bl	80084f8 <USBD_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b64:	f7f7 fa3e 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b68:	490f      	ldr	r1, [pc, #60]	@ (8009ba8 <MX_USB_DEVICE_Init+0x58>)
 8009b6a:	480e      	ldr	r0, [pc, #56]	@ (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b6c:	f7fe fcf4 	bl	8008558 <USBD_RegisterClass>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b76:	f7f7 fa35 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b7a:	490c      	ldr	r1, [pc, #48]	@ (8009bac <MX_USB_DEVICE_Init+0x5c>)
 8009b7c:	4809      	ldr	r0, [pc, #36]	@ (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b7e:	f7fe fbeb 	bl	8008358 <USBD_CDC_RegisterInterface>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b88:	f7f7 fa2c 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b8c:	4805      	ldr	r0, [pc, #20]	@ (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b8e:	f7fe fd19 	bl	80085c4 <USBD_Start>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b98:	f7f7 fa24 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200000b0 	.word	0x200000b0
 8009ba4:	20000500 	.word	0x20000500
 8009ba8:	20000018 	.word	0x20000018
 8009bac:	2000009c 	.word	0x2000009c

08009bb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4905      	ldr	r1, [pc, #20]	@ (8009bcc <CDC_Init_FS+0x1c>)
 8009bb8:	4805      	ldr	r0, [pc, #20]	@ (8009bd0 <CDC_Init_FS+0x20>)
 8009bba:	f7fe fbe7 	bl	800838c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bbe:	4905      	ldr	r1, [pc, #20]	@ (8009bd4 <CDC_Init_FS+0x24>)
 8009bc0:	4803      	ldr	r0, [pc, #12]	@ (8009bd0 <CDC_Init_FS+0x20>)
 8009bc2:	f7fe fc05 	bl	80083d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000fdc 	.word	0x20000fdc
 8009bd0:	20000500 	.word	0x20000500
 8009bd4:	200007dc 	.word	0x200007dc

08009bd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	2b23      	cmp	r3, #35	@ 0x23
 8009bfc:	d84a      	bhi.n	8009c94 <CDC_Control_FS+0xac>
 8009bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009c04 <CDC_Control_FS+0x1c>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c95 	.word	0x08009c95
 8009c08:	08009c95 	.word	0x08009c95
 8009c0c:	08009c95 	.word	0x08009c95
 8009c10:	08009c95 	.word	0x08009c95
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c95 	.word	0x08009c95
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009c95 	.word	0x08009c95
 8009c24:	08009c95 	.word	0x08009c95
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c95 	.word	0x08009c95
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009c95 	.word	0x08009c95
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009c95 	.word	0x08009c95
 8009c48:	08009c95 	.word	0x08009c95
 8009c4c:	08009c95 	.word	0x08009c95
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009c95 	.word	0x08009c95
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c95 	.word	0x08009c95
 8009c60:	08009c95 	.word	0x08009c95
 8009c64:	08009c95 	.word	0x08009c95
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	08009c95 	.word	0x08009c95
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c95 	.word	0x08009c95
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c95 	.word	0x08009c95
 8009c80:	08009c95 	.word	0x08009c95
 8009c84:	08009c95 	.word	0x08009c95
 8009c88:	08009c95 	.word	0x08009c95
 8009c8c:	08009c95 	.word	0x08009c95
 8009c90:	08009c95 	.word	0x08009c95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c94:	bf00      	nop
  }

  return (USBD_OK);
 8009c96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFSPtr + *Len);
 8009cae:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <CDC_Receive_FS+0x74>)
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4818      	ldr	r0, [pc, #96]	@ (8009d1c <CDC_Receive_FS+0x78>)
 8009cbc:	f7fe fb88 	bl	80083d0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cc0:	4816      	ldr	r0, [pc, #88]	@ (8009d1c <CDC_Receive_FS+0x78>)
 8009cc2:	f7fe fbe3 	bl	800848c <USBD_CDC_ReceivePacket>


	UserRxBufferFSPtr = UserRxBufferFSPtr + *Len;
 8009cc6:	4b14      	ldr	r3, [pc, #80]	@ (8009d18 <CDC_Receive_FS+0x74>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	4a11      	ldr	r2, [pc, #68]	@ (8009d18 <CDC_Receive_FS+0x74>)
 8009cd2:	6013      	str	r3, [r2, #0]
	if ((UserRxBufferFSPtr + 64) > (UserRxBufferFS + MAX_QUEUE_SIZE)){
 8009cd4:	4b10      	ldr	r3, [pc, #64]	@ (8009d18 <CDC_Receive_FS+0x74>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3340      	adds	r3, #64	@ 0x40
 8009cda:	4a11      	ldr	r2, [pc, #68]	@ (8009d20 <CDC_Receive_FS+0x7c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d902      	bls.n	8009ce6 <CDC_Receive_FS+0x42>
		UserRxBufferFSPtr = UserRxBufferFS;
 8009ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8009d18 <CDC_Receive_FS+0x74>)
 8009ce2:	4a10      	ldr	r2, [pc, #64]	@ (8009d24 <CDC_Receive_FS+0x80>)
 8009ce4:	601a      	str	r2, [r3, #0]
	}




  for (int i = 0; i<*Len; i++){
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e00a      	b.n	8009d02 <CDC_Receive_FS+0x5e>
	  enqueue(cdcRxQueue, &Buf[i]);
 8009cec:	4b0e      	ldr	r3, [pc, #56]	@ (8009d28 <CDC_Receive_FS+0x84>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f7f6 fe5d 	bl	80009b6 <enqueue>
  for (int i = 0; i<*Len; i++){
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	60fb      	str	r3, [r7, #12]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d8ef      	bhi.n	8009cec <CDC_Receive_FS+0x48>
  //char buff[1024];

  //sprintf(buff, "data: %s, len: %d\r\n", Buf, *Len);
  //CDC_Transmit_FS(buff, strlen(buff));

  return (USBD_OK);
 8009d0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000098 	.word	0x20000098
 8009d1c:	20000500 	.word	0x20000500
 8009d20:	20000bdc 	.word	0x20000bdc
 8009d24:	200007dc 	.word	0x200007dc
 8009d28:	2000049c 	.word	0x2000049c

08009d2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <CDC_Transmit_FS+0x48>)
 8009d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e00b      	b.n	8009d6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d52:	887b      	ldrh	r3, [r7, #2]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4806      	ldr	r0, [pc, #24]	@ (8009d74 <CDC_Transmit_FS+0x48>)
 8009d5a:	f7fe fb17 	bl	800838c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d5e:	4805      	ldr	r0, [pc, #20]	@ (8009d74 <CDC_Transmit_FS+0x48>)
 8009d60:	f7fe fb54 	bl	800840c <USBD_CDC_TransmitPacket>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20000500 	.word	0x20000500

08009d78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	371c      	adds	r7, #28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
	...

08009d9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2212      	movs	r2, #18
 8009dac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009dae:	4b03      	ldr	r3, [pc, #12]	@ (8009dbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	200000d0 	.word	0x200000d0

08009dc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dd2:	4b03      	ldr	r3, [pc, #12]	@ (8009de0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	200000f0 	.word	0x200000f0

08009de4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	6039      	str	r1, [r7, #0]
 8009dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4907      	ldr	r1, [pc, #28]	@ (8009e18 <USBD_FS_ProductStrDescriptor+0x34>)
 8009dfa:	4808      	ldr	r0, [pc, #32]	@ (8009e1c <USBD_FS_ProductStrDescriptor+0x38>)
 8009dfc:	f7ff fdbc 	bl	8009978 <USBD_GetString>
 8009e00:	e004      	b.n	8009e0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	4904      	ldr	r1, [pc, #16]	@ (8009e18 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e06:	4805      	ldr	r0, [pc, #20]	@ (8009e1c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e08:	f7ff fdb6 	bl	8009978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	@ (8009e18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	200017dc 	.word	0x200017dc
 8009e1c:	0800b21c 	.word	0x0800b21c

08009e20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	4904      	ldr	r1, [pc, #16]	@ (8009e40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e30:	4804      	ldr	r0, [pc, #16]	@ (8009e44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e32:	f7ff fda1 	bl	8009978 <USBD_GetString>
  return USBD_StrDesc;
 8009e36:	4b02      	ldr	r3, [pc, #8]	@ (8009e40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	200017dc 	.word	0x200017dc
 8009e44:	0800b230 	.word	0x0800b230

08009e48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	221a      	movs	r2, #26
 8009e58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e5a:	f000 f855 	bl	8009f08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e5e:	4b02      	ldr	r3, [pc, #8]	@ (8009e68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	200000f4 	.word	0x200000f4

08009e6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	6039      	str	r1, [r7, #0]
 8009e76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d105      	bne.n	8009e8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	4907      	ldr	r1, [pc, #28]	@ (8009ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e82:	4808      	ldr	r0, [pc, #32]	@ (8009ea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e84:	f7ff fd78 	bl	8009978 <USBD_GetString>
 8009e88:	e004      	b.n	8009e94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	4904      	ldr	r1, [pc, #16]	@ (8009ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e8e:	4805      	ldr	r0, [pc, #20]	@ (8009ea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e90:	f7ff fd72 	bl	8009978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e94:	4b02      	ldr	r3, [pc, #8]	@ (8009ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200017dc 	.word	0x200017dc
 8009ea4:	0800b238 	.word	0x0800b238

08009ea8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d105      	bne.n	8009ec6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	4907      	ldr	r1, [pc, #28]	@ (8009edc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ebe:	4808      	ldr	r0, [pc, #32]	@ (8009ee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ec0:	f7ff fd5a 	bl	8009978 <USBD_GetString>
 8009ec4:	e004      	b.n	8009ed0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	4904      	ldr	r1, [pc, #16]	@ (8009edc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eca:	4805      	ldr	r0, [pc, #20]	@ (8009ee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ecc:	f7ff fd54 	bl	8009978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ed0:	4b02      	ldr	r3, [pc, #8]	@ (8009edc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200017dc 	.word	0x200017dc
 8009ee0:	0800b244 	.word	0x0800b244

08009ee4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	220c      	movs	r2, #12
 8009ef4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009ef6:	4b03      	ldr	r3, [pc, #12]	@ (8009f04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	200000e4 	.word	0x200000e4

08009f08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f4c <Get_SerialNum+0x44>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f14:	4b0e      	ldr	r3, [pc, #56]	@ (8009f50 <Get_SerialNum+0x48>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f54 <Get_SerialNum+0x4c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4413      	add	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f2e:	2208      	movs	r2, #8
 8009f30:	4909      	ldr	r1, [pc, #36]	@ (8009f58 <Get_SerialNum+0x50>)
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 f814 	bl	8009f60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f38:	2204      	movs	r2, #4
 8009f3a:	4908      	ldr	r1, [pc, #32]	@ (8009f5c <Get_SerialNum+0x54>)
 8009f3c:	68b8      	ldr	r0, [r7, #8]
 8009f3e:	f000 f80f 	bl	8009f60 <IntToUnicode>
  }
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	1fff7590 	.word	0x1fff7590
 8009f50:	1fff7594 	.word	0x1fff7594
 8009f54:	1fff7598 	.word	0x1fff7598
 8009f58:	200000f6 	.word	0x200000f6
 8009f5c:	20000106 	.word	0x20000106

08009f60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f72:	2300      	movs	r3, #0
 8009f74:	75fb      	strb	r3, [r7, #23]
 8009f76:	e027      	b.n	8009fc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	0f1b      	lsrs	r3, r3, #28
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	d80b      	bhi.n	8009f98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	0f1b      	lsrs	r3, r3, #28
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	440b      	add	r3, r1
 8009f90:	3230      	adds	r2, #48	@ 0x30
 8009f92:	b2d2      	uxtb	r2, r2
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e00a      	b.n	8009fae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	0f1b      	lsrs	r3, r3, #28
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	440b      	add	r3, r1
 8009fa8:	3237      	adds	r2, #55	@ 0x37
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	3301      	adds	r3, #1
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	75fb      	strb	r3, [r7, #23]
 8009fc8:	7dfa      	ldrb	r2, [r7, #23]
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d3d3      	bcc.n	8009f78 <IntToUnicode+0x18>
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b0ac      	sub	sp, #176	@ 0xb0
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fe8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009fec:	2200      	movs	r2, #0
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	605a      	str	r2, [r3, #4]
 8009ff2:	609a      	str	r2, [r3, #8]
 8009ff4:	60da      	str	r2, [r3, #12]
 8009ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	2288      	movs	r2, #136	@ 0x88
 8009ffe:	2100      	movs	r1, #0
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fe0f 	bl	800ac24 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a00e:	d173      	bne.n	800a0f8 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a014:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a016:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a01a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800a01e:	2303      	movs	r3, #3
 800a020:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a022:	2301      	movs	r3, #1
 800a024:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800a026:	230c      	movs	r3, #12
 800a028:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a02a:	2307      	movs	r3, #7
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800a02e:	2304      	movs	r3, #4
 800a030:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a032:	2302      	movs	r3, #2
 800a034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a036:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a03a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a03c:	f107 0314 	add.w	r3, r7, #20
 800a040:	4618      	mov	r0, r3
 800a042:	f7fa fa57 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800a04c:	f7f6 ffca 	bl	8000fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a050:	4b2b      	ldr	r3, [pc, #172]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a054:	4a2a      	ldr	r2, [pc, #168]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a05c:	4b28      	ldr	r3, [pc, #160]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a068:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a06c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a070:	2302      	movs	r3, #2
 800a072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a076:	2300      	movs	r3, #0
 800a078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a07c:	2303      	movs	r3, #3
 800a07e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a082:	230a      	movs	r3, #10
 800a084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a088:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800a08c:	4619      	mov	r1, r3
 800a08e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a092:	f7f8 f833 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a096:	4b1a      	ldr	r3, [pc, #104]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a09a:	4a19      	ldr	r2, [pc, #100]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a09c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a0a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0a2:	4b17      	ldr	r3, [pc, #92]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0ae:	4b14      	ldr	r3, [pc, #80]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d114      	bne.n	800a0e4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0ba:	4b11      	ldr	r3, [pc, #68]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0be:	4a10      	ldr	r2, [pc, #64]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0ce:	60bb      	str	r3, [r7, #8]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a0d2:	f7f9 fbcf 	bl	8003874 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0da:	4a09      	ldr	r2, [pc, #36]	@ (800a100 <HAL_PCD_MspInit+0x120>)
 800a0dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0e2:	e001      	b.n	800a0e8 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a0e4:	f7f9 fbc6 	bl	8003874 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	2043      	movs	r0, #67	@ 0x43
 800a0ee:	f7f7 fc6d 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0f2:	2043      	movs	r0, #67	@ 0x43
 800a0f4:	f7f7 fc86 	bl	8001a04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	37b0      	adds	r7, #176	@ 0xb0
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	40021000 	.word	0x40021000

0800a104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7fe fa9f 	bl	800865e <USBD_LL_SetupStage>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	4613      	mov	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	78fb      	ldrb	r3, [r7, #3]
 800a150:	4619      	mov	r1, r3
 800a152:	f7fe fad9 	bl	8008708 <USBD_LL_DataOutStage>
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	4613      	mov	r3, r2
 800a176:	00db      	lsls	r3, r3, #3
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	440b      	add	r3, r1
 800a17e:	3320      	adds	r3, #32
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	4619      	mov	r1, r3
 800a186:	f7fe fb72 	bl	800886e <USBD_LL_DataInStage>
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fe fcac 	bl	8008afe <USBD_LL_SOF>
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	79db      	ldrb	r3, [r3, #7]
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d001      	beq.n	800a1c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a1c2:	f7f6 ff0f 	bl	8000fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe fc50 	bl	8008a76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe fbf8 	bl	80089d2 <USBD_LL_Reset>
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	6812      	ldr	r2, [r2, #0]
 800a202:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a206:	f043 0301 	orr.w	r3, r3, #1
 800a20a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fc3f 	bl	8008a96 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	7adb      	ldrb	r3, [r3, #11]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a220:	4b04      	ldr	r3, [pc, #16]	@ (800a234 <HAL_PCD_SuspendCallback+0x48>)
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	4a03      	ldr	r2, [pc, #12]	@ (800a234 <HAL_PCD_SuspendCallback+0x48>)
 800a226:	f043 0306 	orr.w	r3, r3, #6
 800a22a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	e000ed00 	.word	0xe000ed00

0800a238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a252:	f023 0301 	bic.w	r3, r3, #1
 800a256:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	7adb      	ldrb	r3, [r3, #11]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a260:	4b08      	ldr	r3, [pc, #32]	@ (800a284 <HAL_PCD_ResumeCallback+0x4c>)
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	4a07      	ldr	r2, [pc, #28]	@ (800a284 <HAL_PCD_ResumeCallback+0x4c>)
 800a266:	f023 0306 	bic.w	r3, r3, #6
 800a26a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a26c:	f000 faf6 	bl	800a85c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fc29 	bl	8008ace <USBD_LL_Resume>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	e000ed00 	.word	0xe000ed00

0800a288 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	4611      	mov	r1, r2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fc7f 	bl	8008ba2 <USBD_LL_IsoOUTIncomplete>
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2be:	78fa      	ldrb	r2, [r7, #3]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fc3b 	bl	8008b3e <USBD_LL_IsoINIncomplete>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fc91 	bl	8008c06 <USBD_LL_DevConnected>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fc8e 	bl	8008c1c <USBD_LL_DevDisconnected>
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d13c      	bne.n	800a392 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a318:	4a20      	ldr	r2, [pc, #128]	@ (800a39c <USBD_LL_Init+0x94>)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a1e      	ldr	r2, [pc, #120]	@ (800a39c <USBD_LL_Init+0x94>)
 800a324:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a328:	4b1c      	ldr	r3, [pc, #112]	@ (800a39c <USBD_LL_Init+0x94>)
 800a32a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a32e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a330:	4b1a      	ldr	r3, [pc, #104]	@ (800a39c <USBD_LL_Init+0x94>)
 800a332:	2206      	movs	r2, #6
 800a334:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a336:	4b19      	ldr	r3, [pc, #100]	@ (800a39c <USBD_LL_Init+0x94>)
 800a338:	2202      	movs	r2, #2
 800a33a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a33c:	4b17      	ldr	r3, [pc, #92]	@ (800a39c <USBD_LL_Init+0x94>)
 800a33e:	2202      	movs	r2, #2
 800a340:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a342:	4b16      	ldr	r3, [pc, #88]	@ (800a39c <USBD_LL_Init+0x94>)
 800a344:	2200      	movs	r2, #0
 800a346:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a348:	4b14      	ldr	r3, [pc, #80]	@ (800a39c <USBD_LL_Init+0x94>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a34e:	4b13      	ldr	r3, [pc, #76]	@ (800a39c <USBD_LL_Init+0x94>)
 800a350:	2200      	movs	r2, #0
 800a352:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a354:	4b11      	ldr	r3, [pc, #68]	@ (800a39c <USBD_LL_Init+0x94>)
 800a356:	2200      	movs	r2, #0
 800a358:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a35a:	4b10      	ldr	r3, [pc, #64]	@ (800a39c <USBD_LL_Init+0x94>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a360:	4b0e      	ldr	r3, [pc, #56]	@ (800a39c <USBD_LL_Init+0x94>)
 800a362:	2200      	movs	r2, #0
 800a364:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a366:	480d      	ldr	r0, [pc, #52]	@ (800a39c <USBD_LL_Init+0x94>)
 800a368:	f7f8 f88a 	bl	8002480 <HAL_PCD_Init>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a372:	f7f6 fe37 	bl	8000fe4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a376:	2180      	movs	r1, #128	@ 0x80
 800a378:	4808      	ldr	r0, [pc, #32]	@ (800a39c <USBD_LL_Init+0x94>)
 800a37a:	f7f9 f9e2 	bl	8003742 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a37e:	2240      	movs	r2, #64	@ 0x40
 800a380:	2100      	movs	r1, #0
 800a382:	4806      	ldr	r0, [pc, #24]	@ (800a39c <USBD_LL_Init+0x94>)
 800a384:	f7f9 f996 	bl	80036b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a388:	2280      	movs	r2, #128	@ 0x80
 800a38a:	2101      	movs	r1, #1
 800a38c:	4803      	ldr	r0, [pc, #12]	@ (800a39c <USBD_LL_Init+0x94>)
 800a38e:	f7f9 f991 	bl	80036b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	200019dc 	.word	0x200019dc

0800a3a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7f8 f971 	bl	800269e <HAL_PCD_Start>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d816      	bhi.n	800a3f4 <USBD_LL_Start+0x54>
 800a3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3cc <USBD_LL_Start+0x2c>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a3dd 	.word	0x0800a3dd
 800a3d0:	0800a3e3 	.word	0x0800a3e3
 800a3d4:	0800a3e9 	.word	0x0800a3e9
 800a3d8:	0800a3ef 	.word	0x0800a3ef
    case HAL_OK :
      usb_status = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e0:	e00b      	b.n	800a3fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e6:	e008      	b.n	800a3fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ec:	e005      	b.n	800a3fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f2:	e002      	b.n	800a3fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f8:	bf00      	nop
  }
  return usb_status;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	4608      	mov	r0, r1
 800a40e:	4611      	mov	r1, r2
 800a410:	461a      	mov	r2, r3
 800a412:	4603      	mov	r3, r0
 800a414:	70fb      	strb	r3, [r7, #3]
 800a416:	460b      	mov	r3, r1
 800a418:	70bb      	strb	r3, [r7, #2]
 800a41a:	4613      	mov	r3, r2
 800a41c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a42c:	78bb      	ldrb	r3, [r7, #2]
 800a42e:	883a      	ldrh	r2, [r7, #0]
 800a430:	78f9      	ldrb	r1, [r7, #3]
 800a432:	f7f8 fe1d 	bl	8003070 <HAL_PCD_EP_Open>
 800a436:	4603      	mov	r3, r0
 800a438:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d817      	bhi.n	800a470 <USBD_LL_OpenEP+0x6c>
 800a440:	a201      	add	r2, pc, #4	@ (adr r2, 800a448 <USBD_LL_OpenEP+0x44>)
 800a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a446:	bf00      	nop
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a45f 	.word	0x0800a45f
 800a450:	0800a465 	.word	0x0800a465
 800a454:	0800a46b 	.word	0x0800a46b
    case HAL_OK :
      usb_status = USBD_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
    break;
 800a45c:	e00b      	b.n	800a476 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a45e:	2303      	movs	r3, #3
 800a460:	73fb      	strb	r3, [r7, #15]
    break;
 800a462:	e008      	b.n	800a476 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
    break;
 800a468:	e005      	b.n	800a476 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	73fb      	strb	r3, [r7, #15]
    break;
 800a46e:	e002      	b.n	800a476 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a470:	2303      	movs	r3, #3
 800a472:	73fb      	strb	r3, [r7, #15]
    break;
 800a474:	bf00      	nop
  }
  return usb_status;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	4611      	mov	r1, r2
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7f8 fe50 	bl	8003144 <HAL_PCD_EP_Close>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d816      	bhi.n	800a4dc <USBD_LL_CloseEP+0x5c>
 800a4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b4 <USBD_LL_CloseEP+0x34>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a4cb 	.word	0x0800a4cb
 800a4bc:	0800a4d1 	.word	0x0800a4d1
 800a4c0:	0800a4d7 	.word	0x0800a4d7
    case HAL_OK :
      usb_status = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c8:	e00b      	b.n	800a4e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ce:	e008      	b.n	800a4e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d4:	e005      	b.n	800a4e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4da:	e002      	b.n	800a4e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e0:	bf00      	nop
  }
  return usb_status;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a506:	78fa      	ldrb	r2, [r7, #3]
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f8 fedf 	bl	80032ce <HAL_PCD_EP_SetStall>
 800a510:	4603      	mov	r3, r0
 800a512:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b03      	cmp	r3, #3
 800a518:	d816      	bhi.n	800a548 <USBD_LL_StallEP+0x5c>
 800a51a:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <USBD_LL_StallEP+0x34>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a531 	.word	0x0800a531
 800a524:	0800a537 	.word	0x0800a537
 800a528:	0800a53d 	.word	0x0800a53d
 800a52c:	0800a543 	.word	0x0800a543
    case HAL_OK :
      usb_status = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
    break;
 800a534:	e00b      	b.n	800a54e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a536:	2303      	movs	r3, #3
 800a538:	73fb      	strb	r3, [r7, #15]
    break;
 800a53a:	e008      	b.n	800a54e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a53c:	2301      	movs	r3, #1
 800a53e:	73fb      	strb	r3, [r7, #15]
    break;
 800a540:	e005      	b.n	800a54e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a542:	2303      	movs	r3, #3
 800a544:	73fb      	strb	r3, [r7, #15]
    break;
 800a546:	e002      	b.n	800a54e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	73fb      	strb	r3, [r7, #15]
    break;
 800a54c:	bf00      	nop
  }
  return usb_status;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a572:	78fa      	ldrb	r2, [r7, #3]
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f7f8 ff0b 	bl	8003392 <HAL_PCD_EP_ClrStall>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	2b03      	cmp	r3, #3
 800a584:	d816      	bhi.n	800a5b4 <USBD_LL_ClearStallEP+0x5c>
 800a586:	a201      	add	r2, pc, #4	@ (adr r2, 800a58c <USBD_LL_ClearStallEP+0x34>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a59d 	.word	0x0800a59d
 800a590:	0800a5a3 	.word	0x0800a5a3
 800a594:	0800a5a9 	.word	0x0800a5a9
 800a598:	0800a5af 	.word	0x0800a5af
    case HAL_OK :
      usb_status = USBD_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a0:	e00b      	b.n	800a5ba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a6:	e008      	b.n	800a5ba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ac:	e005      	b.n	800a5ba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b2:	e002      	b.n	800a5ba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b8:	bf00      	nop
  }
  return usb_status;
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da0b      	bge.n	800a5f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5e6:	68f9      	ldr	r1, [r7, #12]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	440b      	add	r3, r1
 800a5f2:	3316      	adds	r3, #22
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	e00b      	b.n	800a610 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	4613      	mov	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	440b      	add	r3, r1
 800a60a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a60e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 fcf4 	bl	8003028 <HAL_PCD_SetAddress>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d816      	bhi.n	800a678 <USBD_LL_SetUSBAddress+0x5c>
 800a64a:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <USBD_LL_SetUSBAddress+0x34>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a661 	.word	0x0800a661
 800a654:	0800a667 	.word	0x0800a667
 800a658:	0800a66d 	.word	0x0800a66d
 800a65c:	0800a673 	.word	0x0800a673
    case HAL_OK :
      usb_status = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
    break;
 800a664:	e00b      	b.n	800a67e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a666:	2303      	movs	r3, #3
 800a668:	73fb      	strb	r3, [r7, #15]
    break;
 800a66a:	e008      	b.n	800a67e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a66c:	2301      	movs	r3, #1
 800a66e:	73fb      	strb	r3, [r7, #15]
    break;
 800a670:	e005      	b.n	800a67e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a672:	2303      	movs	r3, #3
 800a674:	73fb      	strb	r3, [r7, #15]
    break;
 800a676:	e002      	b.n	800a67e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	73fb      	strb	r3, [r7, #15]
    break;
 800a67c:	bf00      	nop
  }
  return usb_status;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	460b      	mov	r3, r1
 800a696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a6a6:	7af9      	ldrb	r1, [r7, #11]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	f7f8 fdde 	bl	800326c <HAL_PCD_EP_Transmit>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a6b4:	7dbb      	ldrb	r3, [r7, #22]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d816      	bhi.n	800a6e8 <USBD_LL_Transmit+0x60>
 800a6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c0 <USBD_LL_Transmit+0x38>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a6d7 	.word	0x0800a6d7
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6e3 	.word	0x0800a6e3
    case HAL_OK :
      usb_status = USBD_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75fb      	strb	r3, [r7, #23]
    break;
 800a6d4:	e00b      	b.n	800a6ee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	75fb      	strb	r3, [r7, #23]
    break;
 800a6da:	e008      	b.n	800a6ee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]
    break;
 800a6e0:	e005      	b.n	800a6ee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	75fb      	strb	r3, [r7, #23]
    break;
 800a6e6:	e002      	b.n	800a6ee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	75fb      	strb	r3, [r7, #23]
    break;
 800a6ec:	bf00      	nop
  }
  return usb_status;
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	607a      	str	r2, [r7, #4]
 800a702:	603b      	str	r3, [r7, #0]
 800a704:	460b      	mov	r3, r1
 800a706:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a716:	7af9      	ldrb	r1, [r7, #11]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	f7f8 fd5c 	bl	80031d8 <HAL_PCD_EP_Receive>
 800a720:	4603      	mov	r3, r0
 800a722:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a724:	7dbb      	ldrb	r3, [r7, #22]
 800a726:	2b03      	cmp	r3, #3
 800a728:	d816      	bhi.n	800a758 <USBD_LL_PrepareReceive+0x60>
 800a72a:	a201      	add	r2, pc, #4	@ (adr r2, 800a730 <USBD_LL_PrepareReceive+0x38>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a747 	.word	0x0800a747
 800a738:	0800a74d 	.word	0x0800a74d
 800a73c:	0800a753 	.word	0x0800a753
    case HAL_OK :
      usb_status = USBD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	75fb      	strb	r3, [r7, #23]
    break;
 800a744:	e00b      	b.n	800a75e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a746:	2303      	movs	r3, #3
 800a748:	75fb      	strb	r3, [r7, #23]
    break;
 800a74a:	e008      	b.n	800a75e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a74c:	2301      	movs	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
    break;
 800a750:	e005      	b.n	800a75e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a752:	2303      	movs	r3, #3
 800a754:	75fb      	strb	r3, [r7, #23]
    break;
 800a756:	e002      	b.n	800a75e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	75fb      	strb	r3, [r7, #23]
    break;
 800a75c:	bf00      	nop
  }
  return usb_status;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f8 fd5c 	bl	800323c <HAL_PCD_EP_GetRxCount>
 800a784:	4603      	mov	r3, r0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <HAL_PCDEx_LPM_Callback+0x18>
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d01f      	beq.n	800a7e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a7a6:	e03b      	b.n	800a820 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7adb      	ldrb	r3, [r3, #11]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d007      	beq.n	800a7c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a7b0:	f000 f854 	bl	800a85c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a828 <HAL_PCDEx_LPM_Callback+0x98>)
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a828 <HAL_PCDEx_LPM_Callback+0x98>)
 800a7ba:	f023 0306 	bic.w	r3, r3, #6
 800a7be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7d2:	f023 0301 	bic.w	r3, r3, #1
 800a7d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe f975 	bl	8008ace <USBD_LL_Resume>
    break;
 800a7e4:	e01c      	b.n	800a820 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	6812      	ldr	r2, [r2, #0]
 800a7f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7f8:	f043 0301 	orr.w	r3, r3, #1
 800a7fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe f946 	bl	8008a96 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	7adb      	ldrb	r3, [r3, #11]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a812:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <HAL_PCDEx_LPM_Callback+0x98>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	4a04      	ldr	r2, [pc, #16]	@ (800a828 <HAL_PCDEx_LPM_Callback+0x98>)
 800a818:	f043 0306 	orr.w	r3, r3, #6
 800a81c:	6113      	str	r3, [r2, #16]
    break;
 800a81e:	bf00      	nop
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed00 	.word	0xe000ed00

0800a82c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a834:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <USBD_static_malloc+0x18>)
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	20001ec0 	.word	0x20001ec0

0800a848 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]

}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a860:	f7f6 f9ea 	bl	8000c38 <SystemClock_Config>
}
 800a864:	bf00      	nop
 800a866:	bd80      	pop	{r7, pc}

0800a868 <malloc>:
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <malloc+0xc>)
 800a86a:	4601      	mov	r1, r0
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	f000 b82d 	b.w	800a8cc <_malloc_r>
 800a872:	bf00      	nop
 800a874:	2000011c 	.word	0x2000011c

0800a878 <free>:
 800a878:	4b02      	ldr	r3, [pc, #8]	@ (800a884 <free+0xc>)
 800a87a:	4601      	mov	r1, r0
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	f000 ba17 	b.w	800acb0 <_free_r>
 800a882:	bf00      	nop
 800a884:	2000011c 	.word	0x2000011c

0800a888 <sbrk_aligned>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4e0f      	ldr	r6, [pc, #60]	@ (800a8c8 <sbrk_aligned+0x40>)
 800a88c:	460c      	mov	r4, r1
 800a88e:	6831      	ldr	r1, [r6, #0]
 800a890:	4605      	mov	r5, r0
 800a892:	b911      	cbnz	r1, 800a89a <sbrk_aligned+0x12>
 800a894:	f000 f9ce 	bl	800ac34 <_sbrk_r>
 800a898:	6030      	str	r0, [r6, #0]
 800a89a:	4621      	mov	r1, r4
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 f9c9 	bl	800ac34 <_sbrk_r>
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	d103      	bne.n	800a8ae <sbrk_aligned+0x26>
 800a8a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	1cc4      	adds	r4, r0, #3
 800a8b0:	f024 0403 	bic.w	r4, r4, #3
 800a8b4:	42a0      	cmp	r0, r4
 800a8b6:	d0f8      	beq.n	800a8aa <sbrk_aligned+0x22>
 800a8b8:	1a21      	subs	r1, r4, r0
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 f9ba 	bl	800ac34 <_sbrk_r>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d1f2      	bne.n	800a8aa <sbrk_aligned+0x22>
 800a8c4:	e7ef      	b.n	800a8a6 <sbrk_aligned+0x1e>
 800a8c6:	bf00      	nop
 800a8c8:	200020e0 	.word	0x200020e0

0800a8cc <_malloc_r>:
 800a8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d0:	1ccd      	adds	r5, r1, #3
 800a8d2:	f025 0503 	bic.w	r5, r5, #3
 800a8d6:	3508      	adds	r5, #8
 800a8d8:	2d0c      	cmp	r5, #12
 800a8da:	bf38      	it	cc
 800a8dc:	250c      	movcc	r5, #12
 800a8de:	2d00      	cmp	r5, #0
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	db01      	blt.n	800a8e8 <_malloc_r+0x1c>
 800a8e4:	42a9      	cmp	r1, r5
 800a8e6:	d904      	bls.n	800a8f2 <_malloc_r+0x26>
 800a8e8:	230c      	movs	r3, #12
 800a8ea:	6033      	str	r3, [r6, #0]
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9c8 <_malloc_r+0xfc>
 800a8f6:	f000 f869 	bl	800a9cc <__malloc_lock>
 800a8fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a8fe:	461c      	mov	r4, r3
 800a900:	bb44      	cbnz	r4, 800a954 <_malloc_r+0x88>
 800a902:	4629      	mov	r1, r5
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff ffbf 	bl	800a888 <sbrk_aligned>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	4604      	mov	r4, r0
 800a90e:	d158      	bne.n	800a9c2 <_malloc_r+0xf6>
 800a910:	f8d8 4000 	ldr.w	r4, [r8]
 800a914:	4627      	mov	r7, r4
 800a916:	2f00      	cmp	r7, #0
 800a918:	d143      	bne.n	800a9a2 <_malloc_r+0xd6>
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	d04b      	beq.n	800a9b6 <_malloc_r+0xea>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	4639      	mov	r1, r7
 800a922:	4630      	mov	r0, r6
 800a924:	eb04 0903 	add.w	r9, r4, r3
 800a928:	f000 f984 	bl	800ac34 <_sbrk_r>
 800a92c:	4581      	cmp	r9, r0
 800a92e:	d142      	bne.n	800a9b6 <_malloc_r+0xea>
 800a930:	6821      	ldr	r1, [r4, #0]
 800a932:	1a6d      	subs	r5, r5, r1
 800a934:	4629      	mov	r1, r5
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ffa6 	bl	800a888 <sbrk_aligned>
 800a93c:	3001      	adds	r0, #1
 800a93e:	d03a      	beq.n	800a9b6 <_malloc_r+0xea>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	442b      	add	r3, r5
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	f8d8 3000 	ldr.w	r3, [r8]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	bb62      	cbnz	r2, 800a9a8 <_malloc_r+0xdc>
 800a94e:	f8c8 7000 	str.w	r7, [r8]
 800a952:	e00f      	b.n	800a974 <_malloc_r+0xa8>
 800a954:	6822      	ldr	r2, [r4, #0]
 800a956:	1b52      	subs	r2, r2, r5
 800a958:	d420      	bmi.n	800a99c <_malloc_r+0xd0>
 800a95a:	2a0b      	cmp	r2, #11
 800a95c:	d917      	bls.n	800a98e <_malloc_r+0xc2>
 800a95e:	1961      	adds	r1, r4, r5
 800a960:	42a3      	cmp	r3, r4
 800a962:	6025      	str	r5, [r4, #0]
 800a964:	bf18      	it	ne
 800a966:	6059      	strne	r1, [r3, #4]
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	bf08      	it	eq
 800a96c:	f8c8 1000 	streq.w	r1, [r8]
 800a970:	5162      	str	r2, [r4, r5]
 800a972:	604b      	str	r3, [r1, #4]
 800a974:	4630      	mov	r0, r6
 800a976:	f000 f82f 	bl	800a9d8 <__malloc_unlock>
 800a97a:	f104 000b 	add.w	r0, r4, #11
 800a97e:	1d23      	adds	r3, r4, #4
 800a980:	f020 0007 	bic.w	r0, r0, #7
 800a984:	1ac2      	subs	r2, r0, r3
 800a986:	bf1c      	itt	ne
 800a988:	1a1b      	subne	r3, r3, r0
 800a98a:	50a3      	strne	r3, [r4, r2]
 800a98c:	e7af      	b.n	800a8ee <_malloc_r+0x22>
 800a98e:	6862      	ldr	r2, [r4, #4]
 800a990:	42a3      	cmp	r3, r4
 800a992:	bf0c      	ite	eq
 800a994:	f8c8 2000 	streq.w	r2, [r8]
 800a998:	605a      	strne	r2, [r3, #4]
 800a99a:	e7eb      	b.n	800a974 <_malloc_r+0xa8>
 800a99c:	4623      	mov	r3, r4
 800a99e:	6864      	ldr	r4, [r4, #4]
 800a9a0:	e7ae      	b.n	800a900 <_malloc_r+0x34>
 800a9a2:	463c      	mov	r4, r7
 800a9a4:	687f      	ldr	r7, [r7, #4]
 800a9a6:	e7b6      	b.n	800a916 <_malloc_r+0x4a>
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	d1fb      	bne.n	800a9a8 <_malloc_r+0xdc>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	6053      	str	r3, [r2, #4]
 800a9b4:	e7de      	b.n	800a974 <_malloc_r+0xa8>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	6033      	str	r3, [r6, #0]
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f80c 	bl	800a9d8 <__malloc_unlock>
 800a9c0:	e794      	b.n	800a8ec <_malloc_r+0x20>
 800a9c2:	6005      	str	r5, [r0, #0]
 800a9c4:	e7d6      	b.n	800a974 <_malloc_r+0xa8>
 800a9c6:	bf00      	nop
 800a9c8:	200020e4 	.word	0x200020e4

0800a9cc <__malloc_lock>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	@ (800a9d4 <__malloc_lock+0x8>)
 800a9ce:	f000 b96c 	b.w	800acaa <__retarget_lock_acquire_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	20002224 	.word	0x20002224

0800a9d8 <__malloc_unlock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	@ (800a9e0 <__malloc_unlock+0x8>)
 800a9da:	f000 b967 	b.w	800acac <__retarget_lock_release_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20002224 	.word	0x20002224

0800a9e4 <std>:
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9f2:	6083      	str	r3, [r0, #8]
 800a9f4:	8181      	strh	r1, [r0, #12]
 800a9f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9f8:	81c2      	strh	r2, [r0, #14]
 800a9fa:	6183      	str	r3, [r0, #24]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	2208      	movs	r2, #8
 800aa00:	305c      	adds	r0, #92	@ 0x5c
 800aa02:	f000 f90f 	bl	800ac24 <memset>
 800aa06:	4b0d      	ldr	r3, [pc, #52]	@ (800aa3c <std+0x58>)
 800aa08:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa0a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa40 <std+0x5c>)
 800aa0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa44 <std+0x60>)
 800aa10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa12:	4b0d      	ldr	r3, [pc, #52]	@ (800aa48 <std+0x64>)
 800aa14:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa16:	4b0d      	ldr	r3, [pc, #52]	@ (800aa4c <std+0x68>)
 800aa18:	6224      	str	r4, [r4, #32]
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	d006      	beq.n	800aa2c <std+0x48>
 800aa1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa22:	4294      	cmp	r4, r2
 800aa24:	d002      	beq.n	800aa2c <std+0x48>
 800aa26:	33d0      	adds	r3, #208	@ 0xd0
 800aa28:	429c      	cmp	r4, r3
 800aa2a:	d105      	bne.n	800aa38 <std+0x54>
 800aa2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa34:	f000 b938 	b.w	800aca8 <__retarget_lock_init_recursive>
 800aa38:	bd10      	pop	{r4, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0800ae9d 	.word	0x0800ae9d
 800aa40:	0800aebf 	.word	0x0800aebf
 800aa44:	0800aef7 	.word	0x0800aef7
 800aa48:	0800af1b 	.word	0x0800af1b
 800aa4c:	200020e8 	.word	0x200020e8

0800aa50 <stdio_exit_handler>:
 800aa50:	4a02      	ldr	r2, [pc, #8]	@ (800aa5c <stdio_exit_handler+0xc>)
 800aa52:	4903      	ldr	r1, [pc, #12]	@ (800aa60 <stdio_exit_handler+0x10>)
 800aa54:	4803      	ldr	r0, [pc, #12]	@ (800aa64 <stdio_exit_handler+0x14>)
 800aa56:	f000 b869 	b.w	800ab2c <_fwalk_sglue>
 800aa5a:	bf00      	nop
 800aa5c:	20000110 	.word	0x20000110
 800aa60:	0800ae4d 	.word	0x0800ae4d
 800aa64:	20000120 	.word	0x20000120

0800aa68 <cleanup_stdio>:
 800aa68:	6841      	ldr	r1, [r0, #4]
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa9c <cleanup_stdio+0x34>)
 800aa6c:	4299      	cmp	r1, r3
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	4604      	mov	r4, r0
 800aa72:	d001      	beq.n	800aa78 <cleanup_stdio+0x10>
 800aa74:	f000 f9ea 	bl	800ae4c <_fflush_r>
 800aa78:	68a1      	ldr	r1, [r4, #8]
 800aa7a:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <cleanup_stdio+0x38>)
 800aa7c:	4299      	cmp	r1, r3
 800aa7e:	d002      	beq.n	800aa86 <cleanup_stdio+0x1e>
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 f9e3 	bl	800ae4c <_fflush_r>
 800aa86:	68e1      	ldr	r1, [r4, #12]
 800aa88:	4b06      	ldr	r3, [pc, #24]	@ (800aaa4 <cleanup_stdio+0x3c>)
 800aa8a:	4299      	cmp	r1, r3
 800aa8c:	d004      	beq.n	800aa98 <cleanup_stdio+0x30>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa94:	f000 b9da 	b.w	800ae4c <_fflush_r>
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200020e8 	.word	0x200020e8
 800aaa0:	20002150 	.word	0x20002150
 800aaa4:	200021b8 	.word	0x200021b8

0800aaa8 <global_stdio_init.part.0>:
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	@ (800aad8 <global_stdio_init.part.0+0x30>)
 800aaac:	4c0b      	ldr	r4, [pc, #44]	@ (800aadc <global_stdio_init.part.0+0x34>)
 800aaae:	4a0c      	ldr	r2, [pc, #48]	@ (800aae0 <global_stdio_init.part.0+0x38>)
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	4620      	mov	r0, r4
 800aab4:	2200      	movs	r2, #0
 800aab6:	2104      	movs	r1, #4
 800aab8:	f7ff ff94 	bl	800a9e4 <std>
 800aabc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aac0:	2201      	movs	r2, #1
 800aac2:	2109      	movs	r1, #9
 800aac4:	f7ff ff8e 	bl	800a9e4 <std>
 800aac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aacc:	2202      	movs	r2, #2
 800aace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad2:	2112      	movs	r1, #18
 800aad4:	f7ff bf86 	b.w	800a9e4 <std>
 800aad8:	20002220 	.word	0x20002220
 800aadc:	200020e8 	.word	0x200020e8
 800aae0:	0800aa51 	.word	0x0800aa51

0800aae4 <__sfp_lock_acquire>:
 800aae4:	4801      	ldr	r0, [pc, #4]	@ (800aaec <__sfp_lock_acquire+0x8>)
 800aae6:	f000 b8e0 	b.w	800acaa <__retarget_lock_acquire_recursive>
 800aaea:	bf00      	nop
 800aaec:	20002225 	.word	0x20002225

0800aaf0 <__sfp_lock_release>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	@ (800aaf8 <__sfp_lock_release+0x8>)
 800aaf2:	f000 b8db 	b.w	800acac <__retarget_lock_release_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	20002225 	.word	0x20002225

0800aafc <__sinit>:
 800aafc:	b510      	push	{r4, lr}
 800aafe:	4604      	mov	r4, r0
 800ab00:	f7ff fff0 	bl	800aae4 <__sfp_lock_acquire>
 800ab04:	6a23      	ldr	r3, [r4, #32]
 800ab06:	b11b      	cbz	r3, 800ab10 <__sinit+0x14>
 800ab08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab0c:	f7ff bff0 	b.w	800aaf0 <__sfp_lock_release>
 800ab10:	4b04      	ldr	r3, [pc, #16]	@ (800ab24 <__sinit+0x28>)
 800ab12:	6223      	str	r3, [r4, #32]
 800ab14:	4b04      	ldr	r3, [pc, #16]	@ (800ab28 <__sinit+0x2c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1f5      	bne.n	800ab08 <__sinit+0xc>
 800ab1c:	f7ff ffc4 	bl	800aaa8 <global_stdio_init.part.0>
 800ab20:	e7f2      	b.n	800ab08 <__sinit+0xc>
 800ab22:	bf00      	nop
 800ab24:	0800aa69 	.word	0x0800aa69
 800ab28:	20002220 	.word	0x20002220

0800ab2c <_fwalk_sglue>:
 800ab2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab30:	4607      	mov	r7, r0
 800ab32:	4688      	mov	r8, r1
 800ab34:	4614      	mov	r4, r2
 800ab36:	2600      	movs	r6, #0
 800ab38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ab40:	d505      	bpl.n	800ab4e <_fwalk_sglue+0x22>
 800ab42:	6824      	ldr	r4, [r4, #0]
 800ab44:	2c00      	cmp	r4, #0
 800ab46:	d1f7      	bne.n	800ab38 <_fwalk_sglue+0xc>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d907      	bls.n	800ab64 <_fwalk_sglue+0x38>
 800ab54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	d003      	beq.n	800ab64 <_fwalk_sglue+0x38>
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4638      	mov	r0, r7
 800ab60:	47c0      	blx	r8
 800ab62:	4306      	orrs	r6, r0
 800ab64:	3568      	adds	r5, #104	@ 0x68
 800ab66:	e7e9      	b.n	800ab3c <_fwalk_sglue+0x10>

0800ab68 <_puts_r>:
 800ab68:	6a03      	ldr	r3, [r0, #32]
 800ab6a:	b570      	push	{r4, r5, r6, lr}
 800ab6c:	6884      	ldr	r4, [r0, #8]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	460e      	mov	r6, r1
 800ab72:	b90b      	cbnz	r3, 800ab78 <_puts_r+0x10>
 800ab74:	f7ff ffc2 	bl	800aafc <__sinit>
 800ab78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab7a:	07db      	lsls	r3, r3, #31
 800ab7c:	d405      	bmi.n	800ab8a <_puts_r+0x22>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	0598      	lsls	r0, r3, #22
 800ab82:	d402      	bmi.n	800ab8a <_puts_r+0x22>
 800ab84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab86:	f000 f890 	bl	800acaa <__retarget_lock_acquire_recursive>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	0719      	lsls	r1, r3, #28
 800ab8e:	d502      	bpl.n	800ab96 <_puts_r+0x2e>
 800ab90:	6923      	ldr	r3, [r4, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d135      	bne.n	800ac02 <_puts_r+0x9a>
 800ab96:	4621      	mov	r1, r4
 800ab98:	4628      	mov	r0, r5
 800ab9a:	f000 fa01 	bl	800afa0 <__swsetup_r>
 800ab9e:	b380      	cbz	r0, 800ac02 <_puts_r+0x9a>
 800aba0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800aba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aba6:	07da      	lsls	r2, r3, #31
 800aba8:	d405      	bmi.n	800abb6 <_puts_r+0x4e>
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	059b      	lsls	r3, r3, #22
 800abae:	d402      	bmi.n	800abb6 <_puts_r+0x4e>
 800abb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abb2:	f000 f87b 	bl	800acac <__retarget_lock_release_recursive>
 800abb6:	4628      	mov	r0, r5
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	2b00      	cmp	r3, #0
 800abbc:	da04      	bge.n	800abc8 <_puts_r+0x60>
 800abbe:	69a2      	ldr	r2, [r4, #24]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	dc17      	bgt.n	800abf4 <_puts_r+0x8c>
 800abc4:	290a      	cmp	r1, #10
 800abc6:	d015      	beq.n	800abf4 <_puts_r+0x8c>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	7019      	strb	r1, [r3, #0]
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abd6:	3b01      	subs	r3, #1
 800abd8:	60a3      	str	r3, [r4, #8]
 800abda:	2900      	cmp	r1, #0
 800abdc:	d1ed      	bne.n	800abba <_puts_r+0x52>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	da11      	bge.n	800ac06 <_puts_r+0x9e>
 800abe2:	4622      	mov	r2, r4
 800abe4:	210a      	movs	r1, #10
 800abe6:	4628      	mov	r0, r5
 800abe8:	f000 f99b 	bl	800af22 <__swbuf_r>
 800abec:	3001      	adds	r0, #1
 800abee:	d0d7      	beq.n	800aba0 <_puts_r+0x38>
 800abf0:	250a      	movs	r5, #10
 800abf2:	e7d7      	b.n	800aba4 <_puts_r+0x3c>
 800abf4:	4622      	mov	r2, r4
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f993 	bl	800af22 <__swbuf_r>
 800abfc:	3001      	adds	r0, #1
 800abfe:	d1e7      	bne.n	800abd0 <_puts_r+0x68>
 800ac00:	e7ce      	b.n	800aba0 <_puts_r+0x38>
 800ac02:	3e01      	subs	r6, #1
 800ac04:	e7e4      	b.n	800abd0 <_puts_r+0x68>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	701a      	strb	r2, [r3, #0]
 800ac10:	e7ee      	b.n	800abf0 <_puts_r+0x88>
	...

0800ac14 <puts>:
 800ac14:	4b02      	ldr	r3, [pc, #8]	@ (800ac20 <puts+0xc>)
 800ac16:	4601      	mov	r1, r0
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	f7ff bfa5 	b.w	800ab68 <_puts_r>
 800ac1e:	bf00      	nop
 800ac20:	2000011c 	.word	0x2000011c

0800ac24 <memset>:
 800ac24:	4402      	add	r2, r0
 800ac26:	4603      	mov	r3, r0
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d100      	bne.n	800ac2e <memset+0xa>
 800ac2c:	4770      	bx	lr
 800ac2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac32:	e7f9      	b.n	800ac28 <memset+0x4>

0800ac34 <_sbrk_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d06      	ldr	r5, [pc, #24]	@ (800ac50 <_sbrk_r+0x1c>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f6 fd3e 	bl	80016c0 <_sbrk>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_sbrk_r+0x1a>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_sbrk_r+0x1a>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	20002228 	.word	0x20002228

0800ac54 <__errno>:
 800ac54:	4b01      	ldr	r3, [pc, #4]	@ (800ac5c <__errno+0x8>)
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	2000011c 	.word	0x2000011c

0800ac60 <__libc_init_array>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	4d0d      	ldr	r5, [pc, #52]	@ (800ac98 <__libc_init_array+0x38>)
 800ac64:	4c0d      	ldr	r4, [pc, #52]	@ (800ac9c <__libc_init_array+0x3c>)
 800ac66:	1b64      	subs	r4, r4, r5
 800ac68:	10a4      	asrs	r4, r4, #2
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	42a6      	cmp	r6, r4
 800ac6e:	d109      	bne.n	800ac84 <__libc_init_array+0x24>
 800ac70:	4d0b      	ldr	r5, [pc, #44]	@ (800aca0 <__libc_init_array+0x40>)
 800ac72:	4c0c      	ldr	r4, [pc, #48]	@ (800aca4 <__libc_init_array+0x44>)
 800ac74:	f000 fab4 	bl	800b1e0 <_init>
 800ac78:	1b64      	subs	r4, r4, r5
 800ac7a:	10a4      	asrs	r4, r4, #2
 800ac7c:	2600      	movs	r6, #0
 800ac7e:	42a6      	cmp	r6, r4
 800ac80:	d105      	bne.n	800ac8e <__libc_init_array+0x2e>
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac88:	4798      	blx	r3
 800ac8a:	3601      	adds	r6, #1
 800ac8c:	e7ee      	b.n	800ac6c <__libc_init_array+0xc>
 800ac8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac92:	4798      	blx	r3
 800ac94:	3601      	adds	r6, #1
 800ac96:	e7f2      	b.n	800ac7e <__libc_init_array+0x1e>
 800ac98:	0800b2a4 	.word	0x0800b2a4
 800ac9c:	0800b2a4 	.word	0x0800b2a4
 800aca0:	0800b2a4 	.word	0x0800b2a4
 800aca4:	0800b2a8 	.word	0x0800b2a8

0800aca8 <__retarget_lock_init_recursive>:
 800aca8:	4770      	bx	lr

0800acaa <__retarget_lock_acquire_recursive>:
 800acaa:	4770      	bx	lr

0800acac <__retarget_lock_release_recursive>:
 800acac:	4770      	bx	lr
	...

0800acb0 <_free_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4605      	mov	r5, r0
 800acb4:	2900      	cmp	r1, #0
 800acb6:	d041      	beq.n	800ad3c <_free_r+0x8c>
 800acb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acbc:	1f0c      	subs	r4, r1, #4
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bfb8      	it	lt
 800acc2:	18e4      	addlt	r4, r4, r3
 800acc4:	f7ff fe82 	bl	800a9cc <__malloc_lock>
 800acc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad40 <_free_r+0x90>)
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	b933      	cbnz	r3, 800acdc <_free_r+0x2c>
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	6014      	str	r4, [r2, #0]
 800acd2:	4628      	mov	r0, r5
 800acd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acd8:	f7ff be7e 	b.w	800a9d8 <__malloc_unlock>
 800acdc:	42a3      	cmp	r3, r4
 800acde:	d908      	bls.n	800acf2 <_free_r+0x42>
 800ace0:	6820      	ldr	r0, [r4, #0]
 800ace2:	1821      	adds	r1, r4, r0
 800ace4:	428b      	cmp	r3, r1
 800ace6:	bf01      	itttt	eq
 800ace8:	6819      	ldreq	r1, [r3, #0]
 800acea:	685b      	ldreq	r3, [r3, #4]
 800acec:	1809      	addeq	r1, r1, r0
 800acee:	6021      	streq	r1, [r4, #0]
 800acf0:	e7ed      	b.n	800acce <_free_r+0x1e>
 800acf2:	461a      	mov	r2, r3
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	b10b      	cbz	r3, 800acfc <_free_r+0x4c>
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d9fa      	bls.n	800acf2 <_free_r+0x42>
 800acfc:	6811      	ldr	r1, [r2, #0]
 800acfe:	1850      	adds	r0, r2, r1
 800ad00:	42a0      	cmp	r0, r4
 800ad02:	d10b      	bne.n	800ad1c <_free_r+0x6c>
 800ad04:	6820      	ldr	r0, [r4, #0]
 800ad06:	4401      	add	r1, r0
 800ad08:	1850      	adds	r0, r2, r1
 800ad0a:	4283      	cmp	r3, r0
 800ad0c:	6011      	str	r1, [r2, #0]
 800ad0e:	d1e0      	bne.n	800acd2 <_free_r+0x22>
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	6053      	str	r3, [r2, #4]
 800ad16:	4408      	add	r0, r1
 800ad18:	6010      	str	r0, [r2, #0]
 800ad1a:	e7da      	b.n	800acd2 <_free_r+0x22>
 800ad1c:	d902      	bls.n	800ad24 <_free_r+0x74>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	e7d6      	b.n	800acd2 <_free_r+0x22>
 800ad24:	6820      	ldr	r0, [r4, #0]
 800ad26:	1821      	adds	r1, r4, r0
 800ad28:	428b      	cmp	r3, r1
 800ad2a:	bf04      	itt	eq
 800ad2c:	6819      	ldreq	r1, [r3, #0]
 800ad2e:	685b      	ldreq	r3, [r3, #4]
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	bf04      	itt	eq
 800ad34:	1809      	addeq	r1, r1, r0
 800ad36:	6021      	streq	r1, [r4, #0]
 800ad38:	6054      	str	r4, [r2, #4]
 800ad3a:	e7ca      	b.n	800acd2 <_free_r+0x22>
 800ad3c:	bd38      	pop	{r3, r4, r5, pc}
 800ad3e:	bf00      	nop
 800ad40:	200020e4 	.word	0x200020e4

0800ad44 <__sflush_r>:
 800ad44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	0716      	lsls	r6, r2, #28
 800ad4e:	4605      	mov	r5, r0
 800ad50:	460c      	mov	r4, r1
 800ad52:	d454      	bmi.n	800adfe <__sflush_r+0xba>
 800ad54:	684b      	ldr	r3, [r1, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dc02      	bgt.n	800ad60 <__sflush_r+0x1c>
 800ad5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dd48      	ble.n	800adf2 <__sflush_r+0xae>
 800ad60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	d045      	beq.n	800adf2 <__sflush_r+0xae>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad6c:	682f      	ldr	r7, [r5, #0]
 800ad6e:	6a21      	ldr	r1, [r4, #32]
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	d030      	beq.n	800add6 <__sflush_r+0x92>
 800ad74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	0759      	lsls	r1, r3, #29
 800ad7a:	d505      	bpl.n	800ad88 <__sflush_r+0x44>
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	1ad2      	subs	r2, r2, r3
 800ad80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad82:	b10b      	cbz	r3, 800ad88 <__sflush_r+0x44>
 800ad84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad86:	1ad2      	subs	r2, r2, r3
 800ad88:	2300      	movs	r3, #0
 800ad8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad8c:	6a21      	ldr	r1, [r4, #32]
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b0      	blx	r6
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	d106      	bne.n	800ada6 <__sflush_r+0x62>
 800ad98:	6829      	ldr	r1, [r5, #0]
 800ad9a:	291d      	cmp	r1, #29
 800ad9c:	d82b      	bhi.n	800adf6 <__sflush_r+0xb2>
 800ad9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ae48 <__sflush_r+0x104>)
 800ada0:	410a      	asrs	r2, r1
 800ada2:	07d6      	lsls	r6, r2, #31
 800ada4:	d427      	bmi.n	800adf6 <__sflush_r+0xb2>
 800ada6:	2200      	movs	r2, #0
 800ada8:	6062      	str	r2, [r4, #4]
 800adaa:	04d9      	lsls	r1, r3, #19
 800adac:	6922      	ldr	r2, [r4, #16]
 800adae:	6022      	str	r2, [r4, #0]
 800adb0:	d504      	bpl.n	800adbc <__sflush_r+0x78>
 800adb2:	1c42      	adds	r2, r0, #1
 800adb4:	d101      	bne.n	800adba <__sflush_r+0x76>
 800adb6:	682b      	ldr	r3, [r5, #0]
 800adb8:	b903      	cbnz	r3, 800adbc <__sflush_r+0x78>
 800adba:	6560      	str	r0, [r4, #84]	@ 0x54
 800adbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adbe:	602f      	str	r7, [r5, #0]
 800adc0:	b1b9      	cbz	r1, 800adf2 <__sflush_r+0xae>
 800adc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adc6:	4299      	cmp	r1, r3
 800adc8:	d002      	beq.n	800add0 <__sflush_r+0x8c>
 800adca:	4628      	mov	r0, r5
 800adcc:	f7ff ff70 	bl	800acb0 <_free_r>
 800add0:	2300      	movs	r3, #0
 800add2:	6363      	str	r3, [r4, #52]	@ 0x34
 800add4:	e00d      	b.n	800adf2 <__sflush_r+0xae>
 800add6:	2301      	movs	r3, #1
 800add8:	4628      	mov	r0, r5
 800adda:	47b0      	blx	r6
 800addc:	4602      	mov	r2, r0
 800adde:	1c50      	adds	r0, r2, #1
 800ade0:	d1c9      	bne.n	800ad76 <__sflush_r+0x32>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d0c6      	beq.n	800ad76 <__sflush_r+0x32>
 800ade8:	2b1d      	cmp	r3, #29
 800adea:	d001      	beq.n	800adf0 <__sflush_r+0xac>
 800adec:	2b16      	cmp	r3, #22
 800adee:	d11e      	bne.n	800ae2e <__sflush_r+0xea>
 800adf0:	602f      	str	r7, [r5, #0]
 800adf2:	2000      	movs	r0, #0
 800adf4:	e022      	b.n	800ae3c <__sflush_r+0xf8>
 800adf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adfa:	b21b      	sxth	r3, r3
 800adfc:	e01b      	b.n	800ae36 <__sflush_r+0xf2>
 800adfe:	690f      	ldr	r7, [r1, #16]
 800ae00:	2f00      	cmp	r7, #0
 800ae02:	d0f6      	beq.n	800adf2 <__sflush_r+0xae>
 800ae04:	0793      	lsls	r3, r2, #30
 800ae06:	680e      	ldr	r6, [r1, #0]
 800ae08:	bf08      	it	eq
 800ae0a:	694b      	ldreq	r3, [r1, #20]
 800ae0c:	600f      	str	r7, [r1, #0]
 800ae0e:	bf18      	it	ne
 800ae10:	2300      	movne	r3, #0
 800ae12:	eba6 0807 	sub.w	r8, r6, r7
 800ae16:	608b      	str	r3, [r1, #8]
 800ae18:	f1b8 0f00 	cmp.w	r8, #0
 800ae1c:	dde9      	ble.n	800adf2 <__sflush_r+0xae>
 800ae1e:	6a21      	ldr	r1, [r4, #32]
 800ae20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae22:	4643      	mov	r3, r8
 800ae24:	463a      	mov	r2, r7
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b0      	blx	r6
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	dc08      	bgt.n	800ae40 <__sflush_r+0xfc>
 800ae2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae40:	4407      	add	r7, r0
 800ae42:	eba8 0800 	sub.w	r8, r8, r0
 800ae46:	e7e7      	b.n	800ae18 <__sflush_r+0xd4>
 800ae48:	dfbffffe 	.word	0xdfbffffe

0800ae4c <_fflush_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	690b      	ldr	r3, [r1, #16]
 800ae50:	4605      	mov	r5, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b913      	cbnz	r3, 800ae5c <_fflush_r+0x10>
 800ae56:	2500      	movs	r5, #0
 800ae58:	4628      	mov	r0, r5
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	b118      	cbz	r0, 800ae66 <_fflush_r+0x1a>
 800ae5e:	6a03      	ldr	r3, [r0, #32]
 800ae60:	b90b      	cbnz	r3, 800ae66 <_fflush_r+0x1a>
 800ae62:	f7ff fe4b 	bl	800aafc <__sinit>
 800ae66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d0f3      	beq.n	800ae56 <_fflush_r+0xa>
 800ae6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae70:	07d0      	lsls	r0, r2, #31
 800ae72:	d404      	bmi.n	800ae7e <_fflush_r+0x32>
 800ae74:	0599      	lsls	r1, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_fflush_r+0x32>
 800ae78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae7a:	f7ff ff16 	bl	800acaa <__retarget_lock_acquire_recursive>
 800ae7e:	4628      	mov	r0, r5
 800ae80:	4621      	mov	r1, r4
 800ae82:	f7ff ff5f 	bl	800ad44 <__sflush_r>
 800ae86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae88:	07da      	lsls	r2, r3, #31
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	d4e4      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	059b      	lsls	r3, r3, #22
 800ae92:	d4e1      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae96:	f7ff ff09 	bl	800acac <__retarget_lock_release_recursive>
 800ae9a:	e7dd      	b.n	800ae58 <_fflush_r+0xc>

0800ae9c <__sread>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	460c      	mov	r4, r1
 800aea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea4:	f000 f978 	bl	800b198 <_read_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	bfab      	itete	ge
 800aeac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aeae:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb0:	181b      	addge	r3, r3, r0
 800aeb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aeb6:	bfac      	ite	ge
 800aeb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeba:	81a3      	strhlt	r3, [r4, #12]
 800aebc:	bd10      	pop	{r4, pc}

0800aebe <__swrite>:
 800aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec2:	461f      	mov	r7, r3
 800aec4:	898b      	ldrh	r3, [r1, #12]
 800aec6:	05db      	lsls	r3, r3, #23
 800aec8:	4605      	mov	r5, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	4616      	mov	r6, r2
 800aece:	d505      	bpl.n	800aedc <__swrite+0x1e>
 800aed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed4:	2302      	movs	r3, #2
 800aed6:	2200      	movs	r2, #0
 800aed8:	f000 f94c 	bl	800b174 <_lseek_r>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	4632      	mov	r2, r6
 800aeea:	463b      	mov	r3, r7
 800aeec:	4628      	mov	r0, r5
 800aeee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aef2:	f000 b963 	b.w	800b1bc <_write_r>

0800aef6 <__sseek>:
 800aef6:	b510      	push	{r4, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefe:	f000 f939 	bl	800b174 <_lseek_r>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	bf15      	itete	ne
 800af08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af12:	81a3      	strheq	r3, [r4, #12]
 800af14:	bf18      	it	ne
 800af16:	81a3      	strhne	r3, [r4, #12]
 800af18:	bd10      	pop	{r4, pc}

0800af1a <__sclose>:
 800af1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1e:	f000 b8f7 	b.w	800b110 <_close_r>

0800af22 <__swbuf_r>:
 800af22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af24:	460e      	mov	r6, r1
 800af26:	4614      	mov	r4, r2
 800af28:	4605      	mov	r5, r0
 800af2a:	b118      	cbz	r0, 800af34 <__swbuf_r+0x12>
 800af2c:	6a03      	ldr	r3, [r0, #32]
 800af2e:	b90b      	cbnz	r3, 800af34 <__swbuf_r+0x12>
 800af30:	f7ff fde4 	bl	800aafc <__sinit>
 800af34:	69a3      	ldr	r3, [r4, #24]
 800af36:	60a3      	str	r3, [r4, #8]
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	071a      	lsls	r2, r3, #28
 800af3c:	d501      	bpl.n	800af42 <__swbuf_r+0x20>
 800af3e:	6923      	ldr	r3, [r4, #16]
 800af40:	b943      	cbnz	r3, 800af54 <__swbuf_r+0x32>
 800af42:	4621      	mov	r1, r4
 800af44:	4628      	mov	r0, r5
 800af46:	f000 f82b 	bl	800afa0 <__swsetup_r>
 800af4a:	b118      	cbz	r0, 800af54 <__swbuf_r+0x32>
 800af4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800af50:	4638      	mov	r0, r7
 800af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	6922      	ldr	r2, [r4, #16]
 800af58:	1a98      	subs	r0, r3, r2
 800af5a:	6963      	ldr	r3, [r4, #20]
 800af5c:	b2f6      	uxtb	r6, r6
 800af5e:	4283      	cmp	r3, r0
 800af60:	4637      	mov	r7, r6
 800af62:	dc05      	bgt.n	800af70 <__swbuf_r+0x4e>
 800af64:	4621      	mov	r1, r4
 800af66:	4628      	mov	r0, r5
 800af68:	f7ff ff70 	bl	800ae4c <_fflush_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d1ed      	bne.n	800af4c <__swbuf_r+0x2a>
 800af70:	68a3      	ldr	r3, [r4, #8]
 800af72:	3b01      	subs	r3, #1
 800af74:	60a3      	str	r3, [r4, #8]
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	701e      	strb	r6, [r3, #0]
 800af7e:	6962      	ldr	r2, [r4, #20]
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	429a      	cmp	r2, r3
 800af84:	d004      	beq.n	800af90 <__swbuf_r+0x6e>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	07db      	lsls	r3, r3, #31
 800af8a:	d5e1      	bpl.n	800af50 <__swbuf_r+0x2e>
 800af8c:	2e0a      	cmp	r6, #10
 800af8e:	d1df      	bne.n	800af50 <__swbuf_r+0x2e>
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f7ff ff5a 	bl	800ae4c <_fflush_r>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d0d9      	beq.n	800af50 <__swbuf_r+0x2e>
 800af9c:	e7d6      	b.n	800af4c <__swbuf_r+0x2a>
	...

0800afa0 <__swsetup_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4b29      	ldr	r3, [pc, #164]	@ (800b048 <__swsetup_r+0xa8>)
 800afa4:	4605      	mov	r5, r0
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	460c      	mov	r4, r1
 800afaa:	b118      	cbz	r0, 800afb4 <__swsetup_r+0x14>
 800afac:	6a03      	ldr	r3, [r0, #32]
 800afae:	b90b      	cbnz	r3, 800afb4 <__swsetup_r+0x14>
 800afb0:	f7ff fda4 	bl	800aafc <__sinit>
 800afb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb8:	0719      	lsls	r1, r3, #28
 800afba:	d422      	bmi.n	800b002 <__swsetup_r+0x62>
 800afbc:	06da      	lsls	r2, r3, #27
 800afbe:	d407      	bmi.n	800afd0 <__swsetup_r+0x30>
 800afc0:	2209      	movs	r2, #9
 800afc2:	602a      	str	r2, [r5, #0]
 800afc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afce:	e033      	b.n	800b038 <__swsetup_r+0x98>
 800afd0:	0758      	lsls	r0, r3, #29
 800afd2:	d512      	bpl.n	800affa <__swsetup_r+0x5a>
 800afd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afd6:	b141      	cbz	r1, 800afea <__swsetup_r+0x4a>
 800afd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afdc:	4299      	cmp	r1, r3
 800afde:	d002      	beq.n	800afe6 <__swsetup_r+0x46>
 800afe0:	4628      	mov	r0, r5
 800afe2:	f7ff fe65 	bl	800acb0 <_free_r>
 800afe6:	2300      	movs	r3, #0
 800afe8:	6363      	str	r3, [r4, #52]	@ 0x34
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	2300      	movs	r3, #0
 800aff4:	6063      	str	r3, [r4, #4]
 800aff6:	6923      	ldr	r3, [r4, #16]
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	89a3      	ldrh	r3, [r4, #12]
 800affc:	f043 0308 	orr.w	r3, r3, #8
 800b000:	81a3      	strh	r3, [r4, #12]
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	b94b      	cbnz	r3, 800b01a <__swsetup_r+0x7a>
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b00c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b010:	d003      	beq.n	800b01a <__swsetup_r+0x7a>
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
 800b016:	f000 f83f 	bl	800b098 <__smakebuf_r>
 800b01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01e:	f013 0201 	ands.w	r2, r3, #1
 800b022:	d00a      	beq.n	800b03a <__swsetup_r+0x9a>
 800b024:	2200      	movs	r2, #0
 800b026:	60a2      	str	r2, [r4, #8]
 800b028:	6962      	ldr	r2, [r4, #20]
 800b02a:	4252      	negs	r2, r2
 800b02c:	61a2      	str	r2, [r4, #24]
 800b02e:	6922      	ldr	r2, [r4, #16]
 800b030:	b942      	cbnz	r2, 800b044 <__swsetup_r+0xa4>
 800b032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b036:	d1c5      	bne.n	800afc4 <__swsetup_r+0x24>
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	0799      	lsls	r1, r3, #30
 800b03c:	bf58      	it	pl
 800b03e:	6962      	ldrpl	r2, [r4, #20]
 800b040:	60a2      	str	r2, [r4, #8]
 800b042:	e7f4      	b.n	800b02e <__swsetup_r+0x8e>
 800b044:	2000      	movs	r0, #0
 800b046:	e7f7      	b.n	800b038 <__swsetup_r+0x98>
 800b048:	2000011c 	.word	0x2000011c

0800b04c <__swhatbuf_r>:
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	460c      	mov	r4, r1
 800b050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b054:	2900      	cmp	r1, #0
 800b056:	b096      	sub	sp, #88	@ 0x58
 800b058:	4615      	mov	r5, r2
 800b05a:	461e      	mov	r6, r3
 800b05c:	da0d      	bge.n	800b07a <__swhatbuf_r+0x2e>
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b064:	f04f 0100 	mov.w	r1, #0
 800b068:	bf14      	ite	ne
 800b06a:	2340      	movne	r3, #64	@ 0x40
 800b06c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b070:	2000      	movs	r0, #0
 800b072:	6031      	str	r1, [r6, #0]
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	b016      	add	sp, #88	@ 0x58
 800b078:	bd70      	pop	{r4, r5, r6, pc}
 800b07a:	466a      	mov	r2, sp
 800b07c:	f000 f858 	bl	800b130 <_fstat_r>
 800b080:	2800      	cmp	r0, #0
 800b082:	dbec      	blt.n	800b05e <__swhatbuf_r+0x12>
 800b084:	9901      	ldr	r1, [sp, #4]
 800b086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b08a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b08e:	4259      	negs	r1, r3
 800b090:	4159      	adcs	r1, r3
 800b092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b096:	e7eb      	b.n	800b070 <__swhatbuf_r+0x24>

0800b098 <__smakebuf_r>:
 800b098:	898b      	ldrh	r3, [r1, #12]
 800b09a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b09c:	079d      	lsls	r5, r3, #30
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	d507      	bpl.n	800b0b4 <__smakebuf_r+0x1c>
 800b0a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	6163      	str	r3, [r4, #20]
 800b0b0:	b003      	add	sp, #12
 800b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0b4:	ab01      	add	r3, sp, #4
 800b0b6:	466a      	mov	r2, sp
 800b0b8:	f7ff ffc8 	bl	800b04c <__swhatbuf_r>
 800b0bc:	9f00      	ldr	r7, [sp, #0]
 800b0be:	4605      	mov	r5, r0
 800b0c0:	4639      	mov	r1, r7
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7ff fc02 	bl	800a8cc <_malloc_r>
 800b0c8:	b948      	cbnz	r0, 800b0de <__smakebuf_r+0x46>
 800b0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ce:	059a      	lsls	r2, r3, #22
 800b0d0:	d4ee      	bmi.n	800b0b0 <__smakebuf_r+0x18>
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	f043 0302 	orr.w	r3, r3, #2
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	e7e2      	b.n	800b0a4 <__smakebuf_r+0xc>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	6020      	str	r0, [r4, #0]
 800b0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0ee:	b15b      	cbz	r3, 800b108 <__smakebuf_r+0x70>
 800b0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f000 f82d 	bl	800b154 <_isatty_r>
 800b0fa:	b128      	cbz	r0, 800b108 <__smakebuf_r+0x70>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	81a3      	strh	r3, [r4, #12]
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	431d      	orrs	r5, r3
 800b10c:	81a5      	strh	r5, [r4, #12]
 800b10e:	e7cf      	b.n	800b0b0 <__smakebuf_r+0x18>

0800b110 <_close_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d06      	ldr	r5, [pc, #24]	@ (800b12c <_close_r+0x1c>)
 800b114:	2300      	movs	r3, #0
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	f7f6 fa9b 	bl	8001656 <_close>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_close_r+0x1a>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_close_r+0x1a>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	20002228 	.word	0x20002228

0800b130 <_fstat_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	@ (800b150 <_fstat_r+0x20>)
 800b134:	2300      	movs	r3, #0
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	4611      	mov	r1, r2
 800b13c:	602b      	str	r3, [r5, #0]
 800b13e:	f7f6 fa96 	bl	800166e <_fstat>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d102      	bne.n	800b14c <_fstat_r+0x1c>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b103      	cbz	r3, 800b14c <_fstat_r+0x1c>
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	bd38      	pop	{r3, r4, r5, pc}
 800b14e:	bf00      	nop
 800b150:	20002228 	.word	0x20002228

0800b154 <_isatty_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d06      	ldr	r5, [pc, #24]	@ (800b170 <_isatty_r+0x1c>)
 800b158:	2300      	movs	r3, #0
 800b15a:	4604      	mov	r4, r0
 800b15c:	4608      	mov	r0, r1
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	f7f6 fa95 	bl	800168e <_isatty>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d102      	bne.n	800b16e <_isatty_r+0x1a>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	b103      	cbz	r3, 800b16e <_isatty_r+0x1a>
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	20002228 	.word	0x20002228

0800b174 <_lseek_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	@ (800b194 <_lseek_r+0x20>)
 800b178:	4604      	mov	r4, r0
 800b17a:	4608      	mov	r0, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	2200      	movs	r2, #0
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	f7f6 fa8e 	bl	80016a4 <_lseek>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_lseek_r+0x1e>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_lseek_r+0x1e>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	20002228 	.word	0x20002228

0800b198 <_read_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	@ (800b1b8 <_read_r+0x20>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7f6 fa1c 	bl	80015e4 <_read>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_read_r+0x1e>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_read_r+0x1e>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20002228 	.word	0x20002228

0800b1bc <_write_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	@ (800b1dc <_write_r+0x20>)
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f7f6 fa27 	bl	800161e <_write>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_write_r+0x1e>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_write_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20002228 	.word	0x20002228

0800b1e0 <_init>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	bf00      	nop
 800b1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	4770      	bx	lr

0800b1ec <_fini>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	bf00      	nop
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr
