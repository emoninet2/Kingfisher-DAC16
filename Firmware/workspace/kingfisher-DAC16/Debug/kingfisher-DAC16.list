
kingfisher-DAC16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007978  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b48  08007b48  00008b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b50  08007b50  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b54  08007b54  00008b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007b58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  2000000c  08007b64  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08007b64  00009600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001485a  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d58  00000000  00000000  0001d896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000205f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d45  00000000  00000000  00021738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a16  00000000  00000000  0002247d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001433b  00000000  00000000  00049e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eda58  00000000  00000000  0005e1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bc26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049cc  00000000  00000000  0014bc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00150638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ae8 	.word	0x08007ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007ae8 	.word	0x08007ae8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <DACx1416_nCS>:



extern SPI_HandleTypeDef hspi1;

void DACx1416_nCS(bool value){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	if(value){
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d006      	beq.n	80004d6 <DACx1416_nCS+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d0:	f001 f844 	bl	800155c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
	}
}
 80004d4:	e005      	b.n	80004e2 <DACx1416_nCS+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f001 f83d 	bl	800155c <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <SPI1_TransmitReceive>:


void SPI1_TransmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	4613      	mov	r3, r2
 80004f8:	80fb      	strh	r3, [r7, #6]
    // Pull CS low to start the transmission
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 80004fa:	2200      	movs	r2, #0
 80004fc:	2110      	movs	r1, #16
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000502:	f001 f82b 	bl	800155c <HAL_GPIO_WritePin>

    // Full-duplex transmission and reception (blocking mode)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	68f9      	ldr	r1, [r7, #12]
 8000512:	4809      	ldr	r0, [pc, #36]	@ (8000538 <SPI1_TransmitReceive+0x4c>)
 8000514:	f003 fe23 	bl	800415e <HAL_SPI_TransmitReceive>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SPI1_TransmitReceive+0x36>
    {
        // Communication error
        Error_Handler();
 800051e:	f000 fbd9 	bl	8000cd4 <Error_Handler>
    }

    // Pull CS high to end the transmission
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 8000522:	2201      	movs	r2, #1
 8000524:	2110      	movs	r1, #16
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f001 f817 	bl	800155c <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <DACx1416_SPI_transmit>:


void DACx1416_SPI_transmit(uint8_t *txBuffer,uint16_t size){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]



	// Full-duplex transmission and reception (blocking mode)
	if (HAL_SPI_Transmit(&hspi1, txBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 8000548:	887a      	ldrh	r2, [r7, #2]
 800054a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <DACx1416_SPI_transmit+0x2c>)
 8000552:	f003 fb56 	bl	8003c02 <HAL_SPI_Transmit>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <DACx1416_SPI_transmit+0x24>
	{
		// Communication error
		Error_Handler();
 800055c:	f000 fbba 	bl	8000cd4 <Error_Handler>
	}



}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000028 	.word	0x20000028

0800056c <DACx1416_SPI_receive>:


void DACx1416_SPI_receive(uint8_t *rxBuffer,uint16_t size){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]


	// Full-duplex transmission and reception (blocking mode)
	if (HAL_SPI_Receive(&hspi1, rxBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 8000578:	887a      	ldrh	r2, [r7, #2]
 800057a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <DACx1416_SPI_receive+0x2c>)
 8000582:	f003 fcb4 	bl	8003eee <HAL_SPI_Receive>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <DACx1416_SPI_receive+0x24>
	{
		// Communication error
		Error_Handler();
 800058c:	f000 fba2 	bl	8000cd4 <Error_Handler>
	}

}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028

0800059c <DACx1416_SPI_transmitReceive>:





void DACx1416_SPI_transmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size){
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4613      	mov	r3, r2
 80005a8:	80fb      	strh	r3, [r7, #6]


    // Full-duplex transmission and reception (blocking mode)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	68f9      	ldr	r1, [r7, #12]
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <DACx1416_SPI_transmitReceive+0x34>)
 80005b8:	f003 fdd1 	bl	800415e <HAL_SPI_TransmitReceive>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <DACx1416_SPI_transmitReceive+0x2a>
    {
        // Communication error
        Error_Handler();
 80005c2:	f000 fb87 	bl	8000cd4 <Error_Handler>
    }

}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028

080005d4 <DACx1416_write_register_old>:



void DACx1416_write_register_old(uint8_t address, uint16_t data){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f000 ffb6 	bl	800155c <HAL_GPIO_WritePin>
	uint8_t txBuffer[3] = {address & ~(1<<7) , (data >> 8) & 0xFF, data & 0xFF};
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	733b      	strb	r3, [r7, #12]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	b29b      	uxth	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	737b      	strb	r3, [r7, #13]
 8000604:	88bb      	ldrh	r3, [r7, #4]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3];
	SPI1_TransmitReceive(txBuffer, rxBuffer,  3);
 800060a:	f107 0108 	add.w	r1, r7, #8
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2203      	movs	r2, #3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff69 	bl	80004ec <SPI1_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f000 ff9b 	bl	800155c <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <DACx1416_read_register_old>:

uint16_t DACx1416_read_register_old(uint8_t address){
 800062e:	b580      	push	{r7, lr}
 8000630:	b084      	sub	sp, #16
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f000 ff8c 	bl	800155c <HAL_GPIO_WritePin>
	uint8_t txBuffer[3] = {address | (1<<7) , 0xFF, 0xFF};
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800064a:	b2db      	uxtb	r3, r3
 800064c:	733b      	strb	r3, [r7, #12]
 800064e:	23ff      	movs	r3, #255	@ 0xff
 8000650:	737b      	strb	r3, [r7, #13]
 8000652:	23ff      	movs	r3, #255	@ 0xff
 8000654:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3];
	DACx1416_SPI_transmit(txBuffer, 3);
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2103      	movs	r1, #3
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff6d 	bl	800053c <DACx1416_SPI_transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 8000662:	2201      	movs	r2, #1
 8000664:	2110      	movs	r1, #16
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f000 ff77 	bl	800155c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 800066e:	2200      	movs	r2, #0
 8000670:	2110      	movs	r1, #16
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f000 ff71 	bl	800155c <HAL_GPIO_WritePin>
	DACx1416_SPI_receive(rxBuffer, 3);
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2103      	movs	r1, #3
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff73 	bl	800056c <DACx1416_SPI_receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f000 ff65 	bl	800155c <HAL_GPIO_WritePin>

	return rxBuffer[1]<<8 | rxBuffer[2];
 8000692:	7a7b      	ldrb	r3, [r7, #9]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21a      	sxth	r2, r3
 8000698:	7abb      	ldrb	r3, [r7, #10]
 800069a:	b21b      	sxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b21b      	sxth	r3, r3
 80006a0:	b29b      	uxth	r3, r3

}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <DACx1416_read_register>:
	dac.nCS(0);
	dac.SPI_transmitReceive(txBuffer, rxBuffer, 3);
	dac.nCS(1);

}
uint16_t DACx1416_read_register(DACx1416_HandleTypeDef dac, DACx1416_register_t reg){
 80006aa:	b084      	sub	sp, #16
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	f107 0c10 	add.w	ip, r7, #16
 80006b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t txBuffer[3] = {reg | (1<<7) , 0xFF, 0xFF};
 80006ba:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80006be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	713b      	strb	r3, [r7, #4]
 80006c6:	23ff      	movs	r3, #255	@ 0xff
 80006c8:	717b      	strb	r3, [r7, #5]
 80006ca:	23ff      	movs	r3, #255	@ 0xff
 80006cc:	71bb      	strb	r3, [r7, #6]
	uint8_t rxBuffer[3];
	dac.nCS(0);
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	2000      	movs	r0, #0
 80006d2:	4798      	blx	r3
	dac.SPI_transmitReceive(txBuffer, rxBuffer, 3);
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4639      	mov	r1, r7
 80006d8:	1d38      	adds	r0, r7, #4
 80006da:	2203      	movs	r2, #3
 80006dc:	4798      	blx	r3
	dac.nCS(1);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	2001      	movs	r0, #1
 80006e2:	4798      	blx	r3
	dac.nCS(0);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	2000      	movs	r0, #0
 80006e8:	4798      	blx	r3
	dac.SPI_receive(rxBuffer, 3);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	463a      	mov	r2, r7
 80006ee:	2103      	movs	r1, #3
 80006f0:	4610      	mov	r0, r2
 80006f2:	4798      	blx	r3
	dac.nCS(1);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	2001      	movs	r0, #1
 80006f8:	4798      	blx	r3
	return rxBuffer[1]<<8 | rxBuffer[2];
 80006fa:	787b      	ldrb	r3, [r7, #1]
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b21a      	sxth	r2, r3
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	b21b      	sxth	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b21b      	sxth	r3, r3
 8000708:	b29b      	uxth	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <DACx1416_get_device_id>:


DACx1416_deviceID_t DACx1416_get_device_id(DACx1416_HandleTypeDef dac){
 8000718:	b084      	sub	sp, #16
 800071a:	b5b0      	push	{r4, r5, r7, lr}
 800071c:	b08c      	sub	sp, #48	@ 0x30
 800071e:	af08      	add	r7, sp, #32
 8000720:	f107 0420 	add.w	r4, r7, #32
 8000724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DACx1416_deviceID_t deviceID;
	uint16_t deviceIdVal = DACx1416_read_register(dac,DACx1416_REG_DEVICEID);
 8000728:	2301      	movs	r3, #1
 800072a:	9307      	str	r3, [sp, #28]
 800072c:	466d      	mov	r5, sp
 800072e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000736:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800073a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000744:	f7ff ffb1 	bl	80006aa <DACx1416_read_register>
 8000748:	4603      	mov	r3, r0
 800074a:	81fb      	strh	r3, [r7, #14]
	deviceID.deviceId = (deviceIdVal>>2) & 0x3FFF;
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	b29b      	uxth	r3, r3
 8000752:	80bb      	strh	r3, [r7, #4]
	deviceID.versionId = deviceIdVal & 0x0003;
 8000754:	89fb      	ldrh	r3, [r7, #14]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0303 	and.w	r3, r3, #3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	71bb      	strb	r3, [r7, #6]
	return deviceID;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	2300      	movs	r3, #0
 8000766:	893a      	ldrh	r2, [r7, #8]
 8000768:	f362 030f 	bfi	r3, r2, #0, #16
 800076c:	897a      	ldrh	r2, [r7, #10]
 800076e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800077c:	b004      	add	sp, #16
 800077e:	4770      	bx	lr

08000780 <DACx1416_get_spiConfig>:
	return status;
}



DACx1416_spiconfig_t DACx1416_get_spiConfig(DACx1416_HandleTypeDef dac){
 8000780:	b084      	sub	sp, #16
 8000782:	b5b0      	push	{r4, r5, r7, lr}
 8000784:	b08e      	sub	sp, #56	@ 0x38
 8000786:	af08      	add	r7, sp, #32
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800078e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	DACx1416_spiconfig_t spiConfig;
	uint16_t regVal = DACx1416_read_register(dac, DACx1416_REG_SPICONFIG);
 8000792:	2303      	movs	r3, #3
 8000794:	9307      	str	r3, [sp, #28]
 8000796:	466d      	mov	r5, sp
 8000798:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800079c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ae:	f7ff ff7c 	bl	80006aa <DACx1416_read_register>
 80007b2:	4603      	mov	r3, r0
 80007b4:	82fb      	strh	r3, [r7, #22]

	spiConfig.tempalm_en = (regVal >> 11) & 0x01;
 80007b6:	8afb      	ldrh	r3, [r7, #22]
 80007b8:	0adb      	lsrs	r3, r3, #11
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2301      	movne	r3, #1
 80007c6:	2300      	moveq	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	733b      	strb	r3, [r7, #12]
	spiConfig.dacbusy_en = (regVal >> 10) & 0x01;
 80007cc:	8afb      	ldrh	r3, [r7, #22]
 80007ce:	0a9b      	lsrs	r3, r3, #10
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	737b      	strb	r3, [r7, #13]
	spiConfig.crcalm_en = (regVal >> 9) & 0x01;
 80007e2:	8afb      	ldrh	r3, [r7, #22]
 80007e4:	0a5b      	lsrs	r3, r3, #9
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	spiConfig.softtoggle_en = (regVal >> 6) & 0x01;
 80007f8:	8afb      	ldrh	r3, [r7, #22]
 80007fa:	099b      	lsrs	r3, r3, #6
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	73fb      	strb	r3, [r7, #15]
	spiConfig.dev_pwdwn = (regVal >> 5) & 0x01;
 800080e:	8afb      	ldrh	r3, [r7, #22]
 8000810:	095b      	lsrs	r3, r3, #5
 8000812:	b29b      	uxth	r3, r3
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	743b      	strb	r3, [r7, #16]
	spiConfig.crc_en = (regVal >> 4) & 0x01;
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	091b      	lsrs	r3, r3, #4
 8000828:	b29b      	uxth	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	747b      	strb	r3, [r7, #17]
	spiConfig.str_en = (regVal >> 3) & 0x01;
 800083a:	8afb      	ldrh	r3, [r7, #22]
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b29b      	uxth	r3, r3
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	74bb      	strb	r3, [r7, #18]
	spiConfig.sdo_en = (regVal >> 2) & 0x01;
 8000850:	8afb      	ldrh	r3, [r7, #22]
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	b29b      	uxth	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf14      	ite	ne
 800085e:	2301      	movne	r3, #1
 8000860:	2300      	moveq	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	74fb      	strb	r3, [r7, #19]
	spiConfig.fsdo = (regVal >> 1) & 0x01;
 8000866:	8afb      	ldrh	r3, [r7, #22]
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	753b      	strb	r3, [r7, #20]


	return spiConfig;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	461a      	mov	r2, r3
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	7213      	strb	r3, [r2, #8]
}
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	b099      	sub	sp, #100	@ 0x64
 80008a0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f000 fb56 	bl	8000f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f8e7 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f000 f9a5 	bl	8000bf8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008ae:	f000 f935 	bl	8000b1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008b2:	f000 f971 	bl	8000b98 <MX_USART1_UART_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f000 fe4d 	bl	800155c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2120      	movs	r1, #32
 80008c6:	4867      	ldr	r0, [pc, #412]	@ (8000a64 <main+0x1c8>)
 80008c8:	f000 fe48 	bl	800155c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2140      	movs	r1, #64	@ 0x40
 80008d0:	4864      	ldr	r0, [pc, #400]	@ (8000a64 <main+0x1c8>)
 80008d2:	f000 fe43 	bl	800155c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	4862      	ldr	r0, [pc, #392]	@ (8000a64 <main+0x1c8>)
 80008dc:	f000 fe3e 	bl	800155c <HAL_GPIO_WritePin>
//
//  SPI1_TransmitReceive(txBuffer3, rxBuffer3, 3);


  volatile uint16_t x;
  x = DACx1416_read_register_old(3);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f7ff fea4 	bl	800062e <DACx1416_read_register_old>
 80008e6:	4603      	mov	r3, r0
 80008e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  x = DACx1416_read_register_old(5);
 80008ea:	2005      	movs	r0, #5
 80008ec:	f7ff fe9f 	bl	800062e <DACx1416_read_register_old>
 80008f0:	4603      	mov	r3, r0
 80008f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  x = DACx1416_read_register_old(4);
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff fe9a 	bl	800062e <DACx1416_read_register_old>
 80008fa:	4603      	mov	r3, r0
 80008fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  x = DACx1416_read_register_old(3);
 80008fe:	2003      	movs	r0, #3
 8000900:	f7ff fe95 	bl	800062e <DACx1416_read_register_old>
 8000904:	4603      	mov	r3, r0
 8000906:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  x = DACx1416_read_register_old(2);
 8000908:	2002      	movs	r0, #2
 800090a:	f7ff fe90 	bl	800062e <DACx1416_read_register_old>
 800090e:	4603      	mov	r3, r0
 8000910:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  x = DACx1416_read_register_old(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff fe8b 	bl	800062e <DACx1416_read_register_old>
 8000918:	4603      	mov	r3, r0
 800091a:	87fb      	strh	r3, [r7, #62]	@ 0x3e


  x = DACx1416_read_register_old(0x03);
 800091c:	2003      	movs	r0, #3
 800091e:	f7ff fe86 	bl	800062e <DACx1416_read_register_old>
 8000922:	4603      	mov	r3, r0
 8000924:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  DACx1416_write_register_old(0x03, 0b0000101010000100);
 8000926:	f640 2184 	movw	r1, #2692	@ 0xa84
 800092a:	2003      	movs	r0, #3
 800092c:	f7ff fe52 	bl	80005d4 <DACx1416_write_register_old>
  x = DACx1416_read_register_old(0x03);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff fe7c 	bl	800062e <DACx1416_read_register_old>
 8000936:	4603      	mov	r3, r0
 8000938:	87fb      	strh	r3, [r7, #62]	@ 0x3e


  DACx1416_write_register_old(0xD, 0b0000);
 800093a:	2100      	movs	r1, #0
 800093c:	200d      	movs	r0, #13
 800093e:	f7ff fe49 	bl	80005d4 <DACx1416_write_register_old>

  x = DACx1416_read_register_old(0x09);
 8000942:	2009      	movs	r0, #9
 8000944:	f7ff fe73 	bl	800062e <DACx1416_read_register_old>
 8000948:	4603      	mov	r3, r0
 800094a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  DACx1416_write_register_old(0x09, 0x0FFFE );
 800094c:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8000950:	2009      	movs	r0, #9
 8000952:	f7ff fe3f 	bl	80005d4 <DACx1416_write_register_old>
  x = DACx1416_read_register_old(0x09);
 8000956:	2009      	movs	r0, #9
 8000958:	f7ff fe69 	bl	800062e <DACx1416_read_register_old>
 800095c:	4603      	mov	r3, r0
 800095e:	87fb      	strh	r3, [r7, #62]	@ 0x3e



  DACx1416_write_register_old(0x10, 0);
 8000960:	2100      	movs	r1, #0
 8000962:	2010      	movs	r0, #16
 8000964:	f7ff fe36 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 1023); //0.078125
 8000968:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800096c:	2010      	movs	r0, #16
 800096e:	f7ff fe31 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 2047); //0.15625
 8000972:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000976:	2010      	movs	r0, #16
 8000978:	f7ff fe2c 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 4095); //0.3125
 800097c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000980:	2010      	movs	r0, #16
 8000982:	f7ff fe27 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 8191); //0.625
 8000986:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 800098a:	2010      	movs	r0, #16
 800098c:	f7ff fe22 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 16383); //1.25
 8000990:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8000994:	2010      	movs	r0, #16
 8000996:	f7ff fe1d 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 32767); //2.5
 800099a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800099e:	2010      	movs	r0, #16
 80009a0:	f7ff fe18 	bl	80005d4 <DACx1416_write_register_old>


  DACx1416_write_register_old(0x10, 36000); // 2.7466V
 80009a4:	f648 41a0 	movw	r1, #36000	@ 0x8ca0
 80009a8:	2010      	movs	r0, #16
 80009aa:	f7ff fe13 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 40000); // 3.0528V
 80009ae:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff fe0e 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 44000); // 3.3591V
 80009b8:	f64a 31e0 	movw	r1, #44000	@ 0xabe0
 80009bc:	2010      	movs	r0, #16
 80009be:	f7ff fe09 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 48000); // 3.6654V
 80009c2:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 80009c6:	2010      	movs	r0, #16
 80009c8:	f7ff fe04 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 50000); // 3.8185V
 80009cc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80009d0:	2010      	movs	r0, #16
 80009d2:	f7ff fdff 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 52000); // 3.9715V
 80009d6:	f64c 3120 	movw	r1, #52000	@ 0xcb20
 80009da:	2010      	movs	r0, #16
 80009dc:	f7ff fdfa 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 56000); // 4.2778V
 80009e0:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 80009e4:	2010      	movs	r0, #16
 80009e6:	f7ff fdf5 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 60000); // 4.5841V   --> 4.37V
 80009ea:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80009ee:	2010      	movs	r0, #16
 80009f0:	f7ff fdf0 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 64000); // 4.8904V --> 4.497V
 80009f4:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 80009f8:	2010      	movs	r0, #16
 80009fa:	f7ff fdeb 	bl	80005d4 <DACx1416_write_register_old>
  DACx1416_write_register_old(0x10, 65535); //5V --> 3.5V
 80009fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a02:	2010      	movs	r0, #16
 8000a04:	f7ff fde6 	bl	80005d4 <DACx1416_write_register_old>



  DACx1416_HandleTypeDef dac;
  dac.SPI_transmit = DACx1416_SPI_transmit;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <main+0x1cc>)
 8000a0a:	613b      	str	r3, [r7, #16]
  dac.SPI_receive = DACx1416_SPI_receive;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <main+0x1d0>)
 8000a0e:	617b      	str	r3, [r7, #20]
  dac.SPI_transmitReceive = DACx1416_SPI_transmitReceive;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <main+0x1d4>)
 8000a12:	61bb      	str	r3, [r7, #24]
  dac.nCS = DACx1416_nCS;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <main+0x1d8>)
 8000a16:	61fb      	str	r3, [r7, #28]


  volatile DACx1416_deviceID_t devID =  DACx1416_get_device_id(dac);
 8000a18:	466d      	mov	r5, sp
 8000a1a:	f107 0420 	add.w	r4, r7, #32
 8000a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a30:	f7ff fe72 	bl	8000718 <DACx1416_get_device_id>
 8000a34:	4603      	mov	r3, r0
 8000a36:	60fb      	str	r3, [r7, #12]
  volatile DACx1416_spiconfig_t spiConfig = DACx1416_get_spiConfig( dac);
 8000a38:	463e      	mov	r6, r7
 8000a3a:	466d      	mov	r5, sp
 8000a3c:	f107 041c 	add.w	r4, r7, #28
 8000a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a52:	4630      	mov	r0, r6
 8000a54:	f7ff fe94 	bl	8000780 <DACx1416_get_spiConfig>
  asm("nop");
 8000a58:	bf00      	nop
  asm("nop");
 8000a5a:	bf00      	nop
  asm("nop");
 8000a5c:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5e:	bf00      	nop
 8000a60:	e7fd      	b.n	8000a5e <main+0x1c2>
 8000a62:	bf00      	nop
 8000a64:	48000400 	.word	0x48000400
 8000a68:	0800053d 	.word	0x0800053d
 8000a6c:	0800056d 	.word	0x0800056d
 8000a70:	0800059d 	.word	0x0800059d
 8000a74:	080004b9 	.word	0x080004b9

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b096      	sub	sp, #88	@ 0x58
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2244      	movs	r2, #68	@ 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 f802 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a9e:	f001 fcfd 	bl	800249c <HAL_PWREx_ControlVoltageScaling>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa8:	f000 f914 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aac:	2310      	movs	r3, #16
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ab8:	2360      	movs	r3, #96	@ 0x60
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ac8:	2328      	movs	r3, #40	@ 0x28
 8000aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000acc:	2307      	movs	r3, #7
 8000ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fd33 	bl	8002548 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ae8:	f000 f8f4 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2303      	movs	r3, #3
 8000af2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	2104      	movs	r1, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 f8fb 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b10:	f000 f8e0 	bl	8000cd4 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3758      	adds	r7, #88	@ 0x58
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <MX_SPI1_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b36:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b52:	2208      	movs	r2, #8
 8000b54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_SPI1_Init+0x74>)
 8000b7c:	f002 ff9e 	bl	8003abc <HAL_SPI_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f8a5 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000028 	.word	0x20000028
 8000b94:	40013000 	.word	0x40013000

08000b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_USART1_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bdc:	f003 fe9a 	bl	8004914 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f875 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a2e      	ldr	r2, [pc, #184]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4a28      	ldr	r2, [pc, #160]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a22      	ldr	r2, [pc, #136]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <MX_GPIO_Init+0xd4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_nCS_GPIO_Port, DAC_nCS_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f000 fc7d 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC_TOGGLE0_Pin|DAC_TOGGLE1_Pin|DAC_TOGGLE2_Pin|DAC_nLDAC_Pin
 8000c62:	2200      	movs	r2, #0
 8000c64:	21e7      	movs	r1, #231	@ 0xe7
 8000c66:	481a      	ldr	r0, [pc, #104]	@ (8000cd0 <MX_GPIO_Init+0xd8>)
 8000c68:	f000 fc78 	bl	800155c <HAL_GPIO_WritePin>
                          |DAC_nRESET_Pin|DAC_nCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DAC_nCS_Pin */
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c86:	f000 fabf 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_TOGGLE0_Pin DAC_TOGGLE1_Pin DAC_TOGGLE2_Pin DAC_nLDAC_Pin
                           DAC_nRESET_Pin DAC_nCLR_Pin */
  GPIO_InitStruct.Pin = DAC_TOGGLE0_Pin|DAC_TOGGLE1_Pin|DAC_TOGGLE2_Pin|DAC_nLDAC_Pin
 8000c8a:	23e7      	movs	r3, #231	@ 0xe7
 8000c8c:	60fb      	str	r3, [r7, #12]
                          |DAC_nRESET_Pin|DAC_nCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_GPIO_Init+0xd8>)
 8000ca2:	f000 fab1 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_nALMOUT_Pin */
  GPIO_InitStruct.Pin = DAC_nALMOUT_Pin;
 8000ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_nALMOUT_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_GPIO_Init+0xd8>)
 8000cbe:	f000 faa3 	bl	8001208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3720      	adds	r7, #32
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <HAL_SPI_MspInit+0x7c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d128      	bne.n	8000d9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_SPI_MspInit+0x80>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	4a16      	ldr	r2, [pc, #88]	@ (8000da8 <HAL_SPI_MspInit+0x80>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_SPI_MspInit+0x80>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_SPI_MspInit+0x80>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <HAL_SPI_MspInit+0x80>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_SPI_MspInit+0x80>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23e0      	movs	r3, #224	@ 0xe0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d98:	f000 fa36 	bl	8001208 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	@ 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ac      	sub	sp, #176	@ 0xb0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2288      	movs	r2, #136	@ 0x88
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fe5f 	bl	8007a90 <memset>
  if(huart->Instance==USART1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <HAL_UART_MspInit+0xb4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13c      	bne.n	8000e56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000de0:	2300      	movs	r3, #0
 8000de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 f9ab 	bl	8003144 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df4:	f7ff ff6e 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfc:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e28:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e42:	2307      	movs	r3, #7
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e52:	f000 f9d9 	bl	8001208 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e56:	bf00      	nop
 8000e58:	37b0      	adds	r7, #176	@ 0xb0
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f89d 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <OTG_FS_IRQHandler+0x10>)
 8000ece:	f000 fb5d 	bl	800158c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000011c 	.word	0x2000011c

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f04:	f7ff ffea 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	@ (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f006 fdb7 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f32:	f7ff fcb3 	bl	800089c <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	08007b58 	.word	0x08007b58
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	20000600 	.word	0x20000600

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>

08000f52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f91f 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	200f      	movs	r0, #15
 8000f64:	f000 f80e 	bl	8000f84 <HAL_InitTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e001      	b.n	8000f78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f74:	f7ff feb4 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_InitTick+0x6c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d023      	beq.n	8000fe0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_InitTick+0x70>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_InitTick+0x6c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f91d 	bl	80011ee <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10f      	bne.n	8000fda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d809      	bhi.n	8000fd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fc8:	f000 f8f5 	bl	80011b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_InitTick+0x74>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e007      	b.n	8000fe4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e004      	b.n	8000fe4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e001      	b.n	8000fe4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20000114 	.word	0x20000114

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000114 	.word	0x20000114

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff47 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff5c 	bl	8001084 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffb0 	bl	800115c <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e17f      	b.n	8001518 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8171 	beq.w	8001512 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x40>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d118      	bne.n	80012e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d017      	beq.n	8001324 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d123      	bne.n	8001378 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	6939      	ldr	r1, [r7, #16]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80ac 	beq.w	8001512 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <HAL_GPIO_Init+0x330>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013be:	4a5e      	ldr	r2, [pc, #376]	@ (8001538 <HAL_GPIO_Init+0x330>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <HAL_GPIO_Init+0x330>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d2:	4a5a      	ldr	r2, [pc, #360]	@ (800153c <HAL_GPIO_Init+0x334>)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013fc:	d025      	beq.n	800144a <HAL_GPIO_Init+0x242>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	@ (8001540 <HAL_GPIO_Init+0x338>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <HAL_GPIO_Init+0x23e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4e      	ldr	r2, [pc, #312]	@ (8001544 <HAL_GPIO_Init+0x33c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x23a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4d      	ldr	r2, [pc, #308]	@ (8001548 <HAL_GPIO_Init+0x340>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x236>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4c      	ldr	r2, [pc, #304]	@ (800154c <HAL_GPIO_Init+0x344>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x232>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4b      	ldr	r2, [pc, #300]	@ (8001550 <HAL_GPIO_Init+0x348>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x22e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4a      	ldr	r2, [pc, #296]	@ (8001554 <HAL_GPIO_Init+0x34c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x22a>
 800142e:	2306      	movs	r3, #6
 8001430:	e00c      	b.n	800144c <HAL_GPIO_Init+0x244>
 8001432:	2307      	movs	r3, #7
 8001434:	e00a      	b.n	800144c <HAL_GPIO_Init+0x244>
 8001436:	2305      	movs	r3, #5
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x244>
 800143a:	2304      	movs	r3, #4
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x244>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x244>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x244>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x244>
 800144a:	2300      	movs	r3, #0
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800145c:	4937      	ldr	r1, [pc, #220]	@ (800153c <HAL_GPIO_Init+0x334>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146a:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <HAL_GPIO_Init+0x350>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148e:	4a32      	ldr	r2, [pc, #200]	@ (8001558 <HAL_GPIO_Init+0x350>)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001494:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <HAL_GPIO_Init+0x350>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b8:	4a27      	ldr	r2, [pc, #156]	@ (8001558 <HAL_GPIO_Init+0x350>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <HAL_GPIO_Init+0x350>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <HAL_GPIO_Init+0x350>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_GPIO_Init+0x350>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150c:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <HAL_GPIO_Init+0x350>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	f47f ae78 	bne.w	8001218 <HAL_GPIO_Init+0x10>
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000800 	.word	0x48000800
 8001548:	48000c00 	.word	0x48000c00
 800154c:	48001000 	.word	0x48001000
 8001550:	48001400 	.word	0x48001400
 8001554:	48001800 	.word	0x48001800
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001578:	e002      	b.n	8001580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08d      	sub	sp, #52	@ 0x34
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fd4d 	bl	8006042 <USB_GetMode>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 8481 	bne.w	8001eb2 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fcb1 	bl	8005f1c <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8477 	beq.w	8001eb0 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fc9e 	bl	8005f1c <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f002 0202 	and.w	r2, r2, #2
 80015f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fc8c 	bl	8005f1c <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b10      	cmp	r3, #16
 800160c:	d161      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0210 	bic.w	r2, r2, #16
 800161c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f003 020f 	and.w	r2, r3, #15
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	3304      	adds	r3, #4
 800163c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	0c5b      	lsrs	r3, r3, #17
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	2b02      	cmp	r3, #2
 8001648:	d124      	bne.n	8001694 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d035      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	6a38      	ldr	r0, [r7, #32]
 800166a:	f004 fb05 	bl	8005c78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167a:	441a      	add	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168c:	441a      	add	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	e016      	b.n	80016c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	0c5b      	lsrs	r3, r3, #17
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	2b06      	cmp	r3, #6
 800169e:	d110      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016a6:	2208      	movs	r2, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	6a38      	ldr	r0, [r7, #32]
 80016ac:	f004 fae4 	bl	8005c78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016bc:	441a      	add	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0210 	orr.w	r2, r2, #16
 80016d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fc20 	bl	8005f1c <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80016e6:	f040 80a7 	bne.w	8001838 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 fc25 	bl	8005f42 <USB_ReadDevAllOutEpInterrupt>
 80016f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80016fa:	e099      	b.n	8001830 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 808e 	beq.w	8001824 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fc49 	bl	8005faa <USB_ReadDevOutEPInterrupt>
 8001718:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001730:	461a      	mov	r2, r3
 8001732:	2301      	movs	r3, #1
 8001734:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001736:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fe1f 	bl	800237c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00c      	beq.n	8001762 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	4413      	add	r3, r2
 8001750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001754:	461a      	mov	r2, r3
 8001756:	2308      	movs	r3, #8
 8001758:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800175a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 fe5b 	bl	8002418 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001778:	461a      	mov	r2, r3
 800177a:	2310      	movs	r3, #16
 800177c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d030      	beq.n	80017ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001790:	2b80      	cmp	r3, #128	@ 0x80
 8001792:	d109      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	3304      	adds	r3, #4
 80017bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	78db      	ldrb	r3, [r3, #3]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f005 ff4c 	bl	8007670 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017e4:	461a      	mov	r2, r3
 80017e6:	2302      	movs	r3, #2
 80017e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001800:	461a      	mov	r2, r3
 8001802:	2320      	movs	r3, #32
 8001804:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800181c:	461a      	mov	r2, r3
 800181e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001822:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	3301      	adds	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f af62 	bne.w	80016fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fb6d 	bl	8005f1c <USB_ReadInterrupts>
 8001842:	4603      	mov	r3, r0
 8001844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001848:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800184c:	f040 80a4 	bne.w	8001998 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f004 fb8e 	bl	8005f76 <USB_ReadDevAllInEpInterrupt>
 800185a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001860:	e096      	b.n	8001990 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 808b 	beq.w	8001984 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fbb4 	bl	8005fe6 <USB_ReadDevInEPInterrupt>
 800187e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d020      	beq.n	80018cc <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	2201      	movs	r2, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69f9      	ldr	r1, [r7, #28]
 80018a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80018aa:	4013      	ands	r3, r2
 80018ac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018ba:	461a      	mov	r2, r3
 80018bc:	2301      	movs	r3, #1
 80018be:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f005 fe3e 	bl	8007548 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018e2:	461a      	mov	r2, r3
 80018e4:	2308      	movs	r3, #8
 80018e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018fe:	461a      	mov	r2, r3
 8001900:	2310      	movs	r3, #16
 8001902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800191a:	461a      	mov	r2, r3
 800191c:	2340      	movs	r3, #64	@ 0x40
 800191e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d023      	beq.n	8001972 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800192a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800192c:	6a38      	ldr	r0, [r7, #32]
 800192e:	f003 fdaf 	bl	8005490 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	3310      	adds	r3, #16
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	78db      	ldrb	r3, [r3, #3]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d108      	bne.n	8001960 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2200      	movs	r2, #0
 8001952:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f005 fe9a 	bl	8007694 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800196c:	461a      	mov	r2, r3
 800196e:	2302      	movs	r3, #2
 8001970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800197c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fc74 	bl	800226c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	3301      	adds	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800198a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f af65 	bne.w	8001862 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fabd 	bl	8005f1c <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019ac:	d122      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019d4:	2100      	movs	r1, #0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f006 f806 	bl	80079e8 <HAL_PCDEx_LPM_Callback>
 80019dc:	e002      	b.n	80019e4 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f005 fe1e 	bl	8007620 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80019f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fa8f 	bl	8005f1c <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a08:	d112      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d102      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f005 fdda 	bl	80075d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fa71 	bl	8005f1c <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a44:	d121      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001a54:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	f003 020f 	and.w	r2, r3, #15
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 ffb3 	bl	80079e8 <HAL_PCDEx_LPM_Callback>
 8001a82:	e002      	b.n	8001a8a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f005 fda5 	bl	80075d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fa44 	bl	8005f1c <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a9e:	f040 80b6 	bne.w	8001c0e <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2110      	movs	r1, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fce7 	bl	8005490 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ac6:	e046      	b.n	8001b56 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ada:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aec:	0151      	lsls	r1, r2, #5
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	440a      	add	r2, r1
 8001af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001af6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001afa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b20:	0151      	lsls	r1, r2, #5
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	440a      	add	r2, r1
 8001b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b40:	0151      	lsls	r1, r2, #5
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	440a      	add	r2, r1
 8001b46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b52:	3301      	adds	r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d3b2      	bcc.n	8001ac8 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b70:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7bdb      	ldrb	r3, [r3, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b8e:	f043 030b 	orr.w	r3, r3, #11
 8001b92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba4:	f043 030b 	orr.w	r3, r3, #11
 8001ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001baa:	e015      	b.n	8001bd8 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bbe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001bc2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd2:	f043 030b 	orr.w	r3, r3, #11
 8001bd6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001bea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f004 fa53 	bl	80060a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f982 	bl	8005f1c <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c22:	d123      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fa18 	bl	800605e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fc5e 	bl	80054f4 <USB_GetDevSpeed>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	f001 f9e6 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8001c48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4620      	mov	r0, r4
 8001c52:	f003 fb81 	bl	8005358 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f005 fc9e 	bl	8007598 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 f953 	bl	8005f1c <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d10a      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f005 fc7b 	bl	800757c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 0208 	and.w	r2, r2, #8
 8001c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 f93e 	bl	8005f1c <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b80      	cmp	r3, #128	@ 0x80
 8001ca8:	d123      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cba:	e014      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa95 	bl	800220a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	791b      	ldrb	r3, [r3, #4]
 8001cea:	461a      	mov	r2, r3
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d3e4      	bcc.n	8001cbc <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f910 	bl	8005f1c <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d06:	d13c      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d08:	2301      	movs	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0c:	e02b      	b.n	8001d66 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d115      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da12      	bge.n	8001d60 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3317      	adds	r3, #23
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa55 	bl	800220a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	791b      	ldrb	r3, [r3, #4]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d3cd      	bcc.n	8001d0e <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f004 f8c8 	bl	8005f1c <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d96:	d156      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9c:	e045      	b.n	8001e2a <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d12e      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da2b      	bge.n	8001e24 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001dd8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d121      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10a      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e20:	6053      	str	r3, [r2, #4]
            break;
 8001e22:	e008      	b.n	8001e36 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	3301      	adds	r3, #1
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	791b      	ldrb	r3, [r3, #4]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d3b3      	bcc.n	8001d9e <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 f866 	bl	8005f1c <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5a:	d10a      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f005 fc2b 	bl	80076b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f850 	bl	8005f1c <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d115      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f005 fc1b 	bl	80076d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	e000      	b.n	8001eb2 <HAL_PCD_IRQHandler+0x926>
      return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3734      	adds	r7, #52	@ 0x34
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_PCD_SetAddress+0x1a>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e012      	b.n	8001ef8 <HAL_PCD_SetAddress+0x40>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fff1 	bl	8005ed0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	70fb      	strb	r3, [r7, #3]
 8001f12:	460b      	mov	r3, r1
 8001f14:	803b      	strh	r3, [r7, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da0f      	bge.n	8001f46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3310      	adds	r3, #16
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	705a      	strb	r2, [r3, #1]
 8001f44:	e00f      	b.n	8001f66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f72:	883b      	ldrh	r3, [r7, #0]
 8001f74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	78ba      	ldrb	r2, [r7, #2]
 8001f80:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f94:	78bb      	ldrb	r3, [r7, #2]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d102      	bne.n	8001fa0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_PCD_EP_Open+0xae>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e00e      	b.n	8001fcc <HAL_PCD_EP_Open+0xcc>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fab8 	bl	8005532 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001fca:	7afb      	ldrb	r3, [r7, #11]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2200      	movs	r2, #0
 8002014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	b2da      	uxtb	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6979      	ldr	r1, [r7, #20]
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fb09 	bl	8005640 <USB_EPStartXfer>

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3310      	adds	r3, #16
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2201      	movs	r2, #1
 8002076:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6979      	ldr	r1, [r7, #20]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fad8 	bl	8005640 <USB_EPStartXfer>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	7912      	ldrb	r2, [r2, #4]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e04e      	b.n	8002156 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0f      	bge.n	80020e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3310      	adds	r3, #16
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	705a      	strb	r2, [r3, #1]
 80020de:	e00d      	b.n	80020fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	3304      	adds	r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_PCD_EP_SetStall+0x82>
 8002118:	2302      	movs	r3, #2
 800211a:	e01c      	b.n	8002156 <HAL_PCD_EP_SetStall+0xbc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68f9      	ldr	r1, [r7, #12]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fdfc 	bl	8005d28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f003 ffac 	bl	80060a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	7912      	ldrb	r2, [r2, #4]
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e042      	b.n	8002202 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800217c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002180:	2b00      	cmp	r3, #0
 8002182:	da0f      	bge.n	80021a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	3310      	adds	r3, #16
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	705a      	strb	r2, [r3, #1]
 80021a2:	e00f      	b.n	80021c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_EP_ClrStall+0x86>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e00e      	b.n	8002202 <HAL_PCD_EP_ClrStall+0xa4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fe06 	bl	8005e04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221a:	2b00      	cmp	r3, #0
 800221c:	da0c      	bge.n	8002238 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	3310      	adds	r3, #16
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e00c      	b.n	8002252 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fc29 	bl	8005ab0 <USB_EPStopXfer>
 800225e:	4603      	mov	r3, r0
 8002260:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002262:	7afb      	ldrb	r3, [r7, #11]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3310      	adds	r3, #16
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d901      	bls.n	80022a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e067      	b.n	8002374 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d902      	bls.n	80022c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3303      	adds	r3, #3
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022c8:	e026      	b.n	8002318 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d902      	bls.n	80022e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3303      	adds	r3, #3
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f003 fc82 	bl	8005c04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	441a      	add	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	429a      	cmp	r2, r3
 800232c:	d809      	bhi.n	8002342 <PCD_WriteEmptyTxFifo+0xd6>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002336:	429a      	cmp	r2, r3
 8002338:	d203      	bcs.n	8002342 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1c3      	bne.n	80022ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	429a      	cmp	r2, r3
 800234c:	d811      	bhi.n	8002372 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	2201      	movs	r2, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	43db      	mvns	r3, r3
 8002368:	6939      	ldr	r1, [r7, #16]
 800236a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800236e:	4013      	ands	r3, r2
 8002370:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	333c      	adds	r3, #60	@ 0x3c
 8002394:	3304      	adds	r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <PCD_EP_OutXfrComplete_int+0x98>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d124      	bne.n	80023fc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ce:	6093      	str	r3, [r2, #8]
 80023d0:	e01a      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e8:	461a      	mov	r2, r3
 80023ea:	2320      	movs	r3, #32
 80023ec:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f005 f88c 	bl	8007512 <HAL_PCD_DataOutStageCallback>
 80023fa:	e005      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f005 f885 	bl	8007512 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	4f54310a 	.word	0x4f54310a

08002418 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	333c      	adds	r3, #60	@ 0x3c
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a0c      	ldr	r2, [pc, #48]	@ (800247c <PCD_EP_OutSetupPacket_int+0x64>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d90e      	bls.n	800246c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800246a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f005 f83e 	bl	80074ee <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	4f54300a 	.word	0x4f54300a

08002480 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <HAL_PWREx_GetVoltageRange+0x18>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40007000 	.word	0x40007000

0800249c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024aa:	d130      	bne.n	800250e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ac:	4b23      	ldr	r3, [pc, #140]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024b8:	d038      	beq.n	800252c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ba:	4b20      	ldr	r3, [pc, #128]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024c2:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2232      	movs	r2, #50	@ 0x32
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002544 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0c9b      	lsrs	r3, r3, #18
 80024dc:	3301      	adds	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e0:	e002      	b.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f4:	d102      	bne.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f2      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002508:	d110      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e00f      	b.n	800252e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251a:	d007      	beq.n	800252c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000
 8002540:	20000000 	.word	0x20000000
 8002544:	431bde83 	.word	0x431bde83

08002548 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e3ca      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b97      	ldr	r3, [pc, #604]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002564:	4b94      	ldr	r3, [pc, #592]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80e4 	beq.w	8002744 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_RCC_OscConfig+0x4a>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b0c      	cmp	r3, #12
 8002586:	f040 808b 	bne.w	80026a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 8087 	bne.w	80026a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002592:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e3a2      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	4b82      	ldr	r3, [pc, #520]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_RCC_OscConfig+0x7c>
 80025ba:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_OscConfig+0x88>
 80025c4:	4b7c      	ldr	r3, [pc, #496]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d223      	bcs.n	800261c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fd53 	bl	8003084 <RCC_SetFlashLatencyFromMSIRange>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e383      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e8:	4b73      	ldr	r3, [pc, #460]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a72      	ldr	r2, [pc, #456]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b70      	ldr	r3, [pc, #448]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	496d      	ldr	r1, [pc, #436]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002606:	4b6c      	ldr	r3, [pc, #432]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4968      	ldr	r1, [pc, #416]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e025      	b.n	8002668 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261c:	4b66      	ldr	r3, [pc, #408]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a65      	ldr	r2, [pc, #404]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b63      	ldr	r3, [pc, #396]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4960      	ldr	r1, [pc, #384]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263a:	4b5f      	ldr	r3, [pc, #380]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	495b      	ldr	r1, [pc, #364]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd13 	bl	8003084 <RCC_SetFlashLatencyFromMSIRange>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e343      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002668:	f000 fc4a 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b52      	ldr	r3, [pc, #328]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	4950      	ldr	r1, [pc, #320]	@ (80027bc <HAL_RCC_OscConfig+0x274>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	4a4e      	ldr	r2, [pc, #312]	@ (80027c0 <HAL_RCC_OscConfig+0x278>)
 8002686:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002688:	4b4e      	ldr	r3, [pc, #312]	@ (80027c4 <HAL_RCC_OscConfig+0x27c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fc79 	bl	8000f84 <HAL_InitTick>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d052      	beq.n	8002742 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	e327      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d032      	beq.n	800270e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026a8:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a42      	ldr	r2, [pc, #264]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fcb6 	bl	8001024 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026bc:	f7fe fcb2 	bl	8001024 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e310      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ce:	4b3a      	ldr	r3, [pc, #232]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026da:	4b37      	ldr	r3, [pc, #220]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a36      	ldr	r2, [pc, #216]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4931      	ldr	r1, [pc, #196]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f8:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	492c      	ldr	r1, [pc, #176]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e01a      	b.n	8002744 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800270e:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a29      	ldr	r2, [pc, #164]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800271a:	f7fe fc83 	bl	8001024 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002722:	f7fe fc7f 	bl	8001024 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e2dd      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002734:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x1da>
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002742:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d074      	beq.n	800283a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b08      	cmp	r3, #8
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x21a>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d10e      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d10b      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d064      	beq.n	8002838 <HAL_RCC_OscConfig+0x2f0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d160      	bne.n	8002838 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e2ba      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x24a>
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e026      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800279a:	d115      	bne.n	80027c8 <HAL_RCC_OscConfig+0x280>
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a05      	ldr	r2, [pc, #20]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80027a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a02      	ldr	r2, [pc, #8]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e014      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08007b00 	.word	0x08007b00
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004
 80027c8:	4ba0      	ldr	r3, [pc, #640]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a9f      	ldr	r2, [pc, #636]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b9d      	ldr	r3, [pc, #628]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a9c      	ldr	r2, [pc, #624]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fc1c 	bl	8001024 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fc18 	bl	8001024 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e276      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	4b92      	ldr	r3, [pc, #584]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2a8>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fc08 	bl	8001024 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe fc04 	bl	8001024 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e262      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282a:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x2d0>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d060      	beq.n	8002908 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x310>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d119      	bne.n	8002886 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d116      	bne.n	8002886 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x328>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e23f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b76      	ldr	r3, [pc, #472]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	4973      	ldr	r1, [pc, #460]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	e040      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d023      	beq.n	80028d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6e      	ldr	r2, [pc, #440]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fbc3 	bl	8001024 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fe fbbf 	bl	8001024 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e21d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b4:	4b65      	ldr	r3, [pc, #404]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b62      	ldr	r3, [pc, #392]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	495f      	ldr	r1, [pc, #380]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	e018      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a5c      	ldr	r2, [pc, #368]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fb9f 	bl	8001024 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fb9b 	bl	8001024 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1f9      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03c      	beq.n	800298e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01c      	beq.n	8002956 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002922:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fb7a 	bl	8001024 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fb76 	bl	8001024 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1d4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002946:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <HAL_RCC_OscConfig+0x3ec>
 8002954:	e01b      	b.n	800298e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b3d      	ldr	r3, [pc, #244]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe fb5d 	bl	8001024 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fb59 	bl	8001024 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1b7      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002980:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ef      	bne.n	800296e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80a6 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	4a26      	ldr	r2, [pc, #152]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c8:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d118      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fb20 	bl	8001024 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe fb1c 	bl	8001024 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e17a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4d8>
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1e:	e029      	b.n	8002a74 <HAL_RCC_OscConfig+0x52c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d115      	bne.n	8002a54 <HAL_RCC_OscConfig+0x50c>
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2e:	4a07      	ldr	r2, [pc, #28]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3e:	4a03      	ldr	r2, [pc, #12]	@ (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a48:	e014      	b.n	8002a74 <HAL_RCC_OscConfig+0x52c>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	4b9c      	ldr	r3, [pc, #624]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5a:	4a9b      	ldr	r2, [pc, #620]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a64:	4b98      	ldr	r3, [pc, #608]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	4a97      	ldr	r2, [pc, #604]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d016      	beq.n	8002aaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fad2 	bl	8001024 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe face 	bl	8001024 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e12a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ed      	beq.n	8002a84 <HAL_RCC_OscConfig+0x53c>
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fabb 	bl	8001024 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fab7 	bl	8001024 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e113      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac8:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ed      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	4a79      	ldr	r2, [pc, #484]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80fe 	beq.w	8002cee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f040 80d0 	bne.w	8002c9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002afc:	4b72      	ldr	r3, [pc, #456]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d130      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d127      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b3c:	2a07      	cmp	r2, #7
 8002b3e:	bf14      	ite	ne
 8002b40:	2201      	movne	r2, #1
 8002b42:	2200      	moveq	r2, #0
 8002b44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d113      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d06e      	beq.n	8002c50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	d069      	beq.n	8002c4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b78:	4b53      	ldr	r3, [pc, #332]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b84:	4b50      	ldr	r3, [pc, #320]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0ad      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b94:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba0:	f7fe fa40 	bl	8001024 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fa3c 	bl	8001024 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e09a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bba:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	4b40      	ldr	r3, [pc, #256]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_RCC_OscConfig+0x784>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002be0:	0212      	lsls	r2, r2, #8
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002be8:	0852      	lsrs	r2, r2, #1
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0552      	lsls	r2, r2, #21
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bf4:	0852      	lsrs	r2, r2, #1
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0652      	lsls	r2, r2, #25
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c00:	0912      	lsrs	r2, r2, #4
 8002c02:	0452      	lsls	r2, r2, #17
 8002c04:	430a      	orrs	r2, r1
 8002c06:	4930      	ldr	r1, [pc, #192]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c18:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c24:	f7fe f9fe 	bl	8001024 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe f9fa 	bl	8001024 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e058      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c4a:	e050      	b.n	8002cee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d148      	bne.n	8002cee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a19      	ldr	r2, [pc, #100]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c74:	f7fe f9d6 	bl	8001024 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe f9d2 	bl	8001024 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e030      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x734>
 8002c9a:	e028      	b.n	8002cee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d023      	beq.n	8002cea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	@ (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ca8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe f9b9 	bl	8001024 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	e00c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe f9b5 	bl	8001024 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d905      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e013      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ec      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4905      	ldr	r1, [pc, #20]	@ (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_RCC_OscConfig+0x7b4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
 8002ce8:	e001      	b.n	8002cee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	feeefffc 	.word	0xfeeefffc

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0e7      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b75      	ldr	r3, [pc, #468]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b72      	ldr	r3, [pc, #456]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4970      	ldr	r1, [pc, #448]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b6e      	ldr	r3, [pc, #440]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0cf      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b66      	ldr	r3, [pc, #408]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d908      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b63      	ldr	r3, [pc, #396]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4960      	ldr	r1, [pc, #384]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d04c      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d121      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0a6      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	4b54      	ldr	r3, [pc, #336]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d115      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e09a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e08e      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e086      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4943      	ldr	r1, [pc, #268]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe f91c 	bl	8001024 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe f918 	bl	8001024 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e06e      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d208      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	492b      	ldr	r1, [pc, #172]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e46:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d210      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e54:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 0207 	bic.w	r2, r3, #7
 8002e5c:	4923      	ldr	r1, [pc, #140]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e036      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4918      	ldr	r1, [pc, #96]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4910      	ldr	r1, [pc, #64]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb4:	f000 f824 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	490b      	ldr	r1, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1fc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe f853 	bl	8000f84 <HAL_InitTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08007b00 	.word	0x08007b00
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	@ 0x24
 8002f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f18:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11e      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f34:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f40:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800300c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f78:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	e004      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f84:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d134      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d003      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xac>
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa8:	617b      	str	r3, [r7, #20]
      break;
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fac:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fae:	617b      	str	r3, [r7, #20]
      break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	617b      	str	r3, [r7, #20]
      break;
 8002fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	fb03 f202 	mul.w	r2, r3, r2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	0e5b      	lsrs	r3, r3, #25
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08007b18 	.word	0x08007b18
 8003010:	00f42400 	.word	0x00f42400

08003014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_RCC_GetHCLKFreq+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000000 	.word	0x20000000

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003030:	f7ff fff0 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4904      	ldr	r1, [pc, #16]	@ (8003054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	08007b10 	.word	0x08007b10

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800305c:	f7ff ffda 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	0adb      	lsrs	r3, r3, #11
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4904      	ldr	r1, [pc, #16]	@ (8003080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	08007b10 	.word	0x08007b10

08003084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003090:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800309c:	f7ff f9f0 	bl	8002480 <HAL_PWREx_GetVoltageRange>
 80030a0:	6178      	str	r0, [r7, #20]
 80030a2:	e014      	b.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b25      	ldr	r3, [pc, #148]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	4a24      	ldr	r2, [pc, #144]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b0:	4b22      	ldr	r3, [pc, #136]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030bc:	f7ff f9e0 	bl	8002480 <HAL_PWREx_GetVoltageRange>
 80030c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030d4:	d10b      	bne.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b80      	cmp	r3, #128	@ 0x80
 80030da:	d919      	bls.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2ba0      	cmp	r3, #160	@ 0xa0
 80030e0:	d902      	bls.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e2:	2302      	movs	r3, #2
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e013      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e8:	2301      	movs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e010      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d902      	bls.n	80030fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030f4:	2303      	movs	r3, #3
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	e00a      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b80      	cmp	r3, #128	@ 0x80
 80030fe:	d102      	bne.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003100:	2302      	movs	r3, #2
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e004      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b70      	cmp	r3, #112	@ 0x70
 800310a:	d101      	bne.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800310c:	2301      	movs	r3, #1
 800310e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 0207 	bic.w	r2, r3, #7
 8003118:	4909      	ldr	r1, [pc, #36]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	429a      	cmp	r2, r3
 800312c:	d001      	beq.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	40022000 	.word	0x40022000

08003144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800314c:	2300      	movs	r3, #0
 800314e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003150:	2300      	movs	r3, #0
 8003152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800315c:	2b00      	cmp	r3, #0
 800315e:	d041      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003164:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003168:	d02a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800316a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800316e:	d824      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003174:	d008      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800317a:	d81e      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003184:	d010      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003186:	e018      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003188:	4b86      	ldr	r3, [pc, #536]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a85      	ldr	r2, [pc, #532]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003192:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003194:	e015      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3304      	adds	r3, #4
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fabb 	bl	8003718 <RCCEx_PLLSAI1_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a6:	e00c      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3320      	adds	r3, #32
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fba6 	bl	8003900 <RCCEx_PLLSAI2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031b8:	e003      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	74fb      	strb	r3, [r7, #19]
      break;
 80031be:	e000      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c8:	4b76      	ldr	r3, [pc, #472]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d6:	4973      	ldr	r1, [pc, #460]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031de:	e001      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d041      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031f8:	d02a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031fe:	d824      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800320a:	d81e      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003214:	d010      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003216:	e018      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003218:	4b62      	ldr	r3, [pc, #392]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a61      	ldr	r2, [pc, #388]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003222:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3304      	adds	r3, #4
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa73 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003236:	e00c      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3320      	adds	r3, #32
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fb5e 	bl	8003900 <RCCEx_PLLSAI2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	74fb      	strb	r3, [r7, #19]
      break;
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003258:	4b52      	ldr	r3, [pc, #328]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003266:	494f      	ldr	r1, [pc, #316]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800326e:	e001      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a0 	beq.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003286:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	4a40      	ldr	r2, [pc, #256]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032a8:	4b3e      	ldr	r3, [pc, #248]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b4:	2301      	movs	r3, #1
 80032b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b8:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a3a      	ldr	r2, [pc, #232]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032c4:	f7fd feae 	bl	8001024 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ca:	e009      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032cc:	f7fd feaa 	bl	8001024 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	74fb      	strb	r3, [r7, #19]
        break;
 80032de:	e005      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032e0:	4b31      	ldr	r3, [pc, #196]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ef      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d15c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032f2:	4b2c      	ldr	r3, [pc, #176]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01f      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	d019      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003310:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800331a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800331c:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	4a20      	ldr	r2, [pc, #128]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800332c:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800333c:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fd fe69 	bl	8001024 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003354:	e00b      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fd fe65 	bl	8001024 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d902      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	74fb      	strb	r3, [r7, #19]
            break;
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ec      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003382:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003392:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b0:	7c7b      	ldrb	r3, [r7, #17]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	4a9d      	ldr	r2, [pc, #628]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ce:	4b98      	ldr	r3, [pc, #608]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d4:	f023 0203 	bic.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	4994      	ldr	r1, [pc, #592]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f023 020c 	bic.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fe:	498c      	ldr	r1, [pc, #560]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003412:	4b87      	ldr	r3, [pc, #540]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003418:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	4983      	ldr	r1, [pc, #524]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003434:	4b7e      	ldr	r3, [pc, #504]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	497b      	ldr	r1, [pc, #492]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003456:	4b76      	ldr	r3, [pc, #472]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003464:	4972      	ldr	r1, [pc, #456]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003478:	4b6d      	ldr	r3, [pc, #436]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	496a      	ldr	r1, [pc, #424]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349a:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	4961      	ldr	r1, [pc, #388]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034bc:	4b5c      	ldr	r3, [pc, #368]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	4959      	ldr	r1, [pc, #356]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034de:	4b54      	ldr	r3, [pc, #336]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ec:	4950      	ldr	r1, [pc, #320]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003500:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	4948      	ldr	r1, [pc, #288]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003522:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	493f      	ldr	r1, [pc, #252]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d028      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003544:	4b3a      	ldr	r3, [pc, #232]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003552:	4937      	ldr	r1, [pc, #220]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800355e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003562:	d106      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003564:	4b32      	ldr	r3, [pc, #200]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a31      	ldr	r2, [pc, #196]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800356e:	60d3      	str	r3, [r2, #12]
 8003570:	e011      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003576:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800357a:	d10c      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f8c8 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d028      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	491f      	ldr	r1, [pc, #124]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035cc:	60d3      	str	r3, [r2, #12]
 80035ce:	e011      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f899 	bl	8003718 <RCCEx_PLLSAI1_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02b      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003606:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360e:	4908      	ldr	r1, [pc, #32]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800361e:	d109      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a02      	ldr	r2, [pc, #8]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800362a:	60d3      	str	r3, [r2, #12]
 800362c:	e014      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003638:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800363c:	d10c      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f867 	bl	8003718 <RCCEx_PLLSAI1_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003664:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003672:	4928      	ldr	r1, [pc, #160]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800367e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003682:	d10d      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	2102      	movs	r1, #2
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f844 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d014      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	74bb      	strb	r3, [r7, #18]
 800369e:	e011      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3320      	adds	r3, #32
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f925 	bl	8003900 <RCCEx_PLLSAI2_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036d0:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036de:	490d      	ldr	r1, [pc, #52]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003702:	4904      	ldr	r1, [pc, #16]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800370a:	7cbb      	ldrb	r3, [r7, #18]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000

08003718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003726:	4b75      	ldr	r3, [pc, #468]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003732:	4b72      	ldr	r3, [pc, #456]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d10d      	bne.n	800375e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
       ||
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800374a:	4b6c      	ldr	r3, [pc, #432]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
       ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d047      	beq.n	80037ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	e044      	b.n	80037ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d018      	beq.n	800379e <RCCEx_PLLSAI1_Config+0x86>
 800376c:	2b03      	cmp	r3, #3
 800376e:	d825      	bhi.n	80037bc <RCCEx_PLLSAI1_Config+0xa4>
 8003770:	2b01      	cmp	r3, #1
 8003772:	d002      	beq.n	800377a <RCCEx_PLLSAI1_Config+0x62>
 8003774:	2b02      	cmp	r3, #2
 8003776:	d009      	beq.n	800378c <RCCEx_PLLSAI1_Config+0x74>
 8003778:	e020      	b.n	80037bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800377a:	4b60      	ldr	r3, [pc, #384]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11d      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378a:	e01a      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800378c:	4b5b      	ldr	r3, [pc, #364]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e013      	b.n	80037c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800379e:	4b57      	ldr	r3, [pc, #348]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037aa:	4b54      	ldr	r3, [pc, #336]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ba:	e006      	b.n	80037ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e004      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037d2:	4b4a      	ldr	r3, [pc, #296]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	430b      	orrs	r3, r1
 80037e8:	4944      	ldr	r1, [pc, #272]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d17d      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a40      	ldr	r2, [pc, #256]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fd fc10 	bl	8001024 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003806:	e009      	b.n	800381c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003808:	f7fd fc0c 	bl	8001024 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d902      	bls.n	800381c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	73fb      	strb	r3, [r7, #15]
        break;
 800381a:	e005      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ef      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d160      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003834:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800383c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	0211      	lsls	r1, r2, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	0912      	lsrs	r2, r2, #4
 800384c:	0452      	lsls	r2, r2, #17
 800384e:	430a      	orrs	r2, r1
 8003850:	492a      	ldr	r1, [pc, #168]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	610b      	str	r3, [r1, #16]
 8003856:	e027      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d112      	bne.n	8003884 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800385e:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003866:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6892      	ldr	r2, [r2, #8]
 800386e:	0211      	lsls	r1, r2, #8
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6912      	ldr	r2, [r2, #16]
 8003874:	0852      	lsrs	r2, r2, #1
 8003876:	3a01      	subs	r2, #1
 8003878:	0552      	lsls	r2, r2, #21
 800387a:	430a      	orrs	r2, r1
 800387c:	491f      	ldr	r1, [pc, #124]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	610b      	str	r3, [r1, #16]
 8003882:	e011      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800388c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6892      	ldr	r2, [r2, #8]
 8003894:	0211      	lsls	r1, r2, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6952      	ldr	r2, [r2, #20]
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	3a01      	subs	r2, #1
 800389e:	0652      	lsls	r2, r2, #25
 80038a0:	430a      	orrs	r2, r1
 80038a2:	4916      	ldr	r1, [pc, #88]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038a8:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fd fbb6 	bl	8001024 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038bc:	f7fd fbb2 	bl	8001024 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
          break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ef      	beq.n	80038bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	4904      	ldr	r1, [pc, #16]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d018      	beq.n	800394c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800391a:	4b67      	ldr	r3, [pc, #412]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d10d      	bne.n	8003946 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003932:	4b61      	ldr	r3, [pc, #388]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
       ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d047      	beq.n	80039d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	e044      	b.n	80039d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d018      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0x86>
 8003954:	2b03      	cmp	r3, #3
 8003956:	d825      	bhi.n	80039a4 <RCCEx_PLLSAI2_Config+0xa4>
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <RCCEx_PLLSAI2_Config+0x62>
 800395c:	2b02      	cmp	r3, #2
 800395e:	d009      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x74>
 8003960:	e020      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003962:	4b55      	ldr	r3, [pc, #340]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11d      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e01a      	b.n	80039aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003974:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e013      	b.n	80039ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003986:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003992:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039a2:	e006      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e004      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ba:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	430b      	orrs	r3, r1
 80039d0:	4939      	ldr	r1, [pc, #228]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d167      	bne.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd fb1c 	bl	8001024 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039f0:	f7fd fb18 	bl	8001024 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
        break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a04:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ef      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d14a      	bne.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d111      	bne.n	8003a40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a1c:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	0211      	lsls	r1, r2, #8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	0912      	lsrs	r2, r2, #4
 8003a34:	0452      	lsls	r2, r2, #17
 8003a36:	430a      	orrs	r2, r1
 8003a38:	491f      	ldr	r1, [pc, #124]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	614b      	str	r3, [r1, #20]
 8003a3e:	e011      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a40:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	0211      	lsls	r1, r2, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6912      	ldr	r2, [r2, #16]
 8003a56:	0852      	lsrs	r2, r2, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0652      	lsls	r2, r2, #25
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4916      	ldr	r1, [pc, #88]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a64:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fad8 	bl	8001024 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a76:	e009      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a78:	f7fd fad4 	bl	8001024 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d902      	bls.n	8003a8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	73fb      	strb	r3, [r7, #15]
          break;
 8003a8a:	e005      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ef      	beq.n	8003a78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4904      	ldr	r1, [pc, #16]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000

08003abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e095      	b.n	8003bfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ade:	d009      	beq.n	8003af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	61da      	str	r2, [r3, #28]
 8003ae6:	e005      	b.n	8003af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd f90a 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b34:	d902      	bls.n	8003b3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e002      	b.n	8003b42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b4a:	d007      	beq.n	8003b5c <HAL_SPI_Init+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b54:	d002      	beq.n	8003b5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	f003 0204 	and.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b088      	sub	sp, #32
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c12:	f7fd fa07 	bl	8001024 <HAL_GetTick>
 8003c16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e15c      	b.n	8003ee6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Transmit+0x36>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e154      	b.n	8003ee6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_SPI_Transmit+0x48>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e14d      	b.n	8003ee6 <HAL_SPI_Transmit+0x2e4>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2203      	movs	r2, #3
 8003c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9c:	d10f      	bne.n	8003cbe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ce4:	d952      	bls.n	8003d8c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0xf2>
 8003cee:	8b7b      	ldrh	r3, [r7, #26]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d145      	bne.n	8003d80 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d18:	e032      	b.n	8003d80 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d112      	bne.n	8003d4e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d4c:	e018      	b.n	8003d80 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4e:	f7fd f969 	bl	8001024 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d803      	bhi.n	8003d66 <HAL_SPI_Transmit+0x164>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Transmit+0x16a>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0b2      	b.n	8003ee6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1c7      	bne.n	8003d1a <HAL_SPI_Transmit+0x118>
 8003d8a:	e083      	b.n	8003e94 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_Transmit+0x198>
 8003d94:	8b7b      	ldrh	r3, [r7, #26]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d177      	bne.n	8003e8a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d912      	bls.n	8003dca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b02      	subs	r3, #2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dc8:	e05f      	b.n	8003e8a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003df0:	e04b      	b.n	8003e8a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d12b      	bne.n	8003e58 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d912      	bls.n	8003e30 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1a:	1c9a      	adds	r2, r3, #2
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b02      	subs	r3, #2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e2e:	e02c      	b.n	8003e8a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	7812      	ldrb	r2, [r2, #0]
 8003e3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e56:	e018      	b.n	8003e8a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e58:	f7fd f8e4 	bl	8001024 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d803      	bhi.n	8003e70 <HAL_SPI_Transmit+0x26e>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Transmit+0x274>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e02d      	b.n	8003ee6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ae      	bne.n	8003df2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fcf5 	bl	8004888 <SPI_EndRxTxTransaction>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b088      	sub	sp, #32
 8003ef2:	af02      	add	r7, sp, #8
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d001      	beq.n	8003f0e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e123      	b.n	8004156 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f16:	d112      	bne.n	8003f3e <HAL_SPI_Receive+0x50>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10e      	bne.n	8003f3e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2204      	movs	r2, #4
 8003f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f912 	bl	800415e <HAL_SPI_TransmitReceive>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	e10b      	b.n	8004156 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3e:	f7fd f871 	bl	8001024 <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_Receive+0x62>
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e100      	b.n	8004156 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_SPI_Receive+0x74>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0f9      	b.n	8004156 <HAL_SPI_Receive+0x268>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fb4:	d908      	bls.n	8003fc8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e007      	b.n	8003fd8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe0:	d10f      	bne.n	8004002 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d007      	beq.n	8004020 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004028:	d875      	bhi.n	8004116 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800402a:	e037      	b.n	800409c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d117      	bne.n	800406a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f103 020c 	add.w	r2, r3, #12
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004068:	e018      	b.n	800409c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406a:	f7fc ffdb 	bl	8001024 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d803      	bhi.n	8004082 <HAL_SPI_Receive+0x194>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004080:	d102      	bne.n	8004088 <HAL_SPI_Receive+0x19a>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05c      	b.n	8004156 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1c1      	bne.n	800402c <HAL_SPI_Receive+0x13e>
 80040a8:	e03b      	b.n	8004122 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d115      	bne.n	80040e4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	b292      	uxth	r2, r2
 80040c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80040e2:	e018      	b.n	8004116 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e4:	f7fc ff9e 	bl	8001024 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d803      	bhi.n	80040fc <HAL_SPI_Receive+0x20e>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_Receive+0x214>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e01f      	b.n	8004156 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1c3      	bne.n	80040aa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fb56 	bl	80047d8 <SPI_EndRxTransaction>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004154:	2300      	movs	r3, #0
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	@ 0x28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004170:	f7fc ff58 	bl	8001024 <HAL_GetTick>
 8004174:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800417c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d00c      	beq.n	80041ac <HAL_SPI_TransmitReceive+0x4e>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004198:	d106      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x4a>
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d001      	beq.n	80041ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
 80041aa:	e1f3      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_SPI_TransmitReceive+0x60>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_SPI_TransmitReceive+0x60>
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1e8      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x72>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e1e1      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d003      	beq.n	80041ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2205      	movs	r2, #5
 80041e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	887a      	ldrh	r2, [r7, #2]
 8004212:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800422e:	d802      	bhi.n	8004236 <HAL_SPI_TransmitReceive+0xd8>
 8004230:	8abb      	ldrh	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d908      	bls.n	8004248 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e007      	b.n	8004258 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d007      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800427e:	f240 8083 	bls.w	8004388 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_TransmitReceive+0x132>
 800428a:	8afb      	ldrh	r3, [r7, #22]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d16f      	bne.n	8004370 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b4:	e05c      	b.n	8004370 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d11b      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x19e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x19e>
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d113      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	1c9a      	adds	r2, r3, #2
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d11c      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x1e6>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d016      	beq.n	8004344 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004340:	2301      	movs	r3, #1
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004344:	f7fc fe6e 	bl	8001024 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004350:	429a      	cmp	r2, r3
 8004352:	d80d      	bhi.n	8004370 <HAL_SPI_TransmitReceive+0x212>
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435a:	d009      	beq.n	8004370 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e111      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d19d      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x158>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d197      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x158>
 8004386:	e0e5      	b.n	8004554 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x23a>
 8004390:	8afb      	ldrh	r3, [r7, #22]
 8004392:	2b01      	cmp	r3, #1
 8004394:	f040 80d1 	bne.w	800453a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d912      	bls.n	80043c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b02      	subs	r3, #2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043c6:	e0b8      	b.n	800453a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ee:	e0a4      	b.n	800453a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d134      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x30a>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d02f      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x30a>
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	2b01      	cmp	r3, #1
 800440c:	d12c      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d912      	bls.n	800443e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	881a      	ldrh	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	1c9a      	adds	r2, r3, #2
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b02      	subs	r3, #2
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800443c:	e012      	b.n	8004464 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	7812      	ldrb	r2, [r2, #0]
 800444a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d148      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x3aa>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d042      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d923      	bls.n	80044d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	b292      	uxth	r2, r2
 800449a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b02      	subs	r3, #2
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d81f      	bhi.n	8004504 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044d2:	605a      	str	r2, [r3, #4]
 80044d4:	e016      	b.n	8004504 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f103 020c 	add.w	r2, r3, #12
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004504:	2301      	movs	r3, #1
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004508:	f7fc fd8c 	bl	8001024 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004514:	429a      	cmp	r2, r3
 8004516:	d803      	bhi.n	8004520 <HAL_SPI_TransmitReceive+0x3c2>
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800451e:	d102      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x3c8>
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e02c      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f47f af55 	bne.w	80043f0 <HAL_SPI_TransmitReceive+0x292>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	f47f af4e 	bne.w	80043f0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f995 	bl	8004888 <SPI_EndRxTxTransaction>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e00e      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004592:	2300      	movs	r3, #0
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3728      	adds	r7, #40	@ 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045ac:	f7fc fd3a 	bl	8001024 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	4413      	add	r3, r2
 80045ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045bc:	f7fc fd32 	bl	8001024 <HAL_GetTick>
 80045c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045c2:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	0d1b      	lsrs	r3, r3, #20
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	fb02 f303 	mul.w	r3, r2, r3
 80045d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d2:	e054      	b.n	800467e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045da:	d050      	beq.n	800467e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045dc:	f7fc fd22 	bl	8001024 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d902      	bls.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d13d      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800460a:	d111      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004614:	d004      	beq.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461e:	d107      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800462e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004638:	d10f      	bne.n	800465a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e017      	b.n	800469e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3b01      	subs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	429a      	cmp	r2, r3
 800469a:	d19b      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000000 	.word	0x20000000

080046ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	@ 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046be:	f7fc fcb1 	bl	8001024 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	4413      	add	r3, r2
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80046ce:	f7fc fca9 	bl	8001024 <HAL_GetTick>
 80046d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046dc:	4b3d      	ldr	r3, [pc, #244]	@ (80047d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00da      	lsls	r2, r3, #3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	0d1b      	lsrs	r3, r3, #20
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046f4:	e060      	b.n	80047b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80046fc:	d107      	bne.n	800470e <SPI_WaitFifoStateUntilTimeout+0x62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800470c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004714:	d050      	beq.n	80047b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004716:	f7fc fc85 	bl	8001024 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004722:	429a      	cmp	r2, r3
 8004724:	d902      	bls.n	800472c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d13d      	bne.n	80047a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800473a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004744:	d111      	bne.n	800476a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474e:	d004      	beq.n	800475a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004758:	d107      	bne.n	800476a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004768:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004772:	d10f      	bne.n	8004794 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004792:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e010      	b.n	80047ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d196      	bne.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3728      	adds	r7, #40	@ 0x28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000

080047d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ec:	d111      	bne.n	8004812 <SPI_EndRxTransaction+0x3a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f6:	d004      	beq.n	8004802 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004800:	d107      	bne.n	8004812 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004810:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2200      	movs	r2, #0
 800481a:	2180      	movs	r1, #128	@ 0x80
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff febd 	bl	800459c <SPI_WaitFlagStateUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e023      	b.n	8004880 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004840:	d11d      	bne.n	800487e <SPI_EndRxTransaction+0xa6>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484a:	d004      	beq.n	8004856 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004854:	d113      	bne.n	800487e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff ff22 	bl	80046ac <SPI_WaitFifoStateUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004872:	f043 0220 	orr.w	r2, r3, #32
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e000      	b.n	8004880 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ff03 	bl	80046ac <SPI_WaitFifoStateUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e027      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	@ 0x80
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fe68 	bl	800459c <SPI_WaitFlagStateUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e014      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fedc 	bl	80046ac <SPI_WaitFifoStateUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e000      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e040      	b.n	80049a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fc fa38 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	@ 0x24
 8004940:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fae0 	bl	8004f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f825 	bl	80049b0 <UART_SetConfig>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e01b      	b.n	80049a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800497e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800498e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fb5f 	bl	8005064 <UART_CheckIdleState>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b08a      	sub	sp, #40	@ 0x28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4ba4      	ldr	r3, [pc, #656]	@ (8004c70 <UART_SetConfig+0x2c0>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a99      	ldr	r2, [pc, #612]	@ (8004c74 <UART_SetConfig+0x2c4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a90      	ldr	r2, [pc, #576]	@ (8004c78 <UART_SetConfig+0x2c8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d126      	bne.n	8004a88 <UART_SetConfig+0xd8>
 8004a3a:	4b90      	ldr	r3, [pc, #576]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d81b      	bhi.n	8004a80 <UART_SetConfig+0xd0>
 8004a48:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0xa0>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a61 	.word	0x08004a61
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e116      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e112      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e10e      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7e:	e10a      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a86:	e106      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c80 <UART_SetConfig+0x2d0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d138      	bne.n	8004b04 <UART_SetConfig+0x154>
 8004a92:	4b7a      	ldr	r3, [pc, #488]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d82d      	bhi.n	8004afc <UART_SetConfig+0x14c>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <UART_SetConfig+0xf8>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004afd 	.word	0x08004afd
 8004ab0:	08004afd 	.word	0x08004afd
 8004ab4:	08004afd 	.word	0x08004afd
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004afd 	.word	0x08004afd
 8004ac0:	08004afd 	.word	0x08004afd
 8004ac4:	08004afd 	.word	0x08004afd
 8004ac8:	08004ae5 	.word	0x08004ae5
 8004acc:	08004afd 	.word	0x08004afd
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004afd 	.word	0x08004afd
 8004ad8:	08004af5 	.word	0x08004af5
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e0d8      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e0d4      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004aec:	2304      	movs	r3, #4
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af2:	e0d0      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004af4:	2308      	movs	r3, #8
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e0cc      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004afc:	2310      	movs	r3, #16
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b02:	e0c8      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5e      	ldr	r2, [pc, #376]	@ (8004c84 <UART_SetConfig+0x2d4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d125      	bne.n	8004b5a <UART_SetConfig+0x1aa>
 8004b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b18:	2b30      	cmp	r3, #48	@ 0x30
 8004b1a:	d016      	beq.n	8004b4a <UART_SetConfig+0x19a>
 8004b1c:	2b30      	cmp	r3, #48	@ 0x30
 8004b1e:	d818      	bhi.n	8004b52 <UART_SetConfig+0x1a2>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d00a      	beq.n	8004b3a <UART_SetConfig+0x18a>
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d814      	bhi.n	8004b52 <UART_SetConfig+0x1a2>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <UART_SetConfig+0x182>
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d008      	beq.n	8004b42 <UART_SetConfig+0x192>
 8004b30:	e00f      	b.n	8004b52 <UART_SetConfig+0x1a2>
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b38:	e0ad      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b40:	e0a9      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b42:	2304      	movs	r3, #4
 8004b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b48:	e0a5      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b50:	e0a1      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b52:	2310      	movs	r3, #16
 8004b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b58:	e09d      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c88 <UART_SetConfig+0x2d8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d125      	bne.n	8004bb0 <UART_SetConfig+0x200>
 8004b64:	4b45      	ldr	r3, [pc, #276]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b70:	d016      	beq.n	8004ba0 <UART_SetConfig+0x1f0>
 8004b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b74:	d818      	bhi.n	8004ba8 <UART_SetConfig+0x1f8>
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d00a      	beq.n	8004b90 <UART_SetConfig+0x1e0>
 8004b7a:	2b80      	cmp	r3, #128	@ 0x80
 8004b7c:	d814      	bhi.n	8004ba8 <UART_SetConfig+0x1f8>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <UART_SetConfig+0x1d8>
 8004b82:	2b40      	cmp	r3, #64	@ 0x40
 8004b84:	d008      	beq.n	8004b98 <UART_SetConfig+0x1e8>
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x1f8>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e082      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e07e      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e07a      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e076      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e072      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a35      	ldr	r2, [pc, #212]	@ (8004c8c <UART_SetConfig+0x2dc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d12a      	bne.n	8004c10 <UART_SetConfig+0x260>
 8004bba:	4b30      	ldr	r3, [pc, #192]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bc8:	d01a      	beq.n	8004c00 <UART_SetConfig+0x250>
 8004bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bce:	d81b      	bhi.n	8004c08 <UART_SetConfig+0x258>
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd4:	d00c      	beq.n	8004bf0 <UART_SetConfig+0x240>
 8004bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bda:	d815      	bhi.n	8004c08 <UART_SetConfig+0x258>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <UART_SetConfig+0x238>
 8004be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be4:	d008      	beq.n	8004bf8 <UART_SetConfig+0x248>
 8004be6:	e00f      	b.n	8004c08 <UART_SetConfig+0x258>
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bee:	e052      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf6:	e04e      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfe:	e04a      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c00:	2308      	movs	r3, #8
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c06:	e046      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0e:	e042      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a17      	ldr	r2, [pc, #92]	@ (8004c74 <UART_SetConfig+0x2c4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d13a      	bne.n	8004c90 <UART_SetConfig+0x2e0>
 8004c1a:	4b18      	ldr	r3, [pc, #96]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c28:	d01a      	beq.n	8004c60 <UART_SetConfig+0x2b0>
 8004c2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c2e:	d81b      	bhi.n	8004c68 <UART_SetConfig+0x2b8>
 8004c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c34:	d00c      	beq.n	8004c50 <UART_SetConfig+0x2a0>
 8004c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c3a:	d815      	bhi.n	8004c68 <UART_SetConfig+0x2b8>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <UART_SetConfig+0x298>
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c44:	d008      	beq.n	8004c58 <UART_SetConfig+0x2a8>
 8004c46:	e00f      	b.n	8004c68 <UART_SetConfig+0x2b8>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4e:	e022      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c56:	e01e      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5e:	e01a      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c66:	e016      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6e:	e012      	b.n	8004c96 <UART_SetConfig+0x2e6>
 8004c70:	efff69f3 	.word	0xefff69f3
 8004c74:	40008000 	.word	0x40008000
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40004400 	.word	0x40004400
 8004c84:	40004800 	.word	0x40004800
 8004c88:	40004c00 	.word	0x40004c00
 8004c8c:	40005000 	.word	0x40005000
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a9f      	ldr	r2, [pc, #636]	@ (8004f18 <UART_SetConfig+0x568>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d17a      	bne.n	8004d96 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d824      	bhi.n	8004cf2 <UART_SetConfig+0x342>
 8004ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <UART_SetConfig+0x300>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004ce3 	.word	0x08004ce3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004cf3 	.word	0x08004cf3
 8004cd0:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe f9aa 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8004cd8:	61f8      	str	r0, [r7, #28]
        break;
 8004cda:	e010      	b.n	8004cfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8004f1c <UART_SetConfig+0x56c>)
 8004cde:	61fb      	str	r3, [r7, #28]
        break;
 8004ce0:	e00d      	b.n	8004cfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe f90d 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004ce6:	61f8      	str	r0, [r7, #28]
        break;
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cee:	61fb      	str	r3, [r7, #28]
        break;
 8004cf0:	e005      	b.n	8004cfe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80fb 	beq.w	8004efc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d305      	bcc.n	8004d22 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d903      	bls.n	8004d2a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d28:	e0e8      	b.n	8004efc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	461c      	mov	r4, r3
 8004d30:	4615      	mov	r5, r2
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	022b      	lsls	r3, r5, #8
 8004d3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d40:	0222      	lsls	r2, r4, #8
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	6849      	ldr	r1, [r1, #4]
 8004d46:	0849      	lsrs	r1, r1, #1
 8004d48:	2000      	movs	r0, #0
 8004d4a:	4688      	mov	r8, r1
 8004d4c:	4681      	mov	r9, r0
 8004d4e:	eb12 0a08 	adds.w	sl, r2, r8
 8004d52:	eb43 0b09 	adc.w	fp, r3, r9
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d64:	4650      	mov	r0, sl
 8004d66:	4659      	mov	r1, fp
 8004d68:	f7fb fa2e 	bl	80001c8 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4613      	mov	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d7a:	d308      	bcc.n	8004d8e <UART_SetConfig+0x3de>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d82:	d204      	bcs.n	8004d8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e0b6      	b.n	8004efc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d94:	e0b2      	b.n	8004efc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d9e:	d15e      	bne.n	8004e5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004da0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d828      	bhi.n	8004dfa <UART_SetConfig+0x44a>
 8004da8:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <UART_SetConfig+0x400>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	08004dfb 	.word	0x08004dfb
 8004dc0:	08004deb 	.word	0x08004deb
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004dfb 	.word	0x08004dfb
 8004dcc:	08004dfb 	.word	0x08004dfb
 8004dd0:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe f92a 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8004dd8:	61f8      	str	r0, [r7, #28]
        break;
 8004dda:	e014      	b.n	8004e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7fe f93c 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8004de0:	61f8      	str	r0, [r7, #28]
        break;
 8004de2:	e010      	b.n	8004e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de4:	4b4d      	ldr	r3, [pc, #308]	@ (8004f1c <UART_SetConfig+0x56c>)
 8004de6:	61fb      	str	r3, [r7, #28]
        break;
 8004de8:	e00d      	b.n	8004e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dea:	f7fe f889 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004dee:	61f8      	str	r0, [r7, #28]
        break;
 8004df0:	e009      	b.n	8004e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004df6:	61fb      	str	r3, [r7, #28]
        break;
 8004df8:	e005      	b.n	8004e06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d077      	beq.n	8004efc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005a      	lsls	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b0f      	cmp	r3, #15
 8004e26:	d916      	bls.n	8004e56 <UART_SetConfig+0x4a6>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2e:	d212      	bcs.n	8004e56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f023 030f 	bic.w	r3, r3, #15
 8004e38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	8afb      	ldrh	r3, [r7, #22]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	8afa      	ldrh	r2, [r7, #22]
 8004e52:	60da      	str	r2, [r3, #12]
 8004e54:	e052      	b.n	8004efc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e5c:	e04e      	b.n	8004efc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d827      	bhi.n	8004eb6 <UART_SetConfig+0x506>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x4bc>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
 8004e84:	08004eb7 	.word	0x08004eb7
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004eaf 	.word	0x08004eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe f8cc 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8004e94:	61f8      	str	r0, [r7, #28]
        break;
 8004e96:	e014      	b.n	8004ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe f8de 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	61f8      	str	r0, [r7, #28]
        break;
 8004e9e:	e010      	b.n	8004ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f1c <UART_SetConfig+0x56c>)
 8004ea2:	61fb      	str	r3, [r7, #28]
        break;
 8004ea4:	e00d      	b.n	8004ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fe f82b 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004eaa:	61f8      	str	r0, [r7, #28]
        break;
 8004eac:	e009      	b.n	8004ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	61fb      	str	r3, [r7, #28]
        break;
 8004eb4:	e005      	b.n	8004ec2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d019      	beq.n	8004efc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	085a      	lsrs	r2, r3, #1
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d909      	bls.n	8004ef6 <UART_SetConfig+0x546>
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d205      	bcs.n	8004ef6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60da      	str	r2, [r3, #12]
 8004ef4:	e002      	b.n	8004efc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3728      	adds	r7, #40	@ 0x28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40008000 	.word	0x40008000
 8004f1c:	00f42400 	.word	0x00f42400

08004f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01a      	beq.n	8005036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501e:	d10a      	bne.n	8005036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b098      	sub	sp, #96	@ 0x60
 8005068:	af02      	add	r7, sp, #8
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005074:	f7fb ffd6 	bl	8001024 <HAL_GetTick>
 8005078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d12e      	bne.n	80050e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005090:	2200      	movs	r2, #0
 8005092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f88c 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d021      	beq.n	80050e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e6      	bne.n	80050a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e062      	b.n	80051ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d149      	bne.n	8005188 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fc:	2200      	movs	r2, #0
 80050fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f856 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03c      	beq.n	8005188 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	623b      	str	r3, [r7, #32]
   return(result);
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800512c:	633b      	str	r3, [r7, #48]	@ 0x30
 800512e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	69b9      	ldr	r1, [r7, #24]
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	617b      	str	r3, [r7, #20]
   return(result);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e5      	bne.n	8005140 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e011      	b.n	80051ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3758      	adds	r7, #88	@ 0x58
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c4:	e04f      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051cc:	d04b      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fb ff29 	bl	8001024 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e04e      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d037      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b80      	cmp	r3, #128	@ 0x80
 80051fa:	d034      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d031      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d110      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f838 	bl	800528e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2208      	movs	r2, #8
 8005222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e029      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005240:	d111      	bne.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800524a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f81e 	bl	800528e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e00f      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	429a      	cmp	r2, r3
 8005282:	d0a0      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b095      	sub	sp, #84	@ 0x54
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005300:	2b01      	cmp	r3, #1
 8005302:	d118      	bne.n	8005336 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	60bb      	str	r3, [r7, #8]
   return(result);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 0310 	bic.w	r3, r3, #16
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6979      	ldr	r1, [r7, #20]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	613b      	str	r3, [r7, #16]
   return(result);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e6      	bne.n	8005304 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800534a:	bf00      	nop
 800534c:	3754      	adds	r7, #84	@ 0x54
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d165      	bne.n	8005438 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a3e      	ldr	r2, [pc, #248]	@ (8005468 <USB_SetTurnaroundTime+0x110>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d906      	bls.n	8005382 <USB_SetTurnaroundTime+0x2a>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a3d      	ldr	r2, [pc, #244]	@ (800546c <USB_SetTurnaroundTime+0x114>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d202      	bcs.n	8005382 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800537c:	230f      	movs	r3, #15
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e05c      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a39      	ldr	r2, [pc, #228]	@ (800546c <USB_SetTurnaroundTime+0x114>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d306      	bcc.n	8005398 <USB_SetTurnaroundTime+0x40>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a38      	ldr	r2, [pc, #224]	@ (8005470 <USB_SetTurnaroundTime+0x118>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d202      	bcs.n	8005398 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005392:	230e      	movs	r3, #14
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e051      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a35      	ldr	r2, [pc, #212]	@ (8005470 <USB_SetTurnaroundTime+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d306      	bcc.n	80053ae <USB_SetTurnaroundTime+0x56>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a34      	ldr	r2, [pc, #208]	@ (8005474 <USB_SetTurnaroundTime+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d202      	bcs.n	80053ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053a8:	230d      	movs	r3, #13
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e046      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a30      	ldr	r2, [pc, #192]	@ (8005474 <USB_SetTurnaroundTime+0x11c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d306      	bcc.n	80053c4 <USB_SetTurnaroundTime+0x6c>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005478 <USB_SetTurnaroundTime+0x120>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d802      	bhi.n	80053c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053be:	230c      	movs	r3, #12
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e03b      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005478 <USB_SetTurnaroundTime+0x120>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d906      	bls.n	80053da <USB_SetTurnaroundTime+0x82>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <USB_SetTurnaroundTime+0x124>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d802      	bhi.n	80053da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053d4:	230b      	movs	r3, #11
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e030      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a27      	ldr	r2, [pc, #156]	@ (800547c <USB_SetTurnaroundTime+0x124>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d906      	bls.n	80053f0 <USB_SetTurnaroundTime+0x98>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <USB_SetTurnaroundTime+0x128>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d802      	bhi.n	80053f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053ea:	230a      	movs	r3, #10
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e025      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <USB_SetTurnaroundTime+0x128>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d906      	bls.n	8005406 <USB_SetTurnaroundTime+0xae>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a22      	ldr	r2, [pc, #136]	@ (8005484 <USB_SetTurnaroundTime+0x12c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d202      	bcs.n	8005406 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005400:	2309      	movs	r3, #9
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e01a      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a1e      	ldr	r2, [pc, #120]	@ (8005484 <USB_SetTurnaroundTime+0x12c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d306      	bcc.n	800541c <USB_SetTurnaroundTime+0xc4>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <USB_SetTurnaroundTime+0x130>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d802      	bhi.n	800541c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005416:	2308      	movs	r3, #8
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e00f      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a1a      	ldr	r2, [pc, #104]	@ (8005488 <USB_SetTurnaroundTime+0x130>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d906      	bls.n	8005432 <USB_SetTurnaroundTime+0xda>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a19      	ldr	r2, [pc, #100]	@ (800548c <USB_SetTurnaroundTime+0x134>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d202      	bcs.n	8005432 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800542c:	2307      	movs	r3, #7
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e004      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005432:	2306      	movs	r3, #6
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e001      	b.n	800543c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005438:	2309      	movs	r3, #9
 800543a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005454:	431a      	orrs	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	00d8acbf 	.word	0x00d8acbf
 800546c:	00e4e1c0 	.word	0x00e4e1c0
 8005470:	00f42400 	.word	0x00f42400
 8005474:	01067380 	.word	0x01067380
 8005478:	011a499f 	.word	0x011a499f
 800547c:	01312cff 	.word	0x01312cff
 8005480:	014ca43f 	.word	0x014ca43f
 8005484:	016e3600 	.word	0x016e3600
 8005488:	01a6ab1f 	.word	0x01a6ab1f
 800548c:	01e84800 	.word	0x01e84800

08005490 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054aa:	d901      	bls.n	80054b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e01b      	b.n	80054e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	daf2      	bge.n	800549e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	019b      	lsls	r3, r3, #6
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054d4:	d901      	bls.n	80054da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e006      	b.n	80054e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d0f0      	beq.n	80054c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 0306 	and.w	r3, r3, #6
 800550c:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d002      	beq.n	800551a <USB_GetDevSpeed+0x26>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d102      	bne.n	8005520 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800551a:	2302      	movs	r3, #2
 800551c:	75fb      	strb	r3, [r7, #23]
 800551e:	e001      	b.n	8005524 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005520:	230f      	movs	r3, #15
 8005522:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d13a      	bne.n	80055c4 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	2101      	movs	r1, #1
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800556c:	4313      	orrs	r3, r2
 800556e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d155      	bne.n	8005632 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055a2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	059b      	lsls	r3, r3, #22
 80055a8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055aa:	4313      	orrs	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e036      	b.n	8005632 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f303 	lsl.w	r3, r1, r3
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	68f9      	ldr	r1, [r7, #12]
 80055de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11a      	bne.n	8005632 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005618:	430b      	orrs	r3, r1
 800561a:	4313      	orrs	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	440a      	add	r2, r1
 8005624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005630:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 812d 	bne.w	80058b8 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d132      	bne.n	80056cc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005680:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005684:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c4:	0cdb      	lsrs	r3, r3, #19
 80056c6:	04db      	lsls	r3, r3, #19
 80056c8:	6113      	str	r3, [r2, #16]
 80056ca:	e097      	b.n	80057fc <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e6:	0cdb      	lsrs	r3, r3, #19
 80056e8:	04db      	lsls	r3, r3, #19
 80056ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005706:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800570a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800570e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d11a      	bne.n	800574c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	d903      	bls.n	800572a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005748:	6113      	str	r3, [r2, #16]
 800574a:	e044      	b.n	80057d6 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4413      	add	r3, r2
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	89fb      	ldrh	r3, [r7, #14]
 8005772:	04d9      	lsls	r1, r3, #19
 8005774:	4b8f      	ldr	r3, [pc, #572]	@ (80059b4 <USB_EPStartXfer+0x374>)
 8005776:	400b      	ands	r3, r1
 8005778:	6939      	ldr	r1, [r7, #16]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	6979      	ldr	r1, [r7, #20]
 800577e:	4401      	add	r1, r0
 8005780:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d122      	bne.n	80057d6 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	89fb      	ldrh	r3, [r7, #14]
 80057c0:	075b      	lsls	r3, r3, #29
 80057c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80057c6:	6939      	ldr	r1, [r7, #16]
 80057c8:	0148      	lsls	r0, r1, #5
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	4401      	add	r1, r0
 80057ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ec:	6939      	ldr	r1, [r7, #16]
 80057ee:	0148      	lsls	r0, r1, #5
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	4401      	add	r1, r0
 80057f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057f8:	4313      	orrs	r3, r2
 80057fa:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005816:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800581a:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	791b      	ldrb	r3, [r3, #4]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d015      	beq.n	8005850 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 813a 	beq.w	8005aa2 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	2101      	movs	r1, #1
 8005840:	fa01 f303 	lsl.w	r3, r1, r3
 8005844:	6979      	ldr	r1, [r7, #20]
 8005846:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800584a:	4313      	orrs	r3, r2
 800584c:	634b      	str	r3, [r1, #52]	@ 0x34
 800584e:	e128      	b.n	8005aa2 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800587a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e00f      	b.n	80058a2 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a0:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68d9      	ldr	r1, [r3, #12]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9a7 	bl	8005c04 <USB_WritePacket>
 80058b6:	e0f4      	b.n	8005aa2 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058d2:	0cdb      	lsrs	r3, r3, #19
 80058d4:	04db      	lsls	r3, r3, #19
 80058d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d12f      	bne.n	8005962 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005930:	6939      	ldr	r1, [r7, #16]
 8005932:	0148      	lsls	r0, r1, #5
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	4401      	add	r1, r0
 8005938:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800595a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800595e:	6113      	str	r3, [r2, #16]
 8005960:	e062      	b.n	8005a28 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d126      	bne.n	80059b8 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005980:	6939      	ldr	r1, [r7, #16]
 8005982:	0148      	lsls	r0, r1, #5
 8005984:	6979      	ldr	r1, [r7, #20]
 8005986:	4401      	add	r1, r0
 8005988:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800598c:	4313      	orrs	r3, r2
 800598e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059ae:	6113      	str	r3, [r2, #16]
 80059b0:	e03a      	b.n	8005a28 <USB_EPStartXfer+0x3e8>
 80059b2:	bf00      	nop
 80059b4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	1e5a      	subs	r2, r3, #1
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	89fa      	ldrh	r2, [r7, #14]
 80059d4:	fb03 f202 	mul.w	r2, r3, r2
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	89fb      	ldrh	r3, [r7, #14]
 80059ec:	04d9      	lsls	r1, r3, #19
 80059ee:	4b2f      	ldr	r3, [pc, #188]	@ (8005aac <USB_EPStartXfer+0x46c>)
 80059f0:	400b      	ands	r3, r1
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	0148      	lsls	r0, r1, #5
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	4401      	add	r1, r0
 80059fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059fe:	4313      	orrs	r3, r2
 8005a00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a18:	6939      	ldr	r1, [r7, #16]
 8005a1a:	0148      	lsls	r0, r1, #5
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	4401      	add	r1, r0
 8005a20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a24:	4313      	orrs	r3, r2
 8005a26:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d128      	bne.n	8005a82 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d110      	bne.n	8005a62 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e00f      	b.n	8005a82 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a80:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	1ff80000 	.word	0x1ff80000

08005ab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d14a      	bne.n	8005b64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae6:	f040 8086 	bne.w	8005bf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d902      	bls.n	8005b48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
          break;
 8005b46:	e056      	b.n	8005bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b60:	d0e7      	beq.n	8005b32 <USB_EPStopXfer+0x82>
 8005b62:	e048      	b.n	8005bf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b7c:	d13b      	bne.n	8005bf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d902      	bls.n	8005bdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bda:	e00c      	b.n	8005bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bf4:	d0e7      	beq.n	8005bc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	@ 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	460b      	mov	r3, r1
 8005c14:	71fb      	strb	r3, [r7, #7]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005c22:	88bb      	ldrh	r3, [r7, #4]
 8005c24:	3303      	adds	r3, #3
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e018      	b.n	8005c62 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	031a      	lsls	r2, r3, #12
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d3e2      	bcc.n	8005c30 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3724      	adds	r7, #36	@ 0x24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b08b      	sub	sp, #44	@ 0x2c
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	089b      	lsrs	r3, r3, #2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	e014      	b.n	8005cce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	3301      	adds	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	623b      	str	r3, [r7, #32]
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d3e6      	bcc.n	8005ca4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cd6:	8bfb      	ldrh	r3, [r7, #30]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	701a      	strb	r2, [r3, #0]
      i++;
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	3301      	adds	r3, #1
 8005d06:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d0e:	8bfb      	ldrh	r3, [r7, #30]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d14:	8bfb      	ldrh	r3, [r7, #30]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1ea      	bne.n	8005cf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	372c      	adds	r7, #44	@ 0x2c
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d12c      	bne.n	8005d9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	db12      	blt.n	8005d7c <USB_EPSetStall+0x54>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00f      	beq.n	8005d7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e02b      	b.n	8005df6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	db12      	blt.n	8005dd6 <USB_EPSetStall+0xae>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005dd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005df4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d128      	bne.n	8005e72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	791b      	ldrb	r3, [r3, #4]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d003      	beq.n	8005e50 <USB_EPClearStall+0x4c>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	791b      	ldrb	r3, [r3, #4]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d138      	bne.n	8005ec2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e027      	b.n	8005ec2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	791b      	ldrb	r3, [r3, #4]
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d003      	beq.n	8005ea2 <USB_EPClearStall+0x9e>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	791b      	ldrb	r3, [r3, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d10f      	bne.n	8005ec2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ef2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f34:	68fb      	ldr	r3, [r7, #12]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	0c1b      	lsrs	r3, r3, #16
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	4013      	ands	r3, r2
 8005f98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	b29b      	uxth	r3, r3
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006008:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	b2db      	uxtb	r3, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4013      	ands	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006034:	68bb      	ldr	r3, [r7, #8]
}
 8006036:	4618      	mov	r0, r3
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0301 	and.w	r3, r3, #1
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006078:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	333c      	adds	r3, #60	@ 0x3c
 80060b6:	3304      	adds	r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4a1c      	ldr	r2, [pc, #112]	@ (8006130 <USB_EP0_OutStart+0x8c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d90a      	bls.n	80060da <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060d4:	d101      	bne.n	80060da <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e024      	b.n	8006124 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006108:	f043 0318 	orr.w	r3, r3, #24
 800610c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006120:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	4f54300a 	.word	0x4f54300a

08006134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4611      	mov	r1, r2
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	4611      	mov	r1, r2
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f8e2 	bl	8007392 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d01a      	beq.n	8006228 <USBD_LL_SetupStage+0x72>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d822      	bhi.n	800623c <USBD_LL_SetupStage+0x86>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <USBD_LL_SetupStage+0x4a>
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d00a      	beq.n	8006214 <USBD_LL_SetupStage+0x5e>
 80061fe:	e01d      	b.n	800623c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb0f 	bl	800682c <USBD_StdDevReq>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
      break;
 8006212:	e020      	b.n	8006256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fb77 	bl	8006910 <USBD_StdItfReq>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
      break;
 8006226:	e016      	b.n	8006256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fbd9 	bl	80069e8 <USBD_StdEPReq>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
      break;
 800623a:	e00c      	b.n	8006256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006242:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 fa8e 	bl	800776c <USBD_LL_StallEP>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
      break;
 8006254:	bf00      	nop
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	460b      	mov	r3, r1
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d16e      	bne.n	8006356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800627e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006286:	2b03      	cmp	r3, #3
 8006288:	f040 8098 	bne.w	80063bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	429a      	cmp	r2, r3
 8006296:	d913      	bls.n	80062c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bf28      	it	cs
 80062b2:	4613      	movcs	r3, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f001 f8e1 	bl	8007480 <USBD_CtlContinueRx>
 80062be:	e07d      	b.n	80063bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d014      	beq.n	80062f8 <USBD_LL_DataOutStage+0x98>
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d81d      	bhi.n	800630e <USBD_LL_DataOutStage+0xae>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <USBD_LL_DataOutStage+0x7c>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d003      	beq.n	80062e2 <USBD_LL_DataOutStage+0x82>
 80062da:	e018      	b.n	800630e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	75bb      	strb	r3, [r7, #22]
            break;
 80062e0:	e018      	b.n	8006314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fa64 	bl	80067ba <USBD_CoreFindIF>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75bb      	strb	r3, [r7, #22]
            break;
 80062f6:	e00d      	b.n	8006314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	4619      	mov	r1, r3
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fa66 	bl	80067d4 <USBD_CoreFindEP>
 8006308:	4603      	mov	r3, r0
 800630a:	75bb      	strb	r3, [r7, #22]
            break;
 800630c:	e002      	b.n	8006314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	75bb      	strb	r3, [r7, #22]
            break;
 8006312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006314:	7dbb      	ldrb	r3, [r7, #22]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d119      	bne.n	800634e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d113      	bne.n	800634e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006326:	7dba      	ldrb	r2, [r7, #22]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	32ae      	adds	r2, #174	@ 0xae
 800632c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006336:	7dba      	ldrb	r2, [r7, #22]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800633e:	7dba      	ldrb	r2, [r7, #22]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	32ae      	adds	r2, #174	@ 0xae
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 f8a7 	bl	80074a2 <USBD_CtlSendStatus>
 8006354:	e032      	b.n	80063bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fa37 	bl	80067d4 <USBD_CoreFindEP>
 8006366:	4603      	mov	r3, r0
 8006368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800636a:	7dbb      	ldrb	r3, [r7, #22]
 800636c:	2bff      	cmp	r3, #255	@ 0xff
 800636e:	d025      	beq.n	80063bc <USBD_LL_DataOutStage+0x15c>
 8006370:	7dbb      	ldrb	r3, [r7, #22]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d122      	bne.n	80063bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d117      	bne.n	80063b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006382:	7dba      	ldrb	r2, [r7, #22]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	32ae      	adds	r2, #174	@ 0xae
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00f      	beq.n	80063b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006392:	7dba      	ldrb	r2, [r7, #22]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800639a:	7dba      	ldrb	r2, [r7, #22]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	32ae      	adds	r2, #174	@ 0xae
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	7afa      	ldrb	r2, [r7, #11]
 80063a8:	4611      	mov	r1, r2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	e000      	b.n	80063be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b086      	sub	sp, #24
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	460b      	mov	r3, r1
 80063d0:	607a      	str	r2, [r7, #4]
 80063d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d16f      	bne.n	80064ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3314      	adds	r3, #20
 80063de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d15a      	bne.n	80064a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d914      	bls.n	8006420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	461a      	mov	r2, r3
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f001 f826 	bl	800745e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006412:	2300      	movs	r3, #0
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f001 faad 	bl	8007978 <USBD_LL_PrepareReceive>
 800641e:	e03f      	b.n	80064a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	d11c      	bne.n	8006466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006434:	429a      	cmp	r2, r3
 8006436:	d316      	bcc.n	8006466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006442:	429a      	cmp	r2, r3
 8006444:	d20f      	bcs.n	8006466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f001 f807 	bl	800745e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006458:	2300      	movs	r3, #0
 800645a:	2200      	movs	r2, #0
 800645c:	2100      	movs	r1, #0
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f001 fa8a 	bl	8007978 <USBD_LL_PrepareReceive>
 8006464:	e01c      	b.n	80064a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b03      	cmp	r3, #3
 8006470:	d10f      	bne.n	8006492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006492:	2180      	movs	r1, #128	@ 0x80
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f001 f969 	bl	800776c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f001 f814 	bl	80074c8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d03a      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fe42 	bl	8006134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064b8:	e032      	b.n	8006520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4619      	mov	r1, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f985 	bl	80067d4 <USBD_CoreFindEP>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2bff      	cmp	r3, #255	@ 0xff
 80064d2:	d025      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d122      	bne.n	8006520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d11c      	bne.n	8006520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80064e6:	7dfa      	ldrb	r2, [r7, #23]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	32ae      	adds	r2, #174	@ 0xae
 80064ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d014      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80064f6:	7dfa      	ldrb	r2, [r7, #23]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80064fe:	7dfa      	ldrb	r2, [r7, #23]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	32ae      	adds	r2, #174	@ 0xae
 8006504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	7afa      	ldrb	r2, [r7, #11]
 800650c:	4611      	mov	r1, r2
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	4798      	blx	r3
 8006512:	4603      	mov	r3, r0
 8006514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800651c:	7dbb      	ldrb	r3, [r7, #22]
 800651e:	e000      	b.n	8006522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d014      	beq.n	8006590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6852      	ldr	r2, [r2, #4]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	4611      	mov	r1, r2
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006590:	2340      	movs	r3, #64	@ 0x40
 8006592:	2200      	movs	r2, #0
 8006594:	2100      	movs	r1, #0
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 f8aa 	bl	80076f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065ac:	2340      	movs	r3, #64	@ 0x40
 80065ae:	2200      	movs	r2, #0
 80065b0:	2180      	movs	r1, #128	@ 0x80
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f89c 	bl	80076f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2240      	movs	r2, #64	@ 0x40
 80065c2:	621a      	str	r2, [r3, #32]

  return ret;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d006      	beq.n	8006610 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006608:	b2da      	uxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2204      	movs	r2, #4
 8006614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b04      	cmp	r3, #4
 8006638:	d106      	bne.n	8006648 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006640:	b2da      	uxtb	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b03      	cmp	r3, #3
 8006668:	d110      	bne.n	800668c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32ae      	adds	r2, #174	@ 0xae
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e01c      	b.n	80066f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d115      	bne.n	80066f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32ae      	adds	r2, #174	@ 0xae
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32ae      	adds	r2, #174	@ 0xae
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	4611      	mov	r1, r2
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	32ae      	adds	r2, #174	@ 0xae
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	e01c      	b.n	8006756 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b03      	cmp	r3, #3
 8006726:	d115      	bne.n	8006754 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32ae      	adds	r2, #174	@ 0xae
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	32ae      	adds	r2, #174	@ 0xae
 8006746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	4611      	mov	r1, r2
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6852      	ldr	r2, [r2, #4]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	4611      	mov	r1, r2
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067ac:	2303      	movs	r3, #3
 80067ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3301      	adds	r3, #1
 8006804:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800680c:	8a3b      	ldrh	r3, [r7, #16]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	b21a      	sxth	r2, r3
 8006812:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006816:	4313      	orrs	r3, r2
 8006818:	b21b      	sxth	r3, r3
 800681a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800681c:	89fb      	ldrh	r3, [r7, #14]
}
 800681e:	4618      	mov	r0, r3
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006842:	2b40      	cmp	r3, #64	@ 0x40
 8006844:	d005      	beq.n	8006852 <USBD_StdDevReq+0x26>
 8006846:	2b40      	cmp	r3, #64	@ 0x40
 8006848:	d857      	bhi.n	80068fa <USBD_StdDevReq+0xce>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00f      	beq.n	800686e <USBD_StdDevReq+0x42>
 800684e:	2b20      	cmp	r3, #32
 8006850:	d153      	bne.n	80068fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	32ae      	adds	r2, #174	@ 0xae
 800685c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
      break;
 800686c:	e04a      	b.n	8006904 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b09      	cmp	r3, #9
 8006874:	d83b      	bhi.n	80068ee <USBD_StdDevReq+0xc2>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <USBD_StdDevReq+0x50>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068d1 	.word	0x080068d1
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080068ef 	.word	0x080068ef
 8006888:	080068db 	.word	0x080068db
 800688c:	080068ef 	.word	0x080068ef
 8006890:	080068af 	.word	0x080068af
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068ef 	.word	0x080068ef
 800689c:	080068c7 	.word	0x080068c7
 80068a0:	080068b9 	.word	0x080068b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa3c 	bl	8006d24 <USBD_GetDescriptor>
          break;
 80068ac:	e024      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fbcb 	bl	800704c <USBD_SetAddress>
          break;
 80068b6:	e01f      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc0a 	bl	80070d4 <USBD_SetConfig>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
          break;
 80068c4:	e018      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fcad 	bl	8007228 <USBD_GetConfig>
          break;
 80068ce:	e013      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fcde 	bl	8007294 <USBD_GetStatus>
          break;
 80068d8:	e00e      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fd0d 	bl	80072fc <USBD_SetFeature>
          break;
 80068e2:	e009      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fd31 	bl	800734e <USBD_ClrFeature>
          break;
 80068ec:	e004      	b.n	80068f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fd88 	bl	8007406 <USBD_CtlError>
          break;
 80068f6:	bf00      	nop
      }
      break;
 80068f8:	e004      	b.n	8006904 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fd82 	bl	8007406 <USBD_CtlError>
      break;
 8006902:	bf00      	nop
  }

  return ret;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop

08006910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006926:	2b40      	cmp	r3, #64	@ 0x40
 8006928:	d005      	beq.n	8006936 <USBD_StdItfReq+0x26>
 800692a:	2b40      	cmp	r3, #64	@ 0x40
 800692c:	d852      	bhi.n	80069d4 <USBD_StdItfReq+0xc4>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <USBD_StdItfReq+0x26>
 8006932:	2b20      	cmp	r3, #32
 8006934:	d14e      	bne.n	80069d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800693c:	b2db      	uxtb	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	2b02      	cmp	r3, #2
 8006942:	d840      	bhi.n	80069c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	889b      	ldrh	r3, [r3, #4]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d836      	bhi.n	80069bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	889b      	ldrh	r3, [r3, #4]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff ff2f 	bl	80067ba <USBD_CoreFindIF>
 800695c:	4603      	mov	r3, r0
 800695e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2bff      	cmp	r3, #255	@ 0xff
 8006964:	d01d      	beq.n	80069a2 <USBD_StdItfReq+0x92>
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d11a      	bne.n	80069a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800696c:	7bba      	ldrb	r2, [r7, #14]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32ae      	adds	r2, #174	@ 0xae
 8006972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800697c:	7bba      	ldrb	r2, [r7, #14]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006984:	7bba      	ldrb	r2, [r7, #14]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32ae      	adds	r2, #174	@ 0xae
 800698a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800699a:	e004      	b.n	80069a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800699c:	2303      	movs	r3, #3
 800699e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069a0:	e001      	b.n	80069a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069a2:	2303      	movs	r3, #3
 80069a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88db      	ldrh	r3, [r3, #6]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d110      	bne.n	80069d0 <USBD_StdItfReq+0xc0>
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fd74 	bl	80074a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069ba:	e009      	b.n	80069d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fd21 	bl	8007406 <USBD_CtlError>
          break;
 80069c4:	e004      	b.n	80069d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd1c 	bl	8007406 <USBD_CtlError>
          break;
 80069ce:	e000      	b.n	80069d2 <USBD_StdItfReq+0xc2>
          break;
 80069d0:	bf00      	nop
      }
      break;
 80069d2:	e004      	b.n	80069de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fd15 	bl	8007406 <USBD_CtlError>
      break;
 80069dc:	bf00      	nop
  }

  return ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	889b      	ldrh	r3, [r3, #4]
 80069fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	d007      	beq.n	8006a18 <USBD_StdEPReq+0x30>
 8006a08:	2b40      	cmp	r3, #64	@ 0x40
 8006a0a:	f200 817f 	bhi.w	8006d0c <USBD_StdEPReq+0x324>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02a      	beq.n	8006a68 <USBD_StdEPReq+0x80>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	f040 817a 	bne.w	8006d0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fed9 	bl	80067d4 <USBD_CoreFindEP>
 8006a22:	4603      	mov	r3, r0
 8006a24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a26:	7b7b      	ldrb	r3, [r7, #13]
 8006a28:	2bff      	cmp	r3, #255	@ 0xff
 8006a2a:	f000 8174 	beq.w	8006d16 <USBD_StdEPReq+0x32e>
 8006a2e:	7b7b      	ldrb	r3, [r7, #13]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f040 8170 	bne.w	8006d16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a36:	7b7a      	ldrb	r2, [r7, #13]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a3e:	7b7a      	ldrb	r2, [r7, #13]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	32ae      	adds	r2, #174	@ 0xae
 8006a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8163 	beq.w	8006d16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a50:	7b7a      	ldrb	r2, [r7, #13]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32ae      	adds	r2, #174	@ 0xae
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a66:	e156      	b.n	8006d16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d008      	beq.n	8006a82 <USBD_StdEPReq+0x9a>
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	f300 8145 	bgt.w	8006d00 <USBD_StdEPReq+0x318>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 809b 	beq.w	8006bb2 <USBD_StdEPReq+0x1ca>
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d03c      	beq.n	8006afa <USBD_StdEPReq+0x112>
 8006a80:	e13e      	b.n	8006d00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d002      	beq.n	8006a94 <USBD_StdEPReq+0xac>
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d016      	beq.n	8006ac0 <USBD_StdEPReq+0xd8>
 8006a92:	e02c      	b.n	8006aee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00d      	beq.n	8006ab6 <USBD_StdEPReq+0xce>
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	2b80      	cmp	r3, #128	@ 0x80
 8006a9e:	d00a      	beq.n	8006ab6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fe61 	bl	800776c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aaa:	2180      	movs	r1, #128	@ 0x80
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fe5d 	bl	800776c <USBD_LL_StallEP>
 8006ab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ab4:	e020      	b.n	8006af8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fca4 	bl	8007406 <USBD_CtlError>
              break;
 8006abe:	e01b      	b.n	8006af8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	885b      	ldrh	r3, [r3, #2]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10e      	bne.n	8006ae6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <USBD_StdEPReq+0xfe>
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b80      	cmp	r3, #128	@ 0x80
 8006ad2:	d008      	beq.n	8006ae6 <USBD_StdEPReq+0xfe>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fe43 	bl	800776c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fcdb 	bl	80074a2 <USBD_CtlSendStatus>

              break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fc88 	bl	8007406 <USBD_CtlError>
              break;
 8006af6:	bf00      	nop
          }
          break;
 8006af8:	e107      	b.n	8006d0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d002      	beq.n	8006b0c <USBD_StdEPReq+0x124>
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d016      	beq.n	8006b38 <USBD_StdEPReq+0x150>
 8006b0a:	e04b      	b.n	8006ba4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <USBD_StdEPReq+0x146>
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b80      	cmp	r3, #128	@ 0x80
 8006b16:	d00a      	beq.n	8006b2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fe25 	bl	800776c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b22:	2180      	movs	r1, #128	@ 0x80
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fe21 	bl	800776c <USBD_LL_StallEP>
 8006b2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b2c:	e040      	b.n	8006bb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fc68 	bl	8007406 <USBD_CtlError>
              break;
 8006b36:	e03b      	b.n	8006bb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	885b      	ldrh	r3, [r3, #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d136      	bne.n	8006bae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fe42 	bl	80077d8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fca4 	bl	80074a2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe38 	bl	80067d4 <USBD_CoreFindEP>
 8006b64:	4603      	mov	r3, r0
 8006b66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b68:	7b7b      	ldrb	r3, [r7, #13]
 8006b6a:	2bff      	cmp	r3, #255	@ 0xff
 8006b6c:	d01f      	beq.n	8006bae <USBD_StdEPReq+0x1c6>
 8006b6e:	7b7b      	ldrb	r3, [r7, #13]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11c      	bne.n	8006bae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b74:	7b7a      	ldrb	r2, [r7, #13]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b7c:	7b7a      	ldrb	r2, [r7, #13]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	32ae      	adds	r2, #174	@ 0xae
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b8c:	7b7a      	ldrb	r2, [r7, #13]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32ae      	adds	r2, #174	@ 0xae
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ba2:	e004      	b.n	8006bae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fc2d 	bl	8007406 <USBD_CtlError>
              break;
 8006bac:	e000      	b.n	8006bb0 <USBD_StdEPReq+0x1c8>
              break;
 8006bae:	bf00      	nop
          }
          break;
 8006bb0:	e0ab      	b.n	8006d0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d002      	beq.n	8006bc4 <USBD_StdEPReq+0x1dc>
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d032      	beq.n	8006c28 <USBD_StdEPReq+0x240>
 8006bc2:	e097      	b.n	8006cf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <USBD_StdEPReq+0x1f2>
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	2b80      	cmp	r3, #128	@ 0x80
 8006bce:	d004      	beq.n	8006bda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fc17 	bl	8007406 <USBD_CtlError>
                break;
 8006bd8:	e091      	b.n	8006cfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da0b      	bge.n	8006bfa <USBD_StdEPReq+0x212>
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	3310      	adds	r3, #16
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	e00b      	b.n	8006c12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	3304      	adds	r3, #4
 8006c12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc01 	bl	8007428 <USBD_CtlSendData>
              break;
 8006c26:	e06a      	b.n	8006cfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da11      	bge.n	8006c54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	f003 020f 	and.w	r2, r3, #15
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	3324      	adds	r3, #36	@ 0x24
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d117      	bne.n	8006c7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fbda 	bl	8007406 <USBD_CtlError>
                  break;
 8006c52:	e054      	b.n	8006cfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	f003 020f 	and.w	r2, r3, #15
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fbc7 	bl	8007406 <USBD_CtlError>
                  break;
 8006c78:	e041      	b.n	8006cfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da0b      	bge.n	8006c9a <USBD_StdEPReq+0x2b2>
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	3310      	adds	r3, #16
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	3304      	adds	r3, #4
 8006c98:	e00b      	b.n	8006cb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <USBD_StdEPReq+0x2d8>
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b80      	cmp	r3, #128	@ 0x80
 8006cbe:	d103      	bne.n	8006cc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e00e      	b.n	8006ce6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fdb9 	bl	8007844 <USBD_LL_IsStallEP>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e002      	b.n	8006ce6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fb9b 	bl	8007428 <USBD_CtlSendData>
              break;
 8006cf2:	e004      	b.n	8006cfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb85 	bl	8007406 <USBD_CtlError>
              break;
 8006cfc:	bf00      	nop
          }
          break;
 8006cfe:	e004      	b.n	8006d0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fb7f 	bl	8007406 <USBD_CtlError>
          break;
 8006d08:	bf00      	nop
      }
      break;
 8006d0a:	e005      	b.n	8006d18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fb79 	bl	8007406 <USBD_CtlError>
      break;
 8006d14:	e000      	b.n	8006d18 <USBD_StdEPReq+0x330>
      break;
 8006d16:	bf00      	nop
  }

  return ret;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	885b      	ldrh	r3, [r3, #2]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	2b0e      	cmp	r3, #14
 8006d46:	f200 8152 	bhi.w	8006fee <USBD_GetDescriptor+0x2ca>
 8006d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <USBD_GetDescriptor+0x2c>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006dd9 	.word	0x08006dd9
 8006d58:	08006e19 	.word	0x08006e19
 8006d5c:	08006fef 	.word	0x08006fef
 8006d60:	08006fef 	.word	0x08006fef
 8006d64:	08006f8f 	.word	0x08006f8f
 8006d68:	08006fbb 	.word	0x08006fbb
 8006d6c:	08006fef 	.word	0x08006fef
 8006d70:	08006fef 	.word	0x08006fef
 8006d74:	08006fef 	.word	0x08006fef
 8006d78:	08006fef 	.word	0x08006fef
 8006d7c:	08006fef 	.word	0x08006fef
 8006d80:	08006fef 	.word	0x08006fef
 8006d84:	08006fef 	.word	0x08006fef
 8006d88:	08006d8d 	.word	0x08006d8d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	7c12      	ldrb	r2, [r2, #16]
 8006da4:	f107 0108 	add.w	r1, r7, #8
 8006da8:	4610      	mov	r0, r2
 8006daa:	4798      	blx	r3
 8006dac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dae:	e126      	b.n	8006ffe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fb27 	bl	8007406 <USBD_CtlError>
        err++;
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	72fb      	strb	r3, [r7, #11]
      break;
 8006dbe:	e11e      	b.n	8006ffe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
      break;
 8006dd6:	e112      	b.n	8006ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7c1b      	ldrb	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10d      	bne.n	8006dfc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	f107 0208 	add.w	r2, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	2202      	movs	r2, #2
 8006df8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dfa:	e100      	b.n	8006ffe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	2202      	movs	r2, #2
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e0f2      	b.n	8006ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	f200 80ac 	bhi.w	8006f7c <USBD_GetDescriptor+0x258>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <USBD_GetDescriptor+0x108>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e45 	.word	0x08006e45
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006ead 	.word	0x08006ead
 8006e38:	08006ee1 	.word	0x08006ee1
 8006e3c:	08006f15 	.word	0x08006f15
 8006e40:	08006f49 	.word	0x08006f49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	7c12      	ldrb	r2, [r2, #16]
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e66:	e091      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 facb 	bl	8007406 <USBD_CtlError>
            err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
          break;
 8006e76:	e089      	b.n	8006f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9a:	e077      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fab1 	bl	8007406 <USBD_CtlError>
            err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eaa:	e06f      	b.n	8006f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7c12      	ldrb	r2, [r2, #16]
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ece:	e05d      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa97 	bl	8007406 <USBD_CtlError>
            err++;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	3301      	adds	r3, #1
 8006edc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ede:	e055      	b.n	8006f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e043      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa7d 	bl	8007406 <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e03b      	b.n	8006f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e029      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa63 	bl	8007406 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e021      	b.n	8006f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6a:	e00f      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa49 	bl	8007406 <USBD_CtlError>
            err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7a:	e007      	b.n	8006f8c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa41 	bl	8007406 <USBD_CtlError>
          err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f8a:	bf00      	nop
      }
      break;
 8006f8c:	e037      	b.n	8006ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7c1b      	ldrb	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	f107 0208 	add.w	r2, r7, #8
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4798      	blx	r3
 8006fa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa8:	e029      	b.n	8006ffe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fa2a 	bl	8007406 <USBD_CtlError>
        err++;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb8:	e021      	b.n	8006ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7c1b      	ldrb	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fca:	f107 0208 	add.w	r2, r7, #8
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4798      	blx	r3
 8006fd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	2207      	movs	r2, #7
 8006fda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fdc:	e00f      	b.n	8006ffe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa10 	bl	8007406 <USBD_CtlError>
        err++;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	72fb      	strb	r3, [r7, #11]
      break;
 8006fec:	e007      	b.n	8006ffe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa08 	bl	8007406 <USBD_CtlError>
      err++;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8006ffc:	bf00      	nop
  }

  if (err != 0U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11e      	bne.n	8007042 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	88db      	ldrh	r3, [r3, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800700c:	893b      	ldrh	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88da      	ldrh	r2, [r3, #6]
 8007016:	893b      	ldrh	r3, [r7, #8]
 8007018:	4293      	cmp	r3, r2
 800701a:	bf28      	it	cs
 800701c:	4613      	movcs	r3, r2
 800701e:	b29b      	uxth	r3, r3
 8007020:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007022:	893b      	ldrh	r3, [r7, #8]
 8007024:	461a      	mov	r2, r3
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f9fd 	bl	8007428 <USBD_CtlSendData>
 800702e:	e009      	b.n	8007044 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f9e7 	bl	8007406 <USBD_CtlError>
 8007038:	e004      	b.n	8007044 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa31 	bl	80074a2 <USBD_CtlSendStatus>
 8007040:	e000      	b.n	8007044 <USBD_GetDescriptor+0x320>
    return;
 8007042:	bf00      	nop
  }
}
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop

0800704c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	889b      	ldrh	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d131      	bne.n	80070c2 <USBD_SetAddress+0x76>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	88db      	ldrh	r3, [r3, #6]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d12d      	bne.n	80070c2 <USBD_SetAddress+0x76>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	2b7f      	cmp	r3, #127	@ 0x7f
 800706c:	d829      	bhi.n	80070c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d104      	bne.n	8007090 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9bc 	bl	8007406 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708e:	e01d      	b.n	80070cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fbfd 	bl	800789c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9fd 	bl	80074a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b6:	e009      	b.n	80070cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c0:	e004      	b.n	80070cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f99e 	bl	8007406 <USBD_CtlError>
  }
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	4b4e      	ldr	r3, [pc, #312]	@ (8007224 <USBD_SetConfig+0x150>)
 80070ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007224 <USBD_SetConfig+0x150>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d905      	bls.n	8007100 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f985 	bl	8007406 <USBD_CtlError>
    return USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e08c      	b.n	800721a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d002      	beq.n	8007112 <USBD_SetConfig+0x3e>
 800710c:	2b03      	cmp	r3, #3
 800710e:	d029      	beq.n	8007164 <USBD_SetConfig+0x90>
 8007110:	e075      	b.n	80071fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007112:	4b44      	ldr	r3, [pc, #272]	@ (8007224 <USBD_SetConfig+0x150>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d020      	beq.n	800715c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800711a:	4b42      	ldr	r3, [pc, #264]	@ (8007224 <USBD_SetConfig+0x150>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007124:	4b3f      	ldr	r3, [pc, #252]	@ (8007224 <USBD_SetConfig+0x150>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff f80d 	bl	800614a <USBD_SetClassConfig>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f962 	bl	8007406 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800714a:	e065      	b.n	8007218 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9a8 	bl	80074a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2203      	movs	r2, #3
 8007156:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800715a:	e05d      	b.n	8007218 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9a0 	bl	80074a2 <USBD_CtlSendStatus>
      break;
 8007162:	e059      	b.n	8007218 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007164:	4b2f      	ldr	r3, [pc, #188]	@ (8007224 <USBD_SetConfig+0x150>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d112      	bne.n	8007192 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007174:	4b2b      	ldr	r3, [pc, #172]	@ (8007224 <USBD_SetConfig+0x150>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800717e:	4b29      	ldr	r3, [pc, #164]	@ (8007224 <USBD_SetConfig+0x150>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fe fffc 	bl	8006182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f989 	bl	80074a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007190:	e042      	b.n	8007218 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007192:	4b24      	ldr	r3, [pc, #144]	@ (8007224 <USBD_SetConfig+0x150>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	429a      	cmp	r2, r3
 800719e:	d02a      	beq.n	80071f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fe ffea 	bl	8006182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007224 <USBD_SetConfig+0x150>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007224 <USBD_SetConfig+0x150>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fe ffc3 	bl	800614a <USBD_SetClassConfig>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f918 	bl	8007406 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fe ffcf 	bl	8006182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071ec:	e014      	b.n	8007218 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f957 	bl	80074a2 <USBD_CtlSendStatus>
      break;
 80071f4:	e010      	b.n	8007218 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f953 	bl	80074a2 <USBD_CtlSendStatus>
      break;
 80071fc:	e00c      	b.n	8007218 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f900 	bl	8007406 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007206:	4b07      	ldr	r3, [pc, #28]	@ (8007224 <USBD_SetConfig+0x150>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fe ffb8 	bl	8006182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	73fb      	strb	r3, [r7, #15]
      break;
 8007216:	bf00      	nop
  }

  return ret;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000118 	.word	0x20000118

08007228 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d004      	beq.n	8007244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8e2 	bl	8007406 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007242:	e023      	b.n	800728c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	dc02      	bgt.n	8007256 <USBD_GetConfig+0x2e>
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc03      	bgt.n	800725c <USBD_GetConfig+0x34>
 8007254:	e015      	b.n	8007282 <USBD_GetConfig+0x5a>
 8007256:	2b03      	cmp	r3, #3
 8007258:	d00b      	beq.n	8007272 <USBD_GetConfig+0x4a>
 800725a:	e012      	b.n	8007282 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3308      	adds	r3, #8
 8007266:	2201      	movs	r2, #1
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8dc 	bl	8007428 <USBD_CtlSendData>
        break;
 8007270:	e00c      	b.n	800728c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	2201      	movs	r2, #1
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8d4 	bl	8007428 <USBD_CtlSendData>
        break;
 8007280:	e004      	b.n	800728c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8be 	bl	8007406 <USBD_CtlError>
        break;
 800728a:	bf00      	nop
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d81e      	bhi.n	80072ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	88db      	ldrh	r3, [r3, #6]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d004      	beq.n	80072be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8a5 	bl	8007406 <USBD_CtlError>
        break;
 80072bc:	e01a      	b.n	80072f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f043 0202 	orr.w	r2, r3, #2
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	330c      	adds	r3, #12
 80072de:	2202      	movs	r2, #2
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8a0 	bl	8007428 <USBD_CtlSendData>
      break;
 80072e8:	e004      	b.n	80072f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f88a 	bl	8007406 <USBD_CtlError>
      break;
 80072f2:	bf00      	nop
  }
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d107      	bne.n	800731e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8c3 	bl	80074a2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800731c:	e013      	b.n	8007346 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d10b      	bne.n	800733e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	889b      	ldrh	r3, [r3, #4]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	b29b      	uxth	r3, r3
 800732e:	b2da      	uxtb	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8b3 	bl	80074a2 <USBD_CtlSendStatus>
}
 800733c:	e003      	b.n	8007346 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f860 	bl	8007406 <USBD_CtlError>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	2b02      	cmp	r3, #2
 8007364:	d80b      	bhi.n	800737e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d10c      	bne.n	8007388 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f893 	bl	80074a2 <USBD_CtlSendStatus>
      }
      break;
 800737c:	e004      	b.n	8007388 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f840 	bl	8007406 <USBD_CtlError>
      break;
 8007386:	e000      	b.n	800738a <USBD_ClrFeature+0x3c>
      break;
 8007388:	bf00      	nop
  }
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fa16 	bl	80067ee <SWAPBYTE>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fa09 	bl	80067ee <SWAPBYTE>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff f9fc 	bl	80067ee <SWAPBYTE>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	80da      	strh	r2, [r3, #6]
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007410:	2180      	movs	r1, #128	@ 0x80
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9aa 	bl	800776c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9a6 	bl	800776c <USBD_LL_StallEP>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2202      	movs	r2, #2
 8007438:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	2100      	movs	r1, #0
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fa5a 	bl	8007908 <USBD_LL_Transmit>

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fa49 	bl	8007908 <USBD_LL_Transmit>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	2100      	movs	r1, #0
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fa70 	bl	8007978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2204      	movs	r2, #4
 80074ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074b2:	2300      	movs	r3, #0
 80074b4:	2200      	movs	r2, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa25 	bl	8007908 <USBD_LL_Transmit>

  return USBD_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2205      	movs	r2, #5
 80074d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074d8:	2300      	movs	r3, #0
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa4a 	bl	8007978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f7fe fe56 	bl	80061b6 <USBD_LL_SetupStage>
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	4619      	mov	r1, r3
 800753c:	f7fe fe90 	bl	8006260 <USBD_LL_DataOutStage>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3320      	adds	r3, #32
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	4619      	mov	r1, r3
 8007570:	f7fe ff29 	bl	80063c6 <USBD_LL_DataInStage>
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f863 	bl	8006656 <USBD_LL_SOF>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	79db      	ldrb	r3, [r3, #7]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d001      	beq.n	80075b0 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075ac:	f7f9 fb92 	bl	8000cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075b6:	7bfa      	ldrb	r2, [r7, #15]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff f807 	bl	80065ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe ffaf 	bl	800652a <USBD_LL_Reset>
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fff7 	bl	80065ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	7adb      	ldrb	r3, [r3, #11]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007608:	4b04      	ldr	r3, [pc, #16]	@ (800761c <HAL_PCD_SuspendCallback+0x48>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	4a03      	ldr	r2, [pc, #12]	@ (800761c <HAL_PCD_SuspendCallback+0x48>)
 800760e:	f043 0306 	orr.w	r3, r3, #6
 8007612:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	e000ed00 	.word	0xe000ed00

08007620 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7adb      	ldrb	r3, [r3, #11]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d007      	beq.n	8007658 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007648:	4b08      	ldr	r3, [pc, #32]	@ (800766c <HAL_PCD_ResumeCallback+0x4c>)
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	4a07      	ldr	r2, [pc, #28]	@ (800766c <HAL_PCD_ResumeCallback+0x4c>)
 800764e:	f023 0306 	bic.w	r3, r3, #6
 8007652:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007654:	f000 fa16 	bl	8007a84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe ffe1 	bl	8006626 <USBD_LL_Resume>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	e000ed00 	.word	0xe000ed00

08007670 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f837 	bl	80066fa <USBD_LL_IsoOUTIncomplete>
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fff3 	bl	8006696 <USBD_LL_IsoINIncomplete>
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f849 	bl	800675e <USBD_LL_DevConnected>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff f846 	bl	8006774 <USBD_LL_DevDisconnected>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	4608      	mov	r0, r1
 80076fa:	4611      	mov	r1, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	70fb      	strb	r3, [r7, #3]
 8007702:	460b      	mov	r3, r1
 8007704:	70bb      	strb	r3, [r7, #2]
 8007706:	4613      	mov	r3, r2
 8007708:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007718:	78bb      	ldrb	r3, [r7, #2]
 800771a:	883a      	ldrh	r2, [r7, #0]
 800771c:	78f9      	ldrb	r1, [r7, #3]
 800771e:	f7fa fbef 	bl	8001f00 <HAL_PCD_EP_Open>
 8007722:	4603      	mov	r3, r0
 8007724:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d817      	bhi.n	800775c <USBD_LL_OpenEP+0x6c>
 800772c:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <USBD_LL_OpenEP+0x44>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007745 	.word	0x08007745
 8007738:	0800774b 	.word	0x0800774b
 800773c:	08007751 	.word	0x08007751
 8007740:	08007757 	.word	0x08007757
    case HAL_OK :
      usb_status = USBD_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
    break;
 8007748:	e00b      	b.n	8007762 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800774a:	2303      	movs	r3, #3
 800774c:	73fb      	strb	r3, [r7, #15]
    break;
 800774e:	e008      	b.n	8007762 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
    break;
 8007754:	e005      	b.n	8007762 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	73fb      	strb	r3, [r7, #15]
    break;
 800775a:	e002      	b.n	8007762 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	73fb      	strb	r3, [r7, #15]
    break;
 8007760:	bf00      	nop
  }
  return usb_status;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	4611      	mov	r1, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7fa fc85 	bl	800209a <HAL_PCD_EP_SetStall>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b03      	cmp	r3, #3
 8007798:	d816      	bhi.n	80077c8 <USBD_LL_StallEP+0x5c>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <USBD_LL_StallEP+0x34>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077b1 	.word	0x080077b1
 80077a4:	080077b7 	.word	0x080077b7
 80077a8:	080077bd 	.word	0x080077bd
 80077ac:	080077c3 	.word	0x080077c3
    case HAL_OK :
      usb_status = USBD_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
    break;
 80077b4:	e00b      	b.n	80077ce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077b6:	2303      	movs	r3, #3
 80077b8:	73fb      	strb	r3, [r7, #15]
    break;
 80077ba:	e008      	b.n	80077ce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
    break;
 80077c0:	e005      	b.n	80077ce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077c2:	2303      	movs	r3, #3
 80077c4:	73fb      	strb	r3, [r7, #15]
    break;
 80077c6:	e002      	b.n	80077ce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	73fb      	strb	r3, [r7, #15]
    break;
 80077cc:	bf00      	nop
  }
  return usb_status;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fa fcb1 	bl	800215e <HAL_PCD_EP_ClrStall>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d816      	bhi.n	8007834 <USBD_LL_ClearStallEP+0x5c>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <USBD_LL_ClearStallEP+0x34>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800781d 	.word	0x0800781d
 8007810:	08007823 	.word	0x08007823
 8007814:	08007829 	.word	0x08007829
 8007818:	0800782f 	.word	0x0800782f
    case HAL_OK :
      usb_status = USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	e00b      	b.n	800783a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007822:	2303      	movs	r3, #3
 8007824:	73fb      	strb	r3, [r7, #15]
    break;
 8007826:	e008      	b.n	800783a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007828:	2301      	movs	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
    break;
 800782c:	e005      	b.n	800783a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
    break;
 8007832:	e002      	b.n	800783a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	73fb      	strb	r3, [r7, #15]
    break;
 8007838:	bf00      	nop
  }
  return usb_status;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007856:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da0b      	bge.n	8007878 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	4613      	mov	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3316      	adds	r3, #22
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	e00b      	b.n	8007890 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800788e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fa fafc 	bl	8001eb8 <HAL_PCD_SetAddress>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d816      	bhi.n	80078f8 <USBD_LL_SetUSBAddress+0x5c>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <USBD_LL_SetUSBAddress+0x34>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078e1 	.word	0x080078e1
 80078d4:	080078e7 	.word	0x080078e7
 80078d8:	080078ed 	.word	0x080078ed
 80078dc:	080078f3 	.word	0x080078f3
    case HAL_OK :
      usb_status = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
    break;
 80078e4:	e00b      	b.n	80078fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ea:	e008      	b.n	80078fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
    break;
 80078f0:	e005      	b.n	80078fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	73fb      	strb	r3, [r7, #15]
    break;
 80078f6:	e002      	b.n	80078fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	73fb      	strb	r3, [r7, #15]
    break;
 80078fc:	bf00      	nop
  }
  return usb_status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	460b      	mov	r3, r1
 8007916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007926:	7af9      	ldrb	r1, [r7, #11]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	f7fa fb84 	bl	8002038 <HAL_PCD_EP_Transmit>
 8007930:	4603      	mov	r3, r0
 8007932:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007934:	7dbb      	ldrb	r3, [r7, #22]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d816      	bhi.n	8007968 <USBD_LL_Transmit+0x60>
 800793a:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <USBD_LL_Transmit+0x38>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007951 	.word	0x08007951
 8007944:	08007957 	.word	0x08007957
 8007948:	0800795d 	.word	0x0800795d
 800794c:	08007963 	.word	0x08007963
    case HAL_OK :
      usb_status = USBD_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	75fb      	strb	r3, [r7, #23]
    break;
 8007954:	e00b      	b.n	800796e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007956:	2303      	movs	r3, #3
 8007958:	75fb      	strb	r3, [r7, #23]
    break;
 800795a:	e008      	b.n	800796e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
    break;
 8007960:	e005      	b.n	800796e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007962:	2303      	movs	r3, #3
 8007964:	75fb      	strb	r3, [r7, #23]
    break;
 8007966:	e002      	b.n	800796e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007968:	2303      	movs	r3, #3
 800796a:	75fb      	strb	r3, [r7, #23]
    break;
 800796c:	bf00      	nop
  }
  return usb_status;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	460b      	mov	r3, r1
 8007986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007996:	7af9      	ldrb	r1, [r7, #11]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	f7fa fb1a 	bl	8001fd4 <HAL_PCD_EP_Receive>
 80079a0:	4603      	mov	r3, r0
 80079a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80079a4:	7dbb      	ldrb	r3, [r7, #22]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d816      	bhi.n	80079d8 <USBD_LL_PrepareReceive+0x60>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <USBD_LL_PrepareReceive+0x38>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079c1 	.word	0x080079c1
 80079b4:	080079c7 	.word	0x080079c7
 80079b8:	080079cd 	.word	0x080079cd
 80079bc:	080079d3 	.word	0x080079d3
    case HAL_OK :
      usb_status = USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	75fb      	strb	r3, [r7, #23]
    break;
 80079c4:	e00b      	b.n	80079de <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079c6:	2303      	movs	r3, #3
 80079c8:	75fb      	strb	r3, [r7, #23]
    break;
 80079ca:	e008      	b.n	80079de <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
    break;
 80079d0:	e005      	b.n	80079de <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079d2:	2303      	movs	r3, #3
 80079d4:	75fb      	strb	r3, [r7, #23]
    break;
 80079d6:	e002      	b.n	80079de <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	75fb      	strb	r3, [r7, #23]
    break;
 80079dc:	bf00      	nop
  }
  return usb_status;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_PCDEx_LPM_Callback+0x18>
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d01f      	beq.n	8007a3e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80079fe:	e03b      	b.n	8007a78 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7adb      	ldrb	r3, [r3, #11]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007a08:	f000 f83c 	bl	8007a84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a80 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	@ (8007a80 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a12:	f023 0306 	bic.w	r3, r3, #6
 8007a16:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a2a:	f023 0301 	bic.w	r3, r3, #1
 8007a2e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fdf5 	bl	8006626 <USBD_LL_Resume>
    break;
 8007a3c:	e01c      	b.n	8007a78 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fdc6 	bl	80065ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7adb      	ldrb	r3, [r3, #11]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a6a:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	4a04      	ldr	r2, [pc, #16]	@ (8007a80 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a70:	f043 0306 	orr.w	r3, r3, #6
 8007a74:	6113      	str	r3, [r2, #16]
    break;
 8007a76:	bf00      	nop
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	e000ed00 	.word	0xe000ed00

08007a84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007a88:	f7f8 fff6 	bl	8000a78 <SystemClock_Config>
}
 8007a8c:	bf00      	nop
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8007adc <__libc_init_array+0x3c>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	2600      	movs	r6, #0
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae4 <__libc_init_array+0x44>)
 8007ab4:	f000 f818 	bl	8007ae8 <_init>
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	2600      	movs	r6, #0
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	4798      	blx	r3
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	4798      	blx	r3
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	08007b50 	.word	0x08007b50
 8007adc:	08007b50 	.word	0x08007b50
 8007ae0:	08007b50 	.word	0x08007b50
 8007ae4:	08007b54 	.word	0x08007b54

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
