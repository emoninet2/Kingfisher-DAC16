
kingfisher-DAC16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a84c  0800a84c  0000b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8dc  0800a8dc  0000c10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8dc  0800a8dc  0000b8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8e4  0800a8e4  0000c10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8e4  0800a8e4  0000b8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8e8  0800a8e8  0000b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  0800a8ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  2000010c  0800a9f8  0000c10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e94  0800a9f8  0000ce94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa2b  00000000  00000000  0000c13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004806  00000000  00000000  0002bb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00030370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001467  00000000  00000000  00031dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b053  00000000  00000000  00033237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021aa2  00000000  00000000  0005e28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f82  00000000  00000000  0007fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef8  00000000  00000000  00179cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00180bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a834 	.word	0x0800a834

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	0800a834 	.word	0x0800a834

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <DACx1416_nCS>:

extern volatile uint8_t dacUseCRC;
extern SPI_HandleTypeDef hspi1;
extern volatile uint8_t dacTransferComplete;

void DACx1416_nCS(bool value){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	if(value){
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d006      	beq.n	80004d6 <DACx1416_nCS+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d0:	f001 fd44 	bl	8001f5c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
	}
}
 80004d4:	e005      	b.n	80004e2 <DACx1416_nCS+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f001 fd3d 	bl	8001f5c <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <DACx1416_nLDAC>:

void DACx1416_nLDAC(bool value){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	if(value){
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d005      	beq.n	8000508 <DACx1416_nLDAC+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // Set CS high
 80004fc:	2201      	movs	r2, #1
 80004fe:	2120      	movs	r1, #32
 8000500:	4806      	ldr	r0, [pc, #24]	@ (800051c <DACx1416_nLDAC+0x30>)
 8000502:	f001 fd2b 	bl	8001f5c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set CS low
	}
}
 8000506:	e004      	b.n	8000512 <DACx1416_nLDAC+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set CS low
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <DACx1416_nLDAC+0x30>)
 800050e:	f001 fd25 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400

08000520 <DACx1416_nRESET>:
void DACx1416_nRESET(bool value){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	if(value){
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d005      	beq.n	800053c <DACx1416_nRESET+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // Set CS high
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	@ 0x40
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <DACx1416_nRESET+0x30>)
 8000536:	f001 fd11 	bl	8001f5c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set CS low
	}
}
 800053a:	e004      	b.n	8000546 <DACx1416_nRESET+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set CS low
 800053c:	2200      	movs	r2, #0
 800053e:	2140      	movs	r1, #64	@ 0x40
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <DACx1416_nRESET+0x30>)
 8000542:	f001 fd0b 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	48000400 	.word	0x48000400

08000554 <DACx1416_nCLR>:
void DACx1416_nCLR(bool value){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	if(value){
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <DACx1416_nCLR+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // Set CS high
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <DACx1416_nCLR+0x30>)
 800056a:	f001 fcf7 	bl	8001f5c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set CS low
	}
}
 800056e:	e004      	b.n	800057a <DACx1416_nCLR+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set CS low
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <DACx1416_nCLR+0x30>)
 8000576:	f001 fcf1 	bl	8001f5c <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <DACx1416_tgl>:

void DACx1416_tgl(uint8_t value){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (value>>2) & 0x01);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	2104      	movs	r1, #4
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <DACx1416_tgl+0x50>)
 80005a4:	f001 fcda 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, (value>>1) & 0x01);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	085b      	lsrs	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	2102      	movs	r1, #2
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <DACx1416_tgl+0x50>)
 80005ba:	f001 fccf 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (value) & 0x01);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	2101      	movs	r1, #1
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <DACx1416_tgl+0x50>)
 80005cc:	f001 fcc6 	bl	8001f5c <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000400 	.word	0x48000400

080005dc <DACx1416_SPI_transmit>:
//		}
//    }
//}


void DACx1416_SPI_transmit(uint8_t *txBuffer, uint16_t size) {
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	b087      	sub	sp, #28
 80005e2:	af02      	add	r7, sp, #8
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	807b      	strh	r3, [r7, #2]
 80005ea:	466b      	mov	r3, sp
 80005ec:	461e      	mov	r6, r3
    uint8_t rxBuffer[size];  // Dummy receive buffer
 80005ee:	8879      	ldrh	r1, [r7, #2]
 80005f0:	460b      	mov	r3, r1
 80005f2:	3b01      	subs	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	b28b      	uxth	r3, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	4698      	mov	r8, r3
 80005fc:	4691      	mov	r9, r2
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800060a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800060e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000612:	b28b      	uxth	r3, r1
 8000614:	2200      	movs	r2, #0
 8000616:	461c      	mov	r4, r3
 8000618:	4615      	mov	r5, r2
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	00eb      	lsls	r3, r5, #3
 8000624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000628:	00e2      	lsls	r2, r4, #3
 800062a:	460b      	mov	r3, r1
 800062c:	3307      	adds	r3, #7
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	ebad 0d03 	sub.w	sp, sp, r3
 8000636:	ab02      	add	r3, sp, #8
 8000638:	3300      	adds	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]

    // Transmit data and simultaneously receive data (full-duplex)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, 1000) != HAL_OK) {
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000642:	9200      	str	r2, [sp, #0]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <DACx1416_SPI_transmit+0x80>)
 800064a:	f004 fa61 	bl	8004b10 <HAL_SPI_TransmitReceive>
 800064e:	46b5      	mov	sp, r6
        // Communication error
        // Error_Handler();
    }
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800065a:	bf00      	nop
 800065c:	2000014c 	.word	0x2000014c

08000660 <DACx1416_SPI_receive>:


void DACx1416_SPI_receive(uint8_t *rxBuffer,uint16_t size){
 8000660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000664:	b087      	sub	sp, #28
 8000666:	af02      	add	r7, sp, #8
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
 800066e:	466b      	mov	r3, sp
 8000670:	461e      	mov	r6, r3

	uint8_t txBuffer[size];  // Buffer with dummy data
 8000672:	8879      	ldrh	r1, [r7, #2]
 8000674:	460b      	mov	r3, r1
 8000676:	3b01      	subs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	b28b      	uxth	r3, r1
 800067c:	2200      	movs	r2, #0
 800067e:	4698      	mov	r8, r3
 8000680:	4691      	mov	r9, r2
 8000682:	f04f 0200 	mov.w	r2, #0
 8000686:	f04f 0300 	mov.w	r3, #0
 800068a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800068e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000696:	b28b      	uxth	r3, r1
 8000698:	2200      	movs	r2, #0
 800069a:	461c      	mov	r4, r3
 800069c:	4615      	mov	r5, r2
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	00eb      	lsls	r3, r5, #3
 80006a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006ac:	00e2      	lsls	r2, r4, #3
 80006ae:	460b      	mov	r3, r1
 80006b0:	3307      	adds	r3, #7
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	ebad 0d03 	sub.w	sp, sp, r3
 80006ba:	ab02      	add	r3, sp, #8
 80006bc:	3300      	adds	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
	memset(txBuffer, 0x00, size);  // Fill with dummy bytes (0x00 or 0xFF)
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	461a      	mov	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	68b8      	ldr	r0, [r7, #8]
 80006c8:	f00a f888 	bl	800a7dc <memset>

	// Full-duplex transmission and reception (blocking mode)
	if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, 1000) != HAL_OK)
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <DACx1416_SPI_receive+0x8c>)
 80006da:	f004 fa19 	bl	8004b10 <HAL_SPI_TransmitReceive>
 80006de:	46b5      	mov	sp, r6
	{
		// Communication error
		//Error_Handler();
	}

}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006ea:	bf00      	nop
 80006ec:	2000014c 	.word	0x2000014c

080006f0 <DACx1416_SPI_transmitReceive>:


void DACx1416_SPI_transmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80fb      	strh	r3, [r7, #6]


    // Full-duplex transmission and reception (blocking mode)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, 1000) != HAL_OK)
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000704:	9200      	str	r2, [sp, #0]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <DACx1416_SPI_transmitReceive+0x28>)
 800070c:	f004 fa00 	bl	8004b10 <HAL_SPI_TransmitReceive>
    {
        // Communication error
        //Error_Handler();
    }

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000014c 	.word	0x2000014c

0800071c <DACx1416_write_register>:
}




void DACx1416_write_register(DACx1416_HandleTypeDef *dac, DACx1416_register_t reg, uint16_t data){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
 8000728:	4613      	mov	r3, r2
 800072a:	803b      	strh	r3, [r7, #0]
	if (!dacUseCRC){
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <DACx1416_write_register+0xb0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d11d      	bne.n	8000772 <DACx1416_write_register+0x56>
		uint8_t txBuffer[3] = {reg & ~(1<<7) , (data >> 8) & 0xFF, data & 0xFF};
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	753b      	strb	r3, [r7, #20]
 8000740:	883b      	ldrh	r3, [r7, #0]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	757b      	strb	r3, [r7, #21]
 800074a:	883b      	ldrh	r3, [r7, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	75bb      	strb	r3, [r7, #22]
		uint8_t rxBuffer[3];
		dac->nCS(0);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	2000      	movs	r0, #0
 8000756:	4798      	blx	r3
		dac->SPI_transmitReceive(txBuffer, rxBuffer, 3);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f107 0110 	add.w	r1, r7, #16
 8000760:	f107 0014 	add.w	r0, r7, #20
 8000764:	2203      	movs	r2, #3
 8000766:	4798      	blx	r3
		dac->nCS(1);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	2001      	movs	r0, #1
 800076e:	4798      	blx	r3
		dac->SPI_transmitReceive(txBuffer, rxBuffer, 4);
		dac->nCS(1);
	}


}
 8000770:	e028      	b.n	80007c4 <DACx1416_write_register+0xa8>
		uint8_t txBuffer[4] = {reg & ~(1<<7) , (data >> 8) & 0xFF, data & 0xFF, 0};
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000778:	b2db      	uxtb	r3, r3
 800077a:	733b      	strb	r3, [r7, #12]
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	737b      	strb	r3, [r7, #13]
 8000786:	883b      	ldrh	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	73bb      	strb	r3, [r7, #14]
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
		uint8_t crc8 = calculate_crc8(txBuffer, 3);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2103      	movs	r1, #3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fc8c 	bl	80010b4 <calculate_crc8>
 800079c:	4603      	mov	r3, r0
 800079e:	75fb      	strb	r3, [r7, #23]
		txBuffer[3] = crc8;
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	73fb      	strb	r3, [r7, #15]
		dac->nCS(0);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	2000      	movs	r0, #0
 80007aa:	4798      	blx	r3
		dac->SPI_transmitReceive(txBuffer, rxBuffer, 4);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f107 0108 	add.w	r1, r7, #8
 80007b4:	f107 000c 	add.w	r0, r7, #12
 80007b8:	2204      	movs	r2, #4
 80007ba:	4798      	blx	r3
		dac->nCS(1);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	2001      	movs	r0, #1
 80007c2:	4798      	blx	r3
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000025c 	.word	0x2000025c

080007d0 <DACx1416_read_register>:
uint16_t DACx1416_read_register(DACx1416_HandleTypeDef *dac, DACx1416_register_t reg){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	if (!dacUseCRC){
 80007dc:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <DACx1416_read_register+0xf8>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d130      	bne.n	8000848 <DACx1416_read_register+0x78>
		uint8_t txBuffer[3] = {reg | (1<<7) , 0xFF, 0xFF};
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	753b      	strb	r3, [r7, #20]
 80007f0:	23ff      	movs	r3, #255	@ 0xff
 80007f2:	757b      	strb	r3, [r7, #21]
 80007f4:	23ff      	movs	r3, #255	@ 0xff
 80007f6:	75bb      	strb	r3, [r7, #22]
		uint8_t rxBuffer[3];
		dac->nCS(0);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	2000      	movs	r0, #0
 80007fe:	4798      	blx	r3
		dac->SPI_transmitReceive(txBuffer, rxBuffer, 3);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	f107 0014 	add.w	r0, r7, #20
 800080c:	2203      	movs	r2, #3
 800080e:	4798      	blx	r3
		dac->nCS(1);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	2001      	movs	r0, #1
 8000816:	4798      	blx	r3
		dac->nCS(0);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	2000      	movs	r0, #0
 800081e:	4798      	blx	r3
		dac->SPI_receive(rxBuffer, 3);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f107 0210 	add.w	r2, r7, #16
 8000828:	2103      	movs	r1, #3
 800082a:	4610      	mov	r0, r2
 800082c:	4798      	blx	r3
		dac->nCS(1);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2001      	movs	r0, #1
 8000834:	4798      	blx	r3
		return rxBuffer[1]<<8 | rxBuffer[2];
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b21a      	sxth	r2, r3
 800083c:	7cbb      	ldrb	r3, [r7, #18]
 800083e:	b21b      	sxth	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	b21b      	sxth	r3, r3
 8000844:	b29b      	uxth	r3, r3
 8000846:	e03b      	b.n	80008c0 <DACx1416_read_register+0xf0>
	}
	else{
		uint8_t txBuffer[4] = {reg | (1<<7) , 0xFF, 0xFF, 0};
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800084e:	b2db      	uxtb	r3, r3
 8000850:	733b      	strb	r3, [r7, #12]
 8000852:	23ff      	movs	r3, #255	@ 0xff
 8000854:	737b      	strb	r3, [r7, #13]
 8000856:	23ff      	movs	r3, #255	@ 0xff
 8000858:	73bb      	strb	r3, [r7, #14]
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
		uint8_t rxBuffer[4];
		uint8_t crc8 = calculate_crc8(txBuffer, 3);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2103      	movs	r1, #3
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fc25 	bl	80010b4 <calculate_crc8>
 800086a:	4603      	mov	r3, r0
 800086c:	75fb      	strb	r3, [r7, #23]
		txBuffer[3] = crc8;
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	73fb      	strb	r3, [r7, #15]
		dac->nCS(0);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	2000      	movs	r0, #0
 8000878:	4798      	blx	r3
		dac->SPI_transmitReceive(txBuffer, rxBuffer, 4);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f107 0108 	add.w	r1, r7, #8
 8000882:	f107 000c 	add.w	r0, r7, #12
 8000886:	2204      	movs	r2, #4
 8000888:	4798      	blx	r3
		dac->nCS(1);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	2001      	movs	r0, #1
 8000890:	4798      	blx	r3
		dac->nCS(0);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	2000      	movs	r0, #0
 8000898:	4798      	blx	r3
		dac->SPI_receive(rxBuffer, 4);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f107 0208 	add.w	r2, r7, #8
 80008a2:	2104      	movs	r1, #4
 80008a4:	4610      	mov	r0, r2
 80008a6:	4798      	blx	r3
		dac->nCS(1);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	2001      	movs	r0, #1
 80008ae:	4798      	blx	r3
		return rxBuffer[1]<<8 | rxBuffer[2];
 80008b0:	7a7b      	ldrb	r3, [r7, #9]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	7abb      	ldrb	r3, [r7, #10]
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	b29b      	uxth	r3, r3
	}


}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000025c 	.word	0x2000025c

080008cc <DACx1416_get_device_id>:



DACx1416_deviceID_t DACx1416_get_device_id(DACx1416_HandleTypeDef *dac){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	DACx1416_deviceID_t deviceID;
	uint16_t deviceIdVal = DACx1416_read_register(dac,DACx1416_REG_DEVICEID);
 80008d4:	2101      	movs	r1, #1
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff7a 	bl	80007d0 <DACx1416_read_register>
 80008dc:	4603      	mov	r3, r0
 80008de:	82fb      	strh	r3, [r7, #22]
	deviceID.deviceId = (deviceIdVal>>2) & 0x3FFF;
 80008e0:	8afb      	ldrh	r3, [r7, #22]
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	81bb      	strh	r3, [r7, #12]
	deviceID.versionId = deviceIdVal & 0x0003;
 80008e8:	8afb      	ldrh	r3, [r7, #22]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	73bb      	strb	r3, [r7, #14]
	return deviceID;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	2300      	movs	r3, #0
 80008fa:	8a3a      	ldrh	r2, [r7, #16]
 80008fc:	f362 030f 	bfi	r3, r2, #0, #16
 8000900:	8a7a      	ldrh	r2, [r7, #18]
 8000902:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <DACx1416_get_spiConfig>:
	return status;
}



DACx1416_spiconfig_t DACx1416_get_spiConfig(DACx1416_HandleTypeDef *dac){
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	DACx1416_spiconfig_t spiConfig;
	uint16_t regVal = DACx1416_read_register(dac, DACx1416_REG_SPICONFIG);
 8000918:	2103      	movs	r1, #3
 800091a:	6838      	ldr	r0, [r7, #0]
 800091c:	f7ff ff58 	bl	80007d0 <DACx1416_read_register>
 8000920:	4603      	mov	r3, r0
 8000922:	82fb      	strh	r3, [r7, #22]

	spiConfig.tempalm_en = (regVal >> 11) & 0x01;
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	0adb      	lsrs	r3, r3, #11
 8000928:	b29b      	uxth	r3, r3
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf14      	ite	ne
 8000932:	2301      	movne	r3, #1
 8000934:	2300      	moveq	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	733b      	strb	r3, [r7, #12]
	spiConfig.dacbusy_en = (regVal >> 10) & 0x01;
 800093a:	8afb      	ldrh	r3, [r7, #22]
 800093c:	0a9b      	lsrs	r3, r3, #10
 800093e:	b29b      	uxth	r3, r3
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	737b      	strb	r3, [r7, #13]
	spiConfig.crcalm_en = (regVal >> 9) & 0x01;
 8000950:	8afb      	ldrh	r3, [r7, #22]
 8000952:	0a5b      	lsrs	r3, r3, #9
 8000954:	b29b      	uxth	r3, r3
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf14      	ite	ne
 800095e:	2301      	movne	r3, #1
 8000960:	2300      	moveq	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	73bb      	strb	r3, [r7, #14]
	spiConfig.softtoggle_en = (regVal >> 6) & 0x01;
 8000966:	8afb      	ldrh	r3, [r7, #22]
 8000968:	099b      	lsrs	r3, r3, #6
 800096a:	b29b      	uxth	r3, r3
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	73fb      	strb	r3, [r7, #15]
	spiConfig.dev_pwdwn = (regVal >> 5) & 0x01;
 800097c:	8afb      	ldrh	r3, [r7, #22]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	b29b      	uxth	r3, r3
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	743b      	strb	r3, [r7, #16]
	spiConfig.crc_en = (regVal >> 4) & 0x01;
 8000992:	8afb      	ldrh	r3, [r7, #22]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	b29b      	uxth	r3, r3
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	747b      	strb	r3, [r7, #17]
	spiConfig.str_en = (regVal >> 3) & 0x01;
 80009a8:	8afb      	ldrh	r3, [r7, #22]
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	74bb      	strb	r3, [r7, #18]
	spiConfig.sdo_en = (regVal >> 2) & 0x01;
 80009be:	8afb      	ldrh	r3, [r7, #22]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	74fb      	strb	r3, [r7, #19]
	spiConfig.fsdo = (regVal >> 1) & 0x01;
 80009d4:	8afb      	ldrh	r3, [r7, #22]
 80009d6:	085b      	lsrs	r3, r3, #1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf14      	ite	ne
 80009e2:	2301      	movne	r3, #1
 80009e4:	2300      	moveq	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	753b      	strb	r3, [r7, #20]


	return spiConfig;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	461a      	mov	r2, r3
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	cb03      	ldmia	r3!, {r0, r1}
 80009f4:	6010      	str	r0, [r2, #0]
 80009f6:	6051      	str	r1, [r2, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	7213      	strb	r3, [r2, #8]
}
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <parseExtendedCmd>:





void parseExtendedCmd(uint8_t *data, uint32_t len){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	uint8_t extCmd = data[0] & 0x3F;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a16:	73fb      	strb	r3, [r7, #15]

	switch(extCmd){
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <parseExtendedCmd+0x20>
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d037      	beq.n	8000a92 <parseExtendedCmd+0x8e>

		break;
	}
	default:
		// Handle unexpected commands, if necessary
		break;
 8000a22:	e06f      	b.n	8000b04 <parseExtendedCmd+0x100>
		  hspi1.Instance = SPI1;
 8000a24:	4b39      	ldr	r3, [pc, #228]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a26:	4a3a      	ldr	r2, [pc, #232]	@ (8000b10 <parseExtendedCmd+0x10c>)
 8000a28:	601a      	str	r2, [r3, #0]
		  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a30:	605a      	str	r2, [r3, #4]
		  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a32:	4b36      	ldr	r3, [pc, #216]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
		  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a38:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a3a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a3e:	60da      	str	r2, [r3, #12]
		  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a40:	4b32      	ldr	r3, [pc, #200]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
		  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a46:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	615a      	str	r2, [r3, #20]
		  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a52:	619a      	str	r2, [r3, #24]
		  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	61da      	str	r2, [r3, #28]
		  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
		  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
		  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
		  hspi1.Init.CRCPolynomial = 7;
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
		  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a74:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	@ 0x30
		  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	@ 0x34
		  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a80:	4822      	ldr	r0, [pc, #136]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a82:	f003 ff79 	bl	8004978 <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d038      	beq.n	8000afe <parseExtendedCmd+0xfa>
		    Error_Handler();
 8000a8c:	f000 fb4c 	bl	8001128 <Error_Handler>
		break;
 8000a90:	e035      	b.n	8000afe <parseExtendedCmd+0xfa>
		  hspi1.Instance = SPI1;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a94:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <parseExtendedCmd+0x10c>)
 8000a96:	601a      	str	r2, [r3, #0]
		  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000a9a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a9e:	605a      	str	r2, [r3, #4]
		  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
		  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000aa8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000aac:	60da      	str	r2, [r3, #12]
		  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
		  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
		  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
		  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	61da      	str	r2, [r3, #28]
		  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
		  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24
		  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
		  hspi1.Init.CRCPolynomial = 7;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
		  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	631a      	str	r2, [r3, #48]	@ 0x30
		  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	635a      	str	r2, [r3, #52]	@ 0x34
		  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <parseExtendedCmd+0x108>)
 8000aee:	f003 ff43 	bl	8004978 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <parseExtendedCmd+0xfe>
		    Error_Handler();
 8000af8:	f000 fb16 	bl	8001128 <Error_Handler>
		break;
 8000afc:	e001      	b.n	8000b02 <parseExtendedCmd+0xfe>
		break;
 8000afe:	bf00      	nop
 8000b00:	e000      	b.n	8000b04 <parseExtendedCmd+0x100>
		break;
 8000b02:	bf00      	nop
	}


}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000014c 	.word	0x2000014c
 8000b10:	40013000 	.word	0x40013000

08000b14 <parseCmd>:




void parseCmd(uint8_t *data, uint32_t len) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]

	uint8_t cmd = (data[0]>>6) & 0x3;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	099b      	lsrs	r3, r3, #6
 8000b24:	75fb      	strb	r3, [r7, #23]

	switch(cmd){
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d848      	bhi.n	8000bbe <parseCmd+0xaa>
 8000b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b34 <parseCmd+0x20>)
 8000b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000b45 	.word	0x08000b45
 8000b38:	08000b85 	.word	0x08000b85
 8000b3c:	08000bbf 	.word	0x08000bbf
 8000b40:	08000bb5 	.word	0x08000bb5
	case CMD_READ_DAC_REGISTER: {//read register

		uint8_t address = data[0] & 0x3F;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b4c:	74fb      	strb	r3, [r7, #19]
		uint16_t regVal = DACx1416_read_register(&dac,address);
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	4619      	mov	r1, r3
 8000b52:	481e      	ldr	r0, [pc, #120]	@ (8000bcc <parseCmd+0xb8>)
 8000b54:	f7ff fe3c 	bl	80007d0 <DACx1416_read_register>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	823b      	strh	r3, [r7, #16]
		uint8_t response[2];
		response[0] = regVal >> 8;
 8000b5c:	8a3b      	ldrh	r3, [r7, #16]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	733b      	strb	r3, [r7, #12]
		response[1] = regVal & 0xFF;
 8000b66:	8a3b      	ldrh	r3, [r7, #16]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	737b      	strb	r3, [r7, #13]
		if (CDC_Transmit_FS(response, 2) != USBD_OK) {
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f009 f894 	bl	8009ca0 <CDC_Transmit_FS>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d021      	beq.n	8000bc2 <parseCmd+0xae>
					Error_Handler();
 8000b7e:	f000 fad3 	bl	8001128 <Error_Handler>
		}
		break;
 8000b82:	e01e      	b.n	8000bc2 <parseCmd+0xae>
	}
	case CMD_WRITE_DAC_REGISTER: { //write register

		uint8_t address = data[0] & 0x3F;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b8c:	75bb      	strb	r3, [r7, #22]
		uint16_t value = data[1]<<8 | data[2];
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	82bb      	strh	r3, [r7, #20]
		DACx1416_write_register(&dac, address, value);
 8000ba6:	8aba      	ldrh	r2, [r7, #20]
 8000ba8:	7dbb      	ldrb	r3, [r7, #22]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <parseCmd+0xb8>)
 8000bae:	f7ff fdb5 	bl	800071c <DACx1416_write_register>



		break;
 8000bb2:	e007      	b.n	8000bc4 <parseCmd+0xb0>

		break;
	}

	case CMD_EXTENDED_COMMANDS: { //parse extended commands
		parseExtendedCmd(data,  len);
 8000bb4:	6839      	ldr	r1, [r7, #0]
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff24 	bl	8000a04 <parseExtendedCmd>
		break;
 8000bbc:	e002      	b.n	8000bc4 <parseCmd+0xb0>
	}
	default:
		// Handle unexpected commands, if necessary
		break;
 8000bbe:	bf00      	nop
 8000bc0:	e000      	b.n	8000bc4 <parseCmd+0xb0>
		break;
 8000bc2:	bf00      	nop
	}


}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000238 	.word	0x20000238

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 fc90 	bl	80014fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f8db 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 f9fb 	bl	8000fd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000be2:	f000 f955 	bl	8000e90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000be6:	f000 f9c7 	bl	8000f78 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000bea:	f008 ff95 	bl	8009b18 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000bee:	f000 f923 	bl	8000e38 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2023      	movs	r0, #35	@ 0x23
 8000bf8:	f000 fd94 	bl	8001724 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bfc:	2023      	movs	r0, #35	@ 0x23
 8000bfe:	f000 fdad 	bl	800175c <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2110      	movs	r1, #16
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0a:	f001 f9a7 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2120      	movs	r1, #32
 8000c12:	4855      	ldr	r0, [pc, #340]	@ (8000d68 <main+0x198>)
 8000c14:	f001 f9a2 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2140      	movs	r1, #64	@ 0x40
 8000c1c:	4852      	ldr	r0, [pc, #328]	@ (8000d68 <main+0x198>)
 8000c1e:	f001 f99d 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	4850      	ldr	r0, [pc, #320]	@ (8000d68 <main+0x198>)
 8000c28:	f001 f998 	bl	8001f5c <HAL_GPIO_WritePin>
//  DACx1416_write_register_old(0x10, 56000); // 4.2778V
//  DACx1416_write_register_old(0x10, 60000); // 4.5841V   --> 4.37V
//  DACx1416_write_register_old(0x10, 64000); // 4.8904V --> 4.497V
//  DACx1416_write_register_old(0x10, 65535); //5V --> 3.5V

	dac.SPI_transmit = DACx1416_SPI_transmit;
 8000c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d6c <main+0x19c>)
 8000c2e:	4a50      	ldr	r2, [pc, #320]	@ (8000d70 <main+0x1a0>)
 8000c30:	601a      	str	r2, [r3, #0]
	dac.SPI_receive = DACx1416_SPI_receive;
 8000c32:	4b4e      	ldr	r3, [pc, #312]	@ (8000d6c <main+0x19c>)
 8000c34:	4a4f      	ldr	r2, [pc, #316]	@ (8000d74 <main+0x1a4>)
 8000c36:	605a      	str	r2, [r3, #4]
	dac.SPI_transmitReceive = DACx1416_SPI_transmitReceive;
 8000c38:	4b4c      	ldr	r3, [pc, #304]	@ (8000d6c <main+0x19c>)
 8000c3a:	4a4f      	ldr	r2, [pc, #316]	@ (8000d78 <main+0x1a8>)
 8000c3c:	609a      	str	r2, [r3, #8]
	dac.nCS = DACx1416_nCS;
 8000c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d6c <main+0x19c>)
 8000c40:	4a4e      	ldr	r2, [pc, #312]	@ (8000d7c <main+0x1ac>)
 8000c42:	60da      	str	r2, [r3, #12]
	dac.nLDAC = DACx1416_nLDAC;
 8000c44:	4b49      	ldr	r3, [pc, #292]	@ (8000d6c <main+0x19c>)
 8000c46:	4a4e      	ldr	r2, [pc, #312]	@ (8000d80 <main+0x1b0>)
 8000c48:	611a      	str	r2, [r3, #16]
	dac.nRESET = DACx1416_nRESET;
 8000c4a:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <main+0x19c>)
 8000c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8000d84 <main+0x1b4>)
 8000c4e:	615a      	str	r2, [r3, #20]
	dac.nCLR = DACx1416_nCLR;
 8000c50:	4b46      	ldr	r3, [pc, #280]	@ (8000d6c <main+0x19c>)
 8000c52:	4a4d      	ldr	r2, [pc, #308]	@ (8000d88 <main+0x1b8>)
 8000c54:	619a      	str	r2, [r3, #24]
	dac.TGL = DACx1416_tgl;
 8000c56:	4b45      	ldr	r3, [pc, #276]	@ (8000d6c <main+0x19c>)
 8000c58:	4a4c      	ldr	r2, [pc, #304]	@ (8000d8c <main+0x1bc>)
 8000c5a:	61da      	str	r2, [r3, #28]

	volatile DACx1416_deviceID_t devID = DACx1416_get_device_id(&dac);
 8000c5c:	4843      	ldr	r0, [pc, #268]	@ (8000d6c <main+0x19c>)
 8000c5e:	f7ff fe35 	bl	80008cc <DACx1416_get_device_id>
 8000c62:	4603      	mov	r3, r0
 8000c64:	61fb      	str	r3, [r7, #28]
	volatile DACx1416_spiconfig_t spiConfig = DACx1416_get_spiConfig(&dac);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4940      	ldr	r1, [pc, #256]	@ (8000d6c <main+0x19c>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fe4e 	bl	800090e <DACx1416_get_spiConfig>
	devID = DACx1416_get_device_id(&dac);
 8000c72:	483e      	ldr	r0, [pc, #248]	@ (8000d6c <main+0x19c>)
 8000c74:	f7ff fe2a 	bl	80008cc <DACx1416_get_device_id>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	493b      	ldr	r1, [pc, #236]	@ (8000d6c <main+0x19c>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe44 	bl	800090e <DACx1416_get_spiConfig>
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	463a      	mov	r2, r7
 8000c8c:	6810      	ldr	r0, [r2, #0]
 8000c8e:	6851      	ldr	r1, [r2, #4]
 8000c90:	c303      	stmia	r3!, {r0, r1}
 8000c92:	7a12      	ldrb	r2, [r2, #8]
 8000c94:	701a      	strb	r2, [r3, #0]
	devID = DACx1416_get_device_id(&dac);
 8000c96:	4835      	ldr	r0, [pc, #212]	@ (8000d6c <main+0x19c>)
 8000c98:	f7ff fe18 	bl	80008cc <DACx1416_get_device_id>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4932      	ldr	r1, [pc, #200]	@ (8000d6c <main+0x19c>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe32 	bl	800090e <DACx1416_get_spiConfig>
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	463a      	mov	r2, r7
 8000cb0:	6810      	ldr	r0, [r2, #0]
 8000cb2:	6851      	ldr	r1, [r2, #4]
 8000cb4:	c303      	stmia	r3!, {r0, r1}
 8000cb6:	7a12      	ldrb	r2, [r2, #8]
 8000cb8:	701a      	strb	r2, [r3, #0]
	devID = DACx1416_get_device_id(&dac);
 8000cba:	482c      	ldr	r0, [pc, #176]	@ (8000d6c <main+0x19c>)
 8000cbc:	f7ff fe06 	bl	80008cc <DACx1416_get_device_id>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4929      	ldr	r1, [pc, #164]	@ (8000d6c <main+0x19c>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe20 	bl	800090e <DACx1416_get_spiConfig>
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	463a      	mov	r2, r7
 8000cd4:	6810      	ldr	r0, [r2, #0]
 8000cd6:	6851      	ldr	r1, [r2, #4]
 8000cd8:	c303      	stmia	r3!, {r0, r1}
 8000cda:	7a12      	ldrb	r2, [r2, #8]
 8000cdc:	701a      	strb	r2, [r3, #0]

	DACx1416_write_register(&dac, 3, 0x0AB4);
 8000cde:	f640 22b4 	movw	r2, #2740	@ 0xab4
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	4821      	ldr	r0, [pc, #132]	@ (8000d6c <main+0x19c>)
 8000ce6:	f7ff fd19 	bl	800071c <DACx1416_write_register>


	dacUseCRC = 1;
 8000cea:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <main+0x1c0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]


	//DACx1416_write_register(&dac, 6, 0);

	devID = DACx1416_get_device_id(&dac);
 8000cf0:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <main+0x19c>)
 8000cf2:	f7ff fdeb 	bl	80008cc <DACx1416_get_device_id>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	491b      	ldr	r1, [pc, #108]	@ (8000d6c <main+0x19c>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fe05 	bl	800090e <DACx1416_get_spiConfig>
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	463a      	mov	r2, r7
 8000d0a:	6810      	ldr	r0, [r2, #0]
 8000d0c:	6851      	ldr	r1, [r2, #4]
 8000d0e:	c303      	stmia	r3!, {r0, r1}
 8000d10:	7a12      	ldrb	r2, [r2, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	devID = DACx1416_get_device_id(&dac);
 8000d14:	4815      	ldr	r0, [pc, #84]	@ (8000d6c <main+0x19c>)
 8000d16:	f7ff fdd9 	bl	80008cc <DACx1416_get_device_id>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4912      	ldr	r1, [pc, #72]	@ (8000d6c <main+0x19c>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fdf3 	bl	800090e <DACx1416_get_spiConfig>
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	463a      	mov	r2, r7
 8000d2e:	6810      	ldr	r0, [r2, #0]
 8000d30:	6851      	ldr	r1, [r2, #4]
 8000d32:	c303      	stmia	r3!, {r0, r1}
 8000d34:	7a12      	ldrb	r2, [r2, #8]
 8000d36:	701a      	strb	r2, [r3, #0]
	devID = DACx1416_get_device_id(&dac);
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <main+0x19c>)
 8000d3a:	f7ff fdc7 	bl	80008cc <DACx1416_get_device_id>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000d42:	463b      	mov	r3, r7
 8000d44:	4909      	ldr	r1, [pc, #36]	@ (8000d6c <main+0x19c>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fde1 	bl	800090e <DACx1416_get_spiConfig>
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	463a      	mov	r2, r7
 8000d52:	6810      	ldr	r0, [r2, #0]
 8000d54:	6851      	ldr	r1, [r2, #4]
 8000d56:	c303      	stmia	r3!, {r0, r1}
 8000d58:	7a12      	ldrb	r2, [r2, #8]
 8000d5a:	701a      	strb	r2, [r3, #0]


	asm("nop");
 8000d5c:	bf00      	nop
	asm("nop");
 8000d5e:	bf00      	nop
	asm("nop");
 8000d60:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <main+0x192>
 8000d66:	bf00      	nop
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	20000238 	.word	0x20000238
 8000d70:	080005dd 	.word	0x080005dd
 8000d74:	08000661 	.word	0x08000661
 8000d78:	080006f1 	.word	0x080006f1
 8000d7c:	080004b9 	.word	0x080004b9
 8000d80:	080004ed 	.word	0x080004ed
 8000d84:	08000521 	.word	0x08000521
 8000d88:	08000555 	.word	0x08000555
 8000d8c:	08000589 	.word	0x08000589
 8000d90:	2000025c 	.word	0x2000025c

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	@ 0x58
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2244      	movs	r2, #68	@ 0x44
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f009 fd1a 	bl	800a7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000db6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dba:	f002 fa8b 	bl	80032d4 <HAL_PWREx_ControlVoltageScaling>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dc4:	f000 f9b0 	bl	8001128 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dd4:	2360      	movs	r3, #96	@ 0x60
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000de4:	2328      	movs	r3, #40	@ 0x28
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000de8:	2307      	movs	r3, #7
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fad1 	bl	80033a0 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e04:	f000 f990 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fe99 	bl	8003b58 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e2c:	f000 f97c 	bl	8001128 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3758      	adds	r7, #88	@ 0x58
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e3e:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <MX_CRC_Init+0x54>)
 8000e40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_CRC_Init+0x50>)
 8000e74:	f000 fc80 	bl	8001778 <HAL_CRC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000e7e:	f000 f953 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000128 	.word	0x20000128
 8000e8c:	40023000 	.word	0x40023000

08000e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e94:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000e96:	4a37      	ldr	r2, [pc, #220]	@ (8000f74 <MX_SPI1_Init+0xe4>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b35      	ldr	r3, [pc, #212]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000eaa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000eae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eea:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef0:	481f      	ldr	r0, [pc, #124]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000ef2:	f003 fd41 	bl	8004978 <HAL_SPI_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 f914 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	hspi1.Instance = SPI1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <MX_SPI1_Init+0xe4>)
 8000f04:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f1a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f32:	2208      	movs	r2, #8
 8000f34:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_SPI1_Init+0xe0>)
 8000f5c:	f003 fd0c 	bl	8004978 <HAL_SPI_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_SPI1_Init+0xda>
		Error_Handler();
 8000f66:	f000 f8df 	bl	8001128 <Error_Handler>
	}
  /* USER CODE END SPI1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000014c 	.word	0x2000014c
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000f7e:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <MX_USART1_UART_Init+0x5c>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_USART1_UART_Init+0x58>)
 8000fbc:	f004 fe26 	bl	8005c0c <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fc6:	f000 f8af 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001b0 	.word	0x200001b0
 8000fd4:	40013800 	.word	0x40013800

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a28      	ldr	r2, [pc, #160]	@ (80010ac <MX_GPIO_Init+0xd4>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a22      	ldr	r2, [pc, #136]	@ (80010ac <MX_GPIO_Init+0xd4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_GPIO_Init+0xd4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_nCS_GPIO_Port, DAC_nCS_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2110      	movs	r1, #16
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f000 ff8d 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC_TOGGLE0_Pin|DAC_TOGGLE1_Pin|DAC_TOGGLE2_Pin|DAC_nLDAC_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	21e7      	movs	r1, #231	@ 0xe7
 8001046:	481a      	ldr	r0, [pc, #104]	@ (80010b0 <MX_GPIO_Init+0xd8>)
 8001048:	f000 ff88 	bl	8001f5c <HAL_GPIO_WritePin>
                          |DAC_nRESET_Pin|DAC_nCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DAC_nCS_Pin */
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 800104c:	2310      	movs	r3, #16
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001066:	f000 fdcf 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_TOGGLE0_Pin DAC_TOGGLE1_Pin DAC_TOGGLE2_Pin DAC_nLDAC_Pin
                           DAC_nRESET_Pin DAC_nCLR_Pin */
  GPIO_InitStruct.Pin = DAC_TOGGLE0_Pin|DAC_TOGGLE1_Pin|DAC_TOGGLE2_Pin|DAC_nLDAC_Pin
 800106a:	23e7      	movs	r3, #231	@ 0xe7
 800106c:	60fb      	str	r3, [r7, #12]
                          |DAC_nRESET_Pin|DAC_nCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_GPIO_Init+0xd8>)
 8001082:	f000 fdc1 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_nALMOUT_Pin */
  GPIO_InitStruct.Pin = DAC_nALMOUT_Pin;
 8001086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_nALMOUT_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4619      	mov	r1, r3
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_GPIO_Init+0xd8>)
 800109e:	f000 fdb3 	bl	8001c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000400 	.word	0x48000400

080010b4 <calculate_crc8>:

/* USER CODE BEGIN 4 */

uint8_t calculate_crc8(uint8_t *data, uint32_t length) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    // Ensure the CRC peripheral is initialized
    MX_CRC_Init();
 80010be:	f7ff febb 	bl	8000e38 <MX_CRC_Init>

    // Calculate CRC
    uint32_t crc_result = HAL_CRC_Calculate(&hcrc, (uint32_t *)data, length);
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <calculate_crc8+0x28>)
 80010c8:	f000 fbba 	bl	8001840 <HAL_CRC_Calculate>
 80010cc:	60f8      	str	r0, [r7, #12]

    // Since we're using an 8-bit CRC, the result will be in the lower 8 bits
    return (uint8_t)crc_result;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b2db      	uxtb	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000128 	.word	0x20000128

080010e0 <HAL_SPI_ErrorCallback>:
		dacTransferComplete = 1;
	}
}

// Callback function for SPI errors
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_SPI_ErrorCallback+0x20>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_SPI_ErrorCallback+0x16>
		// Handle SPI communication error here
		Error_Handler();
 80010f2:	f000 f819 	bl	8001128 <Error_Handler>
	}
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40013000 	.word	0x40013000

08001104 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001116:	f000 fa09 	bl	800152c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <Error_Handler+0x8>

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_MspInit+0x44>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113e:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <HAL_MspInit+0x44>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6613      	str	r3, [r2, #96]	@ 0x60
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_MspInit+0x44>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_MspInit+0x44>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_MspInit+0x44>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115c:	6593      	str	r3, [r2, #88]	@ 0x58
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_MspInit+0x44>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_CRC_MspInit+0x38>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10b      	bne.n	80011a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_CRC_MspInit+0x3c>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_CRC_MspInit+0x3c>)
 8001194:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001198:	6493      	str	r3, [r2, #72]	@ 0x48
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <HAL_CRC_MspInit+0x3c>)
 800119c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023000 	.word	0x40023000
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001248 <HAL_SPI_MspInit+0x8c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d130      	bne.n	8001240 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_SPI_MspInit+0x90>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <HAL_SPI_MspInit+0x90>)
 80011e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_SPI_MspInit+0x90>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_SPI_MspInit+0x90>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a14      	ldr	r2, [pc, #80]	@ (800124c <HAL_SPI_MspInit+0x90>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_SPI_MspInit+0x90>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800120e:	23e0      	movs	r3, #224	@ 0xe0
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121e:	2305      	movs	r3, #5
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f000 fcec 	bl	8001c08 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2023      	movs	r0, #35	@ 0x23
 8001236:	f000 fa75 	bl	8001724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800123a:	2023      	movs	r0, #35	@ 0x23
 800123c:	f000 fa8e 	bl	800175c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	@ 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013000 	.word	0x40013000
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	@ 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2288      	movs	r2, #136	@ 0x88
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f009 fab3 	bl	800a7dc <memset>
  if(huart->Instance==USART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_UART_MspInit+0xb4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13c      	bne.n	80012fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001280:	2301      	movs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4618      	mov	r0, r3
 800128e:	f002 feb7 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001298:	f7ff ff46 	bl	8001128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_UART_MspInit+0xb8>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_UART_MspInit+0xb8>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_UART_MspInit+0xb8>)
 80012aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_UART_MspInit+0xb8>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <HAL_UART_MspInit+0xb8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <HAL_UART_MspInit+0xb8>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e6:	2307      	movs	r3, #7
 80012e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f6:	f000 fc87 	bl	8001c08 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012fa:	bf00      	nop
 80012fc:	37b0      	adds	r7, #176	@ 0xb0
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40013800 	.word	0x40013800
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800131a:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <HAL_InitTick+0xc8>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <HAL_InitTick+0xc8>)
 8001320:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001324:	6613      	str	r3, [r2, #96]	@ 0x60
 8001326:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_InitTick+0xc8>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001332:	f107 020c 	add.w	r2, r7, #12
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fdcd 	bl	8003edc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001342:	f002 fdb5 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8001346:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134a:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <HAL_InitTick+0xcc>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	3b01      	subs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <HAL_InitTick+0xd0>)
 8001358:	4a21      	ldr	r2, [pc, #132]	@ (80013e0 <HAL_InitTick+0xd4>)
 800135a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <HAL_InitTick+0xd0>)
 800135e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001362:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001364:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <HAL_InitTick+0xd0>)
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <HAL_InitTick+0xd0>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <HAL_InitTick+0xd0>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_InitTick+0xd0>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800137c:	4817      	ldr	r0, [pc, #92]	@ (80013dc <HAL_InitTick+0xd0>)
 800137e:	f004 f97f 	bl	8005680 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11b      	bne.n	80013c8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <HAL_InitTick+0xd0>)
 8001392:	f004 f9d7 	bl	8005744 <HAL_TIM_Base_Start_IT>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800139c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d111      	bne.n	80013c8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013a4:	2019      	movs	r0, #25
 80013a6:	f000 f9d9 	bl	800175c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d808      	bhi.n	80013c2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2019      	movs	r0, #25
 80013b6:	f000 f9b5 	bl	8001724 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <HAL_InitTick+0xd8>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e002      	b.n	80013c8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3730      	adds	r7, #48	@ 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	20000260 	.word	0x20000260
 80013e0:	40012c00 	.word	0x40012c00
 80013e4:	20000004 	.word	0x20000004

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800144e:	f004 f9e9 	bl	8005824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000260 	.word	0x20000260

0800145c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <SPI1_IRQHandler+0x10>)
 8001462:	f003 fe9f 	bl	80051a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000014c 	.word	0x2000014c

08001470 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <OTG_FS_IRQHandler+0x10>)
 8001476:	f000 fec7 	bl	8002208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001790 	.word	0x20001790

08001484 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	@ (80014f4 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f009 f989 	bl	800a7ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014da:	f7ff fb79 	bl	8000bd0 <main>

080014de <LoopForever>:

LoopForever:
    b LoopForever
 80014de:	e7fe      	b.n	80014de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80014ec:	0800a8ec 	.word	0x0800a8ec
  ldr r2, =_sbss
 80014f0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80014f4:	20001e94 	.word	0x20001e94

080014f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>

080014fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 f902 	bl	800170e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150a:	200f      	movs	r0, #15
 800150c:	f7ff fefe 	bl	800130c <HAL_InitTick>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	e001      	b.n	8001520 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151c:	f7ff fe0a 	bl	8001134 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001520:	79fb      	ldrb	r3, [r7, #7]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	200002ac 	.word	0x200002ac

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200002ac 	.word	0x200002ac

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	@ 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff4c 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001736:	f7ff ff61 	bl	80015fc <__NVIC_GetPriorityGrouping>
 800173a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	6978      	ldr	r0, [r7, #20]
 8001742:	f7ff ffb1 	bl	80016a8 <NVIC_EncodePriority>
 8001746:	4602      	mov	r2, r0
 8001748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff80 	bl	8001654 <__NVIC_SetPriority>
}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff54 	bl	8001618 <__NVIC_EnableIRQ>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e054      	b.n	8001834 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7f5b      	ldrb	r3, [r3, #29]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fcee 	bl	800117c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a22      	ldr	r2, [pc, #136]	@ (800183c <HAL_CRC_Init+0xc4>)
 80017b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0218 	bic.w	r2, r2, #24
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	e00c      	b.n	80017e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	461a      	mov	r2, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f948 	bl	8001a68 <HAL_CRCEx_Polynomial_Set>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e028      	b.n	8001834 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	e004      	b.n	8001800 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6912      	ldr	r2, [r2, #16]
 80017fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	04c11db7 	.word	0x04c11db7

08001840 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2202      	movs	r2, #2
 8001854:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d006      	beq.n	800187c <HAL_CRC_Calculate+0x3c>
 800186e:	2b03      	cmp	r3, #3
 8001870:	d829      	bhi.n	80018c6 <HAL_CRC_Calculate+0x86>
 8001872:	2b01      	cmp	r3, #1
 8001874:	d019      	beq.n	80018aa <HAL_CRC_Calculate+0x6a>
 8001876:	2b02      	cmp	r3, #2
 8001878:	d01e      	beq.n	80018b8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800187a:	e024      	b.n	80018c6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	441a      	add	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3f0      	bcc.n	8001882 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      break;
 80018a8:	e00e      	b.n	80018c8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f812 	bl	80018d8 <CRC_Handle_8>
 80018b4:	6138      	str	r0, [r7, #16]
      break;
 80018b6:	e007      	b.n	80018c8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f899 	bl	80019f4 <CRC_Handle_16>
 80018c2:	6138      	str	r0, [r7, #16]
      break;
 80018c4:	e000      	b.n	80018c8 <HAL_CRC_Calculate+0x88>
      break;
 80018c6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80018ce:	693b      	ldr	r3, [r7, #16]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e023      	b.n	8001932 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	3301      	adds	r3, #1
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	440b      	add	r3, r1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001904:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	440b      	add	r3, r1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001914:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	3303      	adds	r3, #3
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	440b      	add	r3, r1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001928:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800192a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	d3d6      	bcc.n	80018ea <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d04d      	beq.n	80019e2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	4413      	add	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d116      	bne.n	8001998 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b21a      	sxth	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3301      	adds	r3, #1
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	440b      	add	r3, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	8b7a      	ldrh	r2, [r7, #26]
 8001996:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d11f      	bne.n	80019e2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	440b      	add	r3, r1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	8b7a      	ldrh	r2, [r7, #26]
 80019ce:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3724      	adds	r7, #36	@ 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e013      	b.n	8001a2e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3e6      	bcc.n	8001a06 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	4413      	add	r3, r2
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a78:	231f      	movs	r3, #31
 8001a7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
 8001a8a:	e063      	b.n	8001b54 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a8c:	bf00      	nop
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	613a      	str	r2, [r7, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <HAL_CRCEx_Polynomial_Set+0x44>
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b18      	cmp	r3, #24
 8001ab0:	d846      	bhi.n	8001b40 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001b47 	.word	0x08001b47
 8001abc:	08001b41 	.word	0x08001b41
 8001ac0:	08001b41 	.word	0x08001b41
 8001ac4:	08001b41 	.word	0x08001b41
 8001ac8:	08001b41 	.word	0x08001b41
 8001acc:	08001b41 	.word	0x08001b41
 8001ad0:	08001b41 	.word	0x08001b41
 8001ad4:	08001b41 	.word	0x08001b41
 8001ad8:	08001b35 	.word	0x08001b35
 8001adc:	08001b41 	.word	0x08001b41
 8001ae0:	08001b41 	.word	0x08001b41
 8001ae4:	08001b41 	.word	0x08001b41
 8001ae8:	08001b41 	.word	0x08001b41
 8001aec:	08001b41 	.word	0x08001b41
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b41 	.word	0x08001b41
 8001af8:	08001b29 	.word	0x08001b29
 8001afc:	08001b41 	.word	0x08001b41
 8001b00:	08001b41 	.word	0x08001b41
 8001b04:	08001b41 	.word	0x08001b41
 8001b08:	08001b41 	.word	0x08001b41
 8001b0c:	08001b41 	.word	0x08001b41
 8001b10:	08001b41 	.word	0x08001b41
 8001b14:	08001b41 	.word	0x08001b41
 8001b18:	08001b1d 	.word	0x08001b1d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d913      	bls.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b26:	e010      	b.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b07      	cmp	r3, #7
 8001b2c:	d90f      	bls.n	8001b4e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b32:	e00c      	b.n	8001b4e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	d90b      	bls.n	8001b52 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b3e:	e008      	b.n	8001b52 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	75fb      	strb	r3, [r7, #23]
        break;
 8001b44:	e006      	b.n	8001b54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b46:	bf00      	nop
 8001b48:	e004      	b.n	8001b54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b4a:	bf00      	nop
 8001b4c:	e002      	b.n	8001b54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b4e:	bf00      	nop
 8001b50:	e000      	b.n	8001b54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b52:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 0118 	bic.w	r1, r3, #24
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d005      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e029      	b.n	8001bfc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	f003 021c 	and.w	r2, r3, #28
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
    }
  }
  return status;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e17f      	b.n	8001f18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8171 	beq.w	8001f12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x40>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d118      	bne.n	8001ce8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ac 	beq.w	8001f12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b5f      	ldr	r3, [pc, #380]	@ (8001f38 <HAL_GPIO_Init+0x330>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8001f38 <HAL_GPIO_Init+0x330>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f38 <HAL_GPIO_Init+0x330>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f3c <HAL_GPIO_Init+0x334>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x242>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4f      	ldr	r2, [pc, #316]	@ (8001f40 <HAL_GPIO_Init+0x338>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x23e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4e      	ldr	r2, [pc, #312]	@ (8001f44 <HAL_GPIO_Init+0x33c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x23a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4d      	ldr	r2, [pc, #308]	@ (8001f48 <HAL_GPIO_Init+0x340>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x236>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	@ (8001f4c <HAL_GPIO_Init+0x344>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x232>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4b      	ldr	r2, [pc, #300]	@ (8001f50 <HAL_GPIO_Init+0x348>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x22e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4a      	ldr	r2, [pc, #296]	@ (8001f54 <HAL_GPIO_Init+0x34c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x22a>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5c:	4937      	ldr	r1, [pc, #220]	@ (8001f3c <HAL_GPIO_Init+0x334>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e8e:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e94:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb8:	4a27      	ldr	r2, [pc, #156]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f0c:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f47f ae78 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00
 8001f4c:	48001000 	.word	0x48001000
 8001f50:	48001400 	.word	0x48001400
 8001f54:	48001800 	.word	0x48001800
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e101      	b.n	80021a2 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f007 ffce 	bl	8009f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fc19 	bl	8006802 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7c1a      	ldrb	r2, [r3, #16]
 8001fd8:	f88d 2000 	strb.w	r2, [sp]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe0:	f004 fb35 	bl	800664e <USB_CoreInit>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0d5      	b.n	80021a2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fc11 	bl	8006824 <USB_SetCurrentMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0c6      	b.n	80021a2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e04a      	b.n	80020b0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3315      	adds	r3, #21
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3314      	adds	r3, #20
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	b298      	uxth	r0, r3
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	332e      	adds	r3, #46	@ 0x2e
 8002056:	4602      	mov	r2, r0
 8002058:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3318      	adds	r3, #24
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	331c      	adds	r3, #28
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3320      	adds	r3, #32
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3324      	adds	r3, #36	@ 0x24
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3301      	adds	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3af      	bcc.n	800201a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e044      	b.n	800214a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3301      	adds	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3b5      	bcc.n	80020c0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7c1a      	ldrb	r2, [r3, #16]
 800215c:	f88d 2000 	strb.w	r2, [sp]
 8002160:	3304      	adds	r3, #4
 8002162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002164:	f004 fbaa 	bl	80068bc <USB_DevInit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e013      	b.n	80021a2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f001 f86d 	bl	8003270 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f005 fb61 	bl	8007862 <USB_DevDisconnect>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_PCD_Start+0x1c>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e01c      	b.n	8002200 <HAL_PCD_Start+0x56>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b5b      	ldrb	r3, [r3, #13]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fafa 	bl	80067e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 fb15 	bl	8007820 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08d      	sub	sp, #52	@ 0x34
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f005 fbd3 	bl	80079ca <USB_GetMode>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 8481 	bne.w	8002b2e <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f005 fb37 	bl	80078a4 <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8477 	beq.w	8002b2c <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f005 fb24 	bl	80078a4 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 0202 	and.w	r2, r2, #2
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fb12 	bl	80078a4 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d161      	bne.n	800234e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0210 	bic.w	r2, r2, #16
 8002298:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	0c5b      	lsrs	r3, r3, #17
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d124      	bne.n	8002310 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d035      	beq.n	800233e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f005 f949 	bl	800757c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f6:	441a      	add	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002308:	441a      	add	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	e016      	b.n	800233e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b06      	cmp	r3, #6
 800231a:	d110      	bne.n	800233e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002322:	2208      	movs	r2, #8
 8002324:	4619      	mov	r1, r3
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f005 f928 	bl	800757c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002338:	441a      	add	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0210 	orr.w	r2, r2, #16
 800234c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f005 faa6 	bl	80078a4 <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800235e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002362:	f040 80a7 	bne.w	80024b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f005 faab 	bl	80078ca <USB_ReadDevAllOutEpInterrupt>
 8002374:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002376:	e099      	b.n	80024ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 808e 	beq.w	80024a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f005 facf 	bl	8007932 <USB_ReadDevOutEPInterrupt>
 8002394:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fe81 	bl	80030bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2308      	movs	r3, #8
 80023d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 febd 	bl	8003158 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2310      	movs	r3, #16
 80023f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d030      	beq.n	8002466 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	d109      	bne.n	8002424 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800241e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002422:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f007 fed4 	bl	800a1fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2302      	movs	r3, #2
 8002464:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800247c:	461a      	mov	r2, r3
 800247e:	2320      	movs	r3, #32
 8002480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f af62 	bne.w	8002378 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f005 f9f3 	bl	80078a4 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024c8:	f040 80a4 	bne.w	8002614 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 fa14 	bl	80078fe <USB_ReadDevAllInEpInterrupt>
 80024d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024dc:	e096      	b.n	800260c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 808b 	beq.w	8002600 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f005 fa3a 	bl	800796e <USB_ReadDevInEPInterrupt>
 80024fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d020      	beq.n	8002548 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2201      	movs	r2, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800251a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	69f9      	ldr	r1, [r7, #28]
 8002522:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002526:	4013      	ands	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002536:	461a      	mov	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f007 fdc5 	bl	800a0d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800255e:	461a      	mov	r2, r3
 8002560:	2308      	movs	r3, #8
 8002562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800257a:	461a      	mov	r2, r3
 800257c:	2310      	movs	r3, #16
 800257e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002596:	461a      	mov	r2, r3
 8002598:	2340      	movs	r3, #64	@ 0x40
 800259a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d023      	beq.n	80025ee <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025a8:	6a38      	ldr	r0, [r7, #32]
 80025aa:	f004 facf 	bl	8006b4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3310      	adds	r3, #16
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	78db      	ldrb	r3, [r3, #3]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d108      	bne.n	80025dc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f007 fe22 	bl	800a220 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2302      	movs	r3, #2
 80025ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fcd6 	bl	8002fac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f af65 	bne.w	80024de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f005 f943 	bl	80078a4 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002628:	d122      	bne.n	8002670 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002650:	2100      	movs	r1, #0
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f008 f856 	bl	800a704 <HAL_PCDEx_LPM_Callback>
 8002658:	e002      	b.n	8002660 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f007 fda6 	bl	800a1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800266e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f005 f915 	bl	80078a4 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002684:	d112      	bne.n	80026ac <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f007 fd62 	bl	800a160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f005 f8f7 	bl	80078a4 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026c0:	d121      	bne.n	8002706 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80026d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	f003 020f 	and.w	r2, r3, #15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026f6:	2101      	movs	r1, #1
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f008 f803 	bl	800a704 <HAL_PCDEx_LPM_Callback>
 80026fe:	e002      	b.n	8002706 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f007 fd2d 	bl	800a160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f005 f8ca 	bl	80078a4 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271a:	f040 80b6 	bne.w	800288a <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2110      	movs	r1, #16
 8002738:	4618      	mov	r0, r3
 800273a:	f004 fa07 	bl	8006b4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002742:	e046      	b.n	80027d2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002750:	461a      	mov	r2, r3
 8002752:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002756:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	440a      	add	r2, r1
 800276e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002772:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002776:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800278a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800278c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ce:	3301      	adds	r3, #1
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	4293      	cmp	r3, r2
 80027dc:	d3b2      	bcc.n	8002744 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ec:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7bdb      	ldrb	r3, [r3, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800280a:	f043 030b 	orr.w	r3, r3, #11
 800280e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002820:	f043 030b 	orr.w	r3, r3, #11
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	e015      	b.n	8002854 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002836:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800283a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800283e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800284e:	f043 030b 	orr.w	r3, r3, #11
 8002852:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002862:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002866:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f005 f8d9 	bl	8007a2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f005 f808 	bl	80078a4 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289e:	d123      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 f89e 	bl	80079e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f9c5 	bl	8006c3e <USB_GetDevSpeed>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681c      	ldr	r4, [r3, #0]
 80028c0:	f001 fad4 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 80028c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ca:	461a      	mov	r2, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f003 feeb 	bl	80066a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f007 fc25 	bl	800a122 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80028e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 ffd9 	bl	80078a4 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d10a      	bne.n	8002912 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f007 fc02 	bl	800a106 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 0208 	and.w	r2, r2, #8
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 ffc4 	bl	80078a4 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	2b80      	cmp	r3, #128	@ 0x80
 8002924:	d123      	bne.n	800296e <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002932:	2301      	movs	r3, #1
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
 8002936:	e014      	b.n	8002962 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	b2db      	uxtb	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 faf7 	bl	8002f4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	3301      	adds	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	791b      	ldrb	r3, [r3, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	4293      	cmp	r3, r2
 800296c:	d3e4      	bcc.n	8002938 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 ff96 	bl	80078a4 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002982:	d13c      	bne.n	80029fe <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	e02b      	b.n	80029e2 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3318      	adds	r3, #24
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d115      	bne.n	80029dc <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da12      	bge.n	80029dc <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3317      	adds	r3, #23
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fab7 	bl	8002f4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	3301      	adds	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	791b      	ldrb	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d3cd      	bcc.n	800298a <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 ff4e 	bl	80078a4 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a12:	d156      	bne.n	8002ac2 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a14:	2301      	movs	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a18:	e045      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d12e      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da2b      	bge.n	8002aa0 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d121      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a9c:	6053      	str	r3, [r2, #4]
            break;
 8002a9e:	e008      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	791b      	ldrb	r3, [r3, #4]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d3b3      	bcc.n	8002a1a <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 feec 	bl	80078a4 <USB_ReadInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad6:	d10a      	bne.n	8002aee <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f007 fbb3 	bl	800a244 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fed6 	bl	80078a4 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d115      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f007 fba3 	bl	800a260 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e000      	b.n	8002b2e <HAL_PCD_IRQHandler+0x926>
      return;
 8002b2c:	bf00      	nop
    }
  }
}
 8002b2e:	3734      	adds	r7, #52	@ 0x34
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_PCD_SetAddress+0x1a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e012      	b.n	8002b74 <HAL_PCD_SetAddress+0x40>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fe35 	bl	80077d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	70fb      	strb	r3, [r7, #3]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	803b      	strh	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da0f      	bge.n	8002bc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3310      	adds	r3, #16
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	705a      	strb	r2, [r3, #1]
 8002bc0:	e00f      	b.n	8002be2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bee:	883b      	ldrh	r3, [r7, #0]
 8002bf0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	78ba      	ldrb	r2, [r7, #2]
 8002bfc:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c10:	78bb      	ldrb	r3, [r7, #2]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d102      	bne.n	8002c1c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_PCD_EP_Open+0xae>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e00e      	b.n	8002c48 <HAL_PCD_EP_Open+0xcc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f004 f81f 	bl	8006c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c46:	7afb      	ldrb	r3, [r7, #11]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da0f      	bge.n	8002c84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3310      	adds	r3, #16
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	705a      	strb	r2, [r3, #1]
 8002c82:	e00f      	b.n	8002ca4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_PCD_EP_Close+0x6e>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e00e      	b.n	8002cdc <HAL_PCD_EP_Close+0x8c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f004 f85d 	bl	8006d8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d26:	7afb      	ldrb	r3, [r7, #11]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6979      	ldr	r1, [r7, #20]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f903 	bl	8006f44 <USB_EPStartXfer>

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 020f 	and.w	r2, r3, #15
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	460b      	mov	r3, r1
 8002d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	7afb      	ldrb	r3, [r7, #11]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3310      	adds	r3, #16
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2201      	movs	r2, #1
 8002db6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6979      	ldr	r1, [r7, #20]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 f8ba 	bl	8006f44 <USB_EPStartXfer>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	7912      	ldrb	r2, [r2, #4]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04e      	b.n	8002e96 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	da0f      	bge.n	8002e20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3310      	adds	r3, #16
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	705a      	strb	r2, [r3, #1]
 8002e1e:	e00d      	b.n	8002e3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_PCD_EP_SetStall+0x82>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e01c      	b.n	8002e96 <HAL_PCD_EP_SetStall+0xbc>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68f9      	ldr	r1, [r7, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 fbde 	bl	800762c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d108      	bne.n	8002e8c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f004 fdd0 	bl	8007a2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	7912      	ldrb	r2, [r2, #4]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e042      	b.n	8002f42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da0f      	bge.n	8002ee4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3310      	adds	r3, #16
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	705a      	strb	r2, [r3, #1]
 8002ee2:	e00f      	b.n	8002f04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	3304      	adds	r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_PCD_EP_ClrStall+0x86>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e00e      	b.n	8002f42 <HAL_PCD_EP_ClrStall+0xa4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68f9      	ldr	r1, [r7, #12]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fbe8 	bl	8007708 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da0c      	bge.n	8002f78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 020f 	and.w	r2, r3, #15
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3310      	adds	r3, #16
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e00c      	b.n	8002f92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fa0b 	bl	80073b4 <USB_EPStopXfer>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3310      	adds	r3, #16
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d901      	bls.n	8002fe4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e067      	b.n	80030b4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d902      	bls.n	8003000 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3303      	adds	r3, #3
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003008:	e026      	b.n	8003058 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	429a      	cmp	r2, r3
 800301e:	d902      	bls.n	8003026 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3303      	adds	r3, #3
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68d9      	ldr	r1, [r3, #12]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	b29b      	uxth	r3, r3
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f004 fa64 	bl	8007508 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	441a      	add	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	429a      	cmp	r2, r3
 800306c:	d809      	bhi.n	8003082 <PCD_WriteEmptyTxFifo+0xd6>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003076:	429a      	cmp	r2, r3
 8003078:	d203      	bcs.n	8003082 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1c3      	bne.n	800300a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	429a      	cmp	r2, r3
 800308c:	d811      	bhi.n	80030b2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	2201      	movs	r2, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	6939      	ldr	r1, [r7, #16]
 80030aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030ae:	4013      	ands	r3, r2
 80030b0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	333c      	adds	r3, #60	@ 0x3c
 80030d4:	3304      	adds	r3, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a19      	ldr	r2, [pc, #100]	@ (8003154 <PCD_EP_OutXfrComplete_int+0x98>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d124      	bne.n	800313c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	e01a      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003128:	461a      	mov	r2, r3
 800312a:	2320      	movs	r3, #32
 800312c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f006 ffb1 	bl	800a09c <HAL_PCD_DataOutStageCallback>
 800313a:	e005      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f006 ffaa 	bl	800a09c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	4f54310a 	.word	0x4f54310a

08003158 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	333c      	adds	r3, #60	@ 0x3c
 8003170:	3304      	adds	r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a0c      	ldr	r2, [pc, #48]	@ (80031bc <PCD_EP_OutSetupPacket_int+0x64>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d90e      	bls.n	80031ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f006 ff63 	bl	800a078 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	4f54300a 	.word	0x4f54300a

080031c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
 80031cc:	4613      	mov	r3, r2
 80031ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031de:	883b      	ldrh	r3, [r7, #0]
 80031e0:	0419      	lsls	r1, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ec:	e028      	b.n	8003240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e00d      	b.n	800321e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	3340      	adds	r3, #64	@ 0x40
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4413      	add	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	3301      	adds	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	3b01      	subs	r3, #1
 8003224:	429a      	cmp	r2, r3
 8003226:	d3ec      	bcc.n	8003202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003228:	883b      	ldrh	r3, [r7, #0]
 800322a:	0418      	lsls	r0, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	3b01      	subs	r3, #1
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4302      	orrs	r2, r0
 8003238:	3340      	adds	r3, #64	@ 0x40
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	f043 0303 	orr.w	r3, r3, #3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032bc:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000

080032d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e2:	d130      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e4:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f0:	d038      	beq.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003302:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2232      	movs	r2, #50	@ 0x32
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	4a1b      	ldr	r2, [pc, #108]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0c9b      	lsrs	r3, r3, #18
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003318:	e002      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003320:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332c:	d102      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x60>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f2      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003334:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d110      	bne.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003352:	d007      	beq.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003354:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800335c:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003362:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40007000 	.word	0x40007000
 8003378:	20000000 	.word	0x20000000
 800337c:	431bde83 	.word	0x431bde83

08003380 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003384:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_PWREx_EnableVddUSB+0x1c>)
 800338a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800338e:	6053      	str	r3, [r2, #4]
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e3ca      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b97      	ldr	r3, [pc, #604]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b94      	ldr	r3, [pc, #592]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80e4 	beq.w	800359c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_RCC_OscConfig+0x4a>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	f040 808b 	bne.w	80034f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 8087 	bne.w	80034f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ea:	4b89      	ldr	r3, [pc, #548]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e3a2      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1a      	ldr	r2, [r3, #32]
 8003406:	4b82      	ldr	r3, [pc, #520]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_RCC_OscConfig+0x7c>
 8003412:	4b7f      	ldr	r3, [pc, #508]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800341a:	e005      	b.n	8003428 <HAL_RCC_OscConfig+0x88>
 800341c:	4b7c      	ldr	r3, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003428:	4293      	cmp	r3, r2
 800342a:	d223      	bcs.n	8003474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fd85 	bl	8003f40 <RCC_SetFlashLatencyFromMSIRange>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e383      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003440:	4b73      	ldr	r3, [pc, #460]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a72      	ldr	r2, [pc, #456]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003446:	f043 0308 	orr.w	r3, r3, #8
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	496d      	ldr	r1, [pc, #436]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345e:	4b6c      	ldr	r3, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	4968      	ldr	r1, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
 8003472:	e025      	b.n	80034c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b63      	ldr	r3, [pc, #396]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4960      	ldr	r1, [pc, #384]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	495b      	ldr	r1, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fd45 	bl	8003f40 <RCC_SetFlashLatencyFromMSIRange>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e343      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c0:	f000 fc4a 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b52      	ldr	r3, [pc, #328]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	4950      	ldr	r1, [pc, #320]	@ (8003614 <HAL_RCC_OscConfig+0x274>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
 80034dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003618 <HAL_RCC_OscConfig+0x278>)
 80034de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034e0:	4b4e      	ldr	r3, [pc, #312]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd ff11 	bl	800130c <HAL_InitTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d052      	beq.n	800359a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	e327      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d032      	beq.n	8003566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003500:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a42      	ldr	r2, [pc, #264]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350c:	f7fe f822 	bl	8001554 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003514:	f7fe f81e 	bl	8001554 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e310      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003526:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003532:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a36      	ldr	r2, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4931      	ldr	r1, [pc, #196]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003550:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	492c      	ldr	r1, [pc, #176]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	e01a      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003566:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a29      	ldr	r2, [pc, #164]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003572:	f7fd ffef 	bl	8001554 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800357a:	f7fd ffeb 	bl	8001554 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e2dd      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x1da>
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800359a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d074      	beq.n	8003692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x21a>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d10b      	bne.n	80035d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d064      	beq.n	8003690 <HAL_RCC_OscConfig+0x2f0>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d160      	bne.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e2ba      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x24a>
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e026      	b.n	8003638 <HAL_RCC_OscConfig+0x298>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f2:	d115      	bne.n	8003620 <HAL_RCC_OscConfig+0x280>
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e014      	b.n	8003638 <HAL_RCC_OscConfig+0x298>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	0800a894 	.word	0x0800a894
 8003618:	20000000 	.word	0x20000000
 800361c:	20000004 	.word	0x20000004
 8003620:	4ba0      	ldr	r3, [pc, #640]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9f      	ldr	r2, [pc, #636]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b9d      	ldr	r3, [pc, #628]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a9c      	ldr	r2, [pc, #624]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd ff88 	bl	8001554 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fd ff84 	bl	8001554 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e276      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	4b92      	ldr	r3, [pc, #584]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x2a8>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd ff74 	bl	8001554 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd ff70 	bl	8001554 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e262      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003682:	4b88      	ldr	r3, [pc, #544]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x2d0>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d060      	beq.n	8003760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x310>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d119      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d116      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	4b7c      	ldr	r3, [pc, #496]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_OscConfig+0x328>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e23f      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	4973      	ldr	r1, [pc, #460]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036dc:	e040      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d023      	beq.n	800372e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e6:	4b6f      	ldr	r3, [pc, #444]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6e      	ldr	r2, [pc, #440]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd ff2f 	bl	8001554 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fd ff2b 	bl	8001554 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e21d      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370c:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b62      	ldr	r3, [pc, #392]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	495f      	ldr	r1, [pc, #380]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
 800372c:	e018      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b5d      	ldr	r3, [pc, #372]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd ff0b 	bl	8001554 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003742:	f7fd ff07 	bl	8001554 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e1f9      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003774:	4b4b      	ldr	r3, [pc, #300]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377a:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fee6 	bl	8001554 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378c:	f7fd fee2 	bl	8001554 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1d4      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379e:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x3ec>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ae:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b4:	4a3b      	ldr	r2, [pc, #236]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd fec9 	bl	8001554 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fd fec5 	bl	8001554 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1b7      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80a6 	beq.w	8003940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037f8:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b27      	ldr	r3, [pc, #156]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	4a26      	ldr	r2, [pc, #152]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003810:	4b24      	ldr	r3, [pc, #144]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	4b21      	ldr	r3, [pc, #132]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d118      	bne.n	800385e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003838:	f7fd fe8c 	bl	8001554 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fd fe88 	bl	8001554 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e17a      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_RCC_OscConfig+0x4d8>
 8003866:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003876:	e029      	b.n	80038cc <HAL_RCC_OscConfig+0x52c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d115      	bne.n	80038ac <HAL_RCC_OscConfig+0x50c>
 8003880:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	4a03      	ldr	r2, [pc, #12]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a0:	e014      	b.n	80038cc <HAL_RCC_OscConfig+0x52c>
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	4a9b      	ldr	r2, [pc, #620]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038bc:	4b98      	ldr	r3, [pc, #608]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	4a97      	ldr	r2, [pc, #604]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fe3e 	bl	8001554 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fd fe3a 	bl	8001554 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e12a      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ed      	beq.n	80038dc <HAL_RCC_OscConfig+0x53c>
 8003900:	e015      	b.n	800392e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fd fe27 	bl	8001554 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fd fe23 	bl	8001554 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e113      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003920:	4b7f      	ldr	r3, [pc, #508]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ed      	bne.n	800390a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392e:	7ffb      	ldrb	r3, [r7, #31]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b7a      	ldr	r3, [pc, #488]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	4a79      	ldr	r2, [pc, #484]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80fe 	beq.w	8003b46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	2b02      	cmp	r3, #2
 8003950:	f040 80d0 	bne.w	8003af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003954:	4b72      	ldr	r3, [pc, #456]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	429a      	cmp	r2, r3
 8003966:	d130      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	3b01      	subs	r3, #1
 8003974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d127      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d11f      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003994:	2a07      	cmp	r2, #7
 8003996:	bf14      	ite	ne
 8003998:	2201      	movne	r2, #1
 800399a:	2200      	moveq	r2, #0
 800399c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d06e      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d069      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039d0:	4b53      	ldr	r3, [pc, #332]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039dc:	4b50      	ldr	r3, [pc, #320]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0ad      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f8:	f7fd fdac 	bl	8001554 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd fda8 	bl	8001554 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e09a      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a12:	4b43      	ldr	r3, [pc, #268]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1e:	4b40      	ldr	r3, [pc, #256]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	4b40      	ldr	r3, [pc, #256]	@ (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	4311      	orrs	r1, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a38:	0212      	lsls	r2, r2, #8
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a4c:	0852      	lsrs	r2, r2, #1
 8003a4e:	3a01      	subs	r2, #1
 8003a50:	0652      	lsls	r2, r2, #25
 8003a52:	4311      	orrs	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a58:	0912      	lsrs	r2, r2, #4
 8003a5a:	0452      	lsls	r2, r2, #17
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4930      	ldr	r1, [pc, #192]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a64:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b2b      	ldr	r3, [pc, #172]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a7c:	f7fd fd6a 	bl	8001554 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fd66 	bl	8001554 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e058      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa2:	e050      	b.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e04f      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d148      	bne.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b17      	ldr	r3, [pc, #92]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a16      	ldr	r2, [pc, #88]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003acc:	f7fd fd42 	bl	8001554 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fd3e 	bl	8001554 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e030      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x734>
 8003af2:	e028      	b.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d023      	beq.n	8003b42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd fd25 	bl	8001554 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0c:	e00c      	b.n	8003b28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fd fd21 	bl	8001554 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d905      	bls.n	8003b28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e013      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_OscConfig+0x7b0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ec      	bne.n	8003b0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0x7b0>)
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	4905      	ldr	r1, [pc, #20]	@ (8003b50 <HAL_RCC_OscConfig+0x7b0>)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_RCC_OscConfig+0x7b4>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
 8003b40:	e001      	b.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	feeefffc 	.word	0xfeeefffc

08003b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0e7      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b75      	ldr	r3, [pc, #468]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d910      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b72      	ldr	r3, [pc, #456]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	4970      	ldr	r1, [pc, #448]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cf      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b66      	ldr	r3, [pc, #408]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d908      	bls.n	8003bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4960      	ldr	r1, [pc, #384]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04c      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b5a      	ldr	r3, [pc, #360]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0a6      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	4b54      	ldr	r3, [pc, #336]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e09a      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e08e      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e086      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4943      	ldr	r1, [pc, #268]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd fc88 	bl	8001554 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fd fc84 	bl	8001554 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e06e      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b31      	ldr	r3, [pc, #196]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d208      	bcs.n	8003c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	492b      	ldr	r1, [pc, #172]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9e:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d210      	bcs.n	8003cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cac:	4b25      	ldr	r3, [pc, #148]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 0207 	bic.w	r2, r3, #7
 8003cb4:	4923      	ldr	r1, [pc, #140]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbc:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e036      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cda:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4918      	ldr	r1, [pc, #96]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4910      	ldr	r1, [pc, #64]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d0c:	f000 f824 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	490b      	ldr	r1, [pc, #44]	@ (8003d4c <HAL_RCC_ClockConfig+0x1f4>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <HAL_RCC_ClockConfig+0x1f8>)
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d2c:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <HAL_RCC_ClockConfig+0x1fc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd faeb 	bl	800130c <HAL_InitTick>
 8003d36:	4603      	mov	r3, r0
 8003d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	0800a894 	.word	0x0800a894
 8003d50:	20000000 	.word	0x20000000
 8003d54:	20000004 	.word	0x20000004

08003d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	@ 0x24
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d66:	4b3e      	ldr	r3, [pc, #248]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d70:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x34>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d121      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d11e      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d8c:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	e005      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003db4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd0:	4b25      	ldr	r3, [pc, #148]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e004      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ddc:	4b22      	ldr	r3, [pc, #136]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d134      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d003      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0xac>
 8003dfc:	e005      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e00:	617b      	str	r3, [r7, #20]
      break;
 8003e02:	e005      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e06:	617b      	str	r3, [r7, #20]
      break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	617b      	str	r3, [r7, #20]
      break;
 8003e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	fb03 f202 	mul.w	r2, r3, r2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	0e5b      	lsrs	r3, r3, #25
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	3301      	adds	r3, #1
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e50:	69bb      	ldr	r3, [r7, #24]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3724      	adds	r7, #36	@ 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	0800a8ac 	.word	0x0800a8ac
 8003e68:	00f42400 	.word	0x00f42400

08003e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4904      	ldr	r1, [pc, #16]	@ (8003eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	0800a8a4 	.word	0x0800a8a4

08003eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eb4:	f7ff ffda 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0adb      	lsrs	r3, r3, #11
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4904      	ldr	r1, [pc, #16]	@ (8003ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	0800a8a4 	.word	0x0800a8a4

08003edc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	220f      	movs	r2, #15
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f04:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	08db      	lsrs	r3, r3, #3
 8003f16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f1e:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <HAL_RCC_GetClockConfig+0x60>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	601a      	str	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40022000 	.word	0x40022000

08003f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f58:	f7ff f9ae 	bl	80032b8 <HAL_PWREx_GetVoltageRange>
 8003f5c:	6178      	str	r0, [r7, #20]
 8003f5e:	e014      	b.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f60:	4b25      	ldr	r3, [pc, #148]	@ (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f64:	4a24      	ldr	r2, [pc, #144]	@ (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6c:	4b22      	ldr	r3, [pc, #136]	@ (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f78:	f7ff f99e 	bl	80032b8 <HAL_PWREx_GetVoltageRange>
 8003f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f90:	d10b      	bne.n	8003faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b80      	cmp	r3, #128	@ 0x80
 8003f96:	d919      	bls.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f9c:	d902      	bls.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e013      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	e010      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b80      	cmp	r3, #128	@ 0x80
 8003fae:	d902      	bls.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e00a      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b80      	cmp	r3, #128	@ 0x80
 8003fba:	d102      	bne.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e004      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b70      	cmp	r3, #112	@ 0x70
 8003fc6:	d101      	bne.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 0207 	bic.w	r2, r3, #7
 8003fd4:	4909      	ldr	r1, [pc, #36]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40022000 	.word	0x40022000

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004008:	2300      	movs	r3, #0
 800400a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800400c:	2300      	movs	r3, #0
 800400e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004018:	2b00      	cmp	r3, #0
 800401a:	d041      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004020:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004024:	d02a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004026:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800402a:	d824      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800402c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004030:	d008      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004036:	d81e      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004040:	d010      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004042:	e018      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004044:	4b86      	ldr	r3, [pc, #536]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a85      	ldr	r2, [pc, #532]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004050:	e015      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fabb 	bl	80045d4 <RCCEx_PLLSAI1_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004062:	e00c      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3320      	adds	r3, #32
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fba6 	bl	80047bc <RCCEx_PLLSAI2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004074:	e003      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	74fb      	strb	r3, [r7, #19]
      break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800407c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004084:	4b76      	ldr	r3, [pc, #472]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004092:	4973      	ldr	r1, [pc, #460]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d041      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040b4:	d02a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040ba:	d824      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c0:	d008      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c6:	d81e      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d0:	d010      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040d2:	e018      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040d4:	4b62      	ldr	r3, [pc, #392]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a61      	ldr	r2, [pc, #388]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040e0:	e015      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa73 	bl	80045d4 <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040f2:	e00c      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3320      	adds	r3, #32
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb5e 	bl	80047bc <RCCEx_PLLSAI2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004104:	e003      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	74fb      	strb	r3, [r7, #19]
      break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800410c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004114:	4b52      	ldr	r3, [pc, #328]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004122:	494f      	ldr	r1, [pc, #316]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a0 	beq.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004142:	4b47      	ldr	r3, [pc, #284]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b41      	ldr	r3, [pc, #260]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	4a40      	ldr	r2, [pc, #256]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004162:	6593      	str	r3, [r2, #88]	@ 0x58
 8004164:	4b3e      	ldr	r3, [pc, #248]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004170:	2301      	movs	r3, #1
 8004172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004174:	4b3b      	ldr	r3, [pc, #236]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3a      	ldr	r2, [pc, #232]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800417a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004180:	f7fd f9e8 	bl	8001554 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004186:	e009      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004188:	f7fd f9e4 	bl	8001554 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d902      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	74fb      	strb	r3, [r7, #19]
        break;
 800419a:	e005      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800419c:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d15c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01f      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d019      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041cc:	4b24      	ldr	r3, [pc, #144]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041d8:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041f8:	4a19      	ldr	r2, [pc, #100]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd f9a3 	bl	8001554 <HAL_GetTick>
 800420e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004210:	e00b      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd f99f 	bl	8001554 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d902      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	74fb      	strb	r3, [r7, #19]
            break;
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422a:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ec      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10c      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423e:	4b08      	ldr	r3, [pc, #32]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800424e:	4904      	ldr	r1, [pc, #16]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004256:	e009      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	74bb      	strb	r3, [r7, #18]
 800425c:	e006      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800426c:	7c7b      	ldrb	r3, [r7, #17]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4b9e      	ldr	r3, [pc, #632]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	4a9d      	ldr	r2, [pc, #628]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800427c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428a:	4b98      	ldr	r3, [pc, #608]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004290:	f023 0203 	bic.w	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	4994      	ldr	r1, [pc, #592]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ac:	4b8f      	ldr	r3, [pc, #572]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	f023 020c 	bic.w	r2, r3, #12
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	498c      	ldr	r1, [pc, #560]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ce:	4b87      	ldr	r3, [pc, #540]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	4983      	ldr	r1, [pc, #524]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f0:	4b7e      	ldr	r3, [pc, #504]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	497b      	ldr	r1, [pc, #492]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004312:	4b76      	ldr	r3, [pc, #472]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	4972      	ldr	r1, [pc, #456]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004334:	4b6d      	ldr	r3, [pc, #436]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	496a      	ldr	r1, [pc, #424]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004356:	4b65      	ldr	r3, [pc, #404]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	4961      	ldr	r1, [pc, #388]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004378:	4b5c      	ldr	r3, [pc, #368]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004386:	4959      	ldr	r1, [pc, #356]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439a:	4b54      	ldr	r3, [pc, #336]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	4950      	ldr	r1, [pc, #320]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043bc:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ca:	4948      	ldr	r1, [pc, #288]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043de:	4b43      	ldr	r3, [pc, #268]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	493f      	ldr	r1, [pc, #252]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d028      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004400:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800440e:	4937      	ldr	r1, [pc, #220]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441e:	d106      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004420:	4b32      	ldr	r3, [pc, #200]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a31      	ldr	r2, [pc, #196]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	60d3      	str	r3, [r2, #12]
 800442c:	e011      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004432:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004436:	d10c      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f8c8 	bl	80045d4 <RCCEx_PLLSAI1_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d028      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800445e:	4b23      	ldr	r3, [pc, #140]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	491f      	ldr	r1, [pc, #124]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800447c:	d106      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447e:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	4a1a      	ldr	r2, [pc, #104]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004488:	60d3      	str	r3, [r2, #12]
 800448a:	e011      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3304      	adds	r3, #4
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f899 	bl	80045d4 <RCCEx_PLLSAI1_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02b      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ca:	4908      	ldr	r1, [pc, #32]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044da:	d109      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a02      	ldr	r2, [pc, #8]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044e6:	60d3      	str	r3, [r2, #12]
 80044e8:	e014      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f867 	bl	80045d4 <RCCEx_PLLSAI1_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004510:	7cfb      	ldrb	r3, [r7, #19]
 8004512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004520:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004526:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800452e:	4928      	ldr	r1, [pc, #160]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800453a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800453e:	d10d      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f844 	bl	80045d4 <RCCEx_PLLSAI1_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d014      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	74bb      	strb	r3, [r7, #18]
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004564:	d10c      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3320      	adds	r3, #32
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f925 	bl	80047bc <RCCEx_PLLSAI2_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800458c:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800459a:	490d      	ldr	r1, [pc, #52]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	4904      	ldr	r1, [pc, #16]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000

080045d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045e2:	4b75      	ldr	r3, [pc, #468]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d018      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045ee:	4b72      	ldr	r3, [pc, #456]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0203 	and.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d10d      	bne.n	800461a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
       ||
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004606:	4b6c      	ldr	r3, [pc, #432]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
       ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d047      	beq.n	80046aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e044      	b.n	80046aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d018      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x86>
 8004628:	2b03      	cmp	r3, #3
 800462a:	d825      	bhi.n	8004678 <RCCEx_PLLSAI1_Config+0xa4>
 800462c:	2b01      	cmp	r3, #1
 800462e:	d002      	beq.n	8004636 <RCCEx_PLLSAI1_Config+0x62>
 8004630:	2b02      	cmp	r3, #2
 8004632:	d009      	beq.n	8004648 <RCCEx_PLLSAI1_Config+0x74>
 8004634:	e020      	b.n	8004678 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004636:	4b60      	ldr	r3, [pc, #384]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11d      	bne.n	800467e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e01a      	b.n	800467e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004648:	4b5b      	ldr	r3, [pc, #364]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d116      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004658:	e013      	b.n	8004682 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800465a:	4b57      	ldr	r3, [pc, #348]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004666:	4b54      	ldr	r3, [pc, #336]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004676:	e006      	b.n	8004686 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e004      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467e:	bf00      	nop
 8004680:	e002      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004686:	bf00      	nop
    }

    if(status == HAL_OK)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800468e:	4b4a      	ldr	r3, [pc, #296]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	430b      	orrs	r3, r1
 80046a4:	4944      	ldr	r1, [pc, #272]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d17d      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046b0:	4b41      	ldr	r3, [pc, #260]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a40      	ldr	r2, [pc, #256]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046bc:	f7fc ff4a 	bl	8001554 <HAL_GetTick>
 80046c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046c2:	e009      	b.n	80046d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c4:	f7fc ff46 	bl	8001554 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	73fb      	strb	r3, [r7, #15]
        break;
 80046d6:	e005      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d8:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ef      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d160      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d111      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80046f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6892      	ldr	r2, [r2, #8]
 8004700:	0211      	lsls	r1, r2, #8
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68d2      	ldr	r2, [r2, #12]
 8004706:	0912      	lsrs	r2, r2, #4
 8004708:	0452      	lsls	r2, r2, #17
 800470a:	430a      	orrs	r2, r1
 800470c:	492a      	ldr	r1, [pc, #168]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	610b      	str	r3, [r1, #16]
 8004712:	e027      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d112      	bne.n	8004740 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004722:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6892      	ldr	r2, [r2, #8]
 800472a:	0211      	lsls	r1, r2, #8
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6912      	ldr	r2, [r2, #16]
 8004730:	0852      	lsrs	r2, r2, #1
 8004732:	3a01      	subs	r2, #1
 8004734:	0552      	lsls	r2, r2, #21
 8004736:	430a      	orrs	r2, r1
 8004738:	491f      	ldr	r1, [pc, #124]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
 800473e:	e011      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004740:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004748:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	0211      	lsls	r1, r2, #8
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6952      	ldr	r2, [r2, #20]
 8004756:	0852      	lsrs	r2, r2, #1
 8004758:	3a01      	subs	r2, #1
 800475a:	0652      	lsls	r2, r2, #25
 800475c:	430a      	orrs	r2, r1
 800475e:	4916      	ldr	r1, [pc, #88]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004764:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800476e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fc fef0 	bl	8001554 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004776:	e009      	b.n	800478c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004778:	f7fc feec 	bl	8001554 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d902      	bls.n	800478c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	73fb      	strb	r3, [r7, #15]
          break;
 800478a:	e005      	b.n	8004798 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ef      	beq.n	8004778 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000

080047bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047d6:	4b67      	ldr	r3, [pc, #412]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0203 	and.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10d      	bne.n	8004802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047ee:	4b61      	ldr	r3, [pc, #388]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
       ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d047      	beq.n	8004892 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	e044      	b.n	8004892 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d018      	beq.n	8004842 <RCCEx_PLLSAI2_Config+0x86>
 8004810:	2b03      	cmp	r3, #3
 8004812:	d825      	bhi.n	8004860 <RCCEx_PLLSAI2_Config+0xa4>
 8004814:	2b01      	cmp	r3, #1
 8004816:	d002      	beq.n	800481e <RCCEx_PLLSAI2_Config+0x62>
 8004818:	2b02      	cmp	r3, #2
 800481a:	d009      	beq.n	8004830 <RCCEx_PLLSAI2_Config+0x74>
 800481c:	e020      	b.n	8004860 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481e:	4b55      	ldr	r3, [pc, #340]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11d      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482e:	e01a      	b.n	8004866 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004830:	4b50      	ldr	r3, [pc, #320]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e013      	b.n	800486a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004842:	4b4c      	ldr	r3, [pc, #304]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800484e:	4b49      	ldr	r3, [pc, #292]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800485e:	e006      	b.n	800486e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e004      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004866:	bf00      	nop
 8004868:	e002      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800486e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004876:	4b3f      	ldr	r3, [pc, #252]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6819      	ldr	r1, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	430b      	orrs	r3, r1
 800488c:	4939      	ldr	r1, [pc, #228]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d167      	bne.n	8004968 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004898:	4b36      	ldr	r3, [pc, #216]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a35      	ldr	r2, [pc, #212]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fc fe56 	bl	8001554 <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048aa:	e009      	b.n	80048c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048ac:	f7fc fe52 	bl	8001554 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d902      	bls.n	80048c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	73fb      	strb	r3, [r7, #15]
        break;
 80048be:	e005      	b.n	80048cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ef      	bne.n	80048ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d14a      	bne.n	8004968 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d111      	bne.n	80048fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d8:	4b26      	ldr	r3, [pc, #152]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6892      	ldr	r2, [r2, #8]
 80048e8:	0211      	lsls	r1, r2, #8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68d2      	ldr	r2, [r2, #12]
 80048ee:	0912      	lsrs	r2, r2, #4
 80048f0:	0452      	lsls	r2, r2, #17
 80048f2:	430a      	orrs	r2, r1
 80048f4:	491f      	ldr	r1, [pc, #124]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	614b      	str	r3, [r1, #20]
 80048fa:	e011      	b.n	8004920 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004904:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6892      	ldr	r2, [r2, #8]
 800490c:	0211      	lsls	r1, r2, #8
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6912      	ldr	r2, [r2, #16]
 8004912:	0852      	lsrs	r2, r2, #1
 8004914:	3a01      	subs	r2, #1
 8004916:	0652      	lsls	r2, r2, #25
 8004918:	430a      	orrs	r2, r1
 800491a:	4916      	ldr	r1, [pc, #88]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004920:	4b14      	ldr	r3, [pc, #80]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a13      	ldr	r2, [pc, #76]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fc fe12 	bl	8001554 <HAL_GetTick>
 8004930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004932:	e009      	b.n	8004948 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004934:	f7fc fe0e 	bl	8001554 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d902      	bls.n	8004948 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	73fb      	strb	r3, [r7, #15]
          break;
 8004946:	e005      	b.n	8004954 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004948:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ef      	beq.n	8004934 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800495a:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4904      	ldr	r1, [pc, #16]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0be      	b.n	8004b08 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800499a:	d009      	beq.n	80049b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
 80049a2:	e005      	b.n	80049b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fc fbf9 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049ea:	d902      	bls.n	80049f2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e002      	b.n	80049f8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a00:	d007      	beq.n	8004a12 <HAL_SPI_Init+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	ea42 0103 	orr.w	r1, r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a70:	d11b      	bne.n	8004aaa <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a82:	d903      	bls.n	8004a8c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a8a:	e002      	b.n	8004a92 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d107      	bne.n	8004aaa <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	f003 0204 	and.w	r2, r3, #4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ad0:	ea42 0103 	orr.w	r1, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aea:	d105      	bne.n	8004af8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	b292      	uxth	r2, r2
 8004af6:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b090      	sub	sp, #64	@ 0x40
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b26:	2301      	movs	r3, #1
 8004b28:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b2a:	f7fc fd13 	bl	8001554 <HAL_GetTick>
 8004b2e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8004b40:	887b      	ldrh	r3, [r7, #2]
 8004b42:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8004b44:	887b      	ldrh	r3, [r7, #2]
 8004b46:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d00d      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x6c>
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b66:	d107      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d103      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x68>
 8004b70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d001      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e30f      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x7e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x7e>
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e304      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x90>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e2fd      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d003      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	887a      	ldrh	r2, [r7, #2]
 8004be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfe:	d10f      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c1e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c28:	d802      	bhi.n	8004c30 <HAL_SPI_TransmitReceive+0x120>
 8004c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d908      	bls.n	8004c42 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c3e:	605a      	str	r2, [r3, #4]
 8004c40:	e007      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d007      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c78:	f240 80d0 	bls.w	8004e1c <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x17c>
 8004c84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 80ba 	bne.w	8004e00 <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	881a      	ldrh	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 80a2 	bne.w	8004e00 <HAL_SPI_TransmitReceive+0x2f0>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc4:	f040 809c 	bne.w	8004e00 <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10c      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x1dc>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cea:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cfa:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cfc:	e080      	b.n	8004e00 <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d13f      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x27c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d03a      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x27c>
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d137      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d11e      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x27c>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d56:	d119      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x26c>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d8a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d11c      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x2c4>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	b292      	uxth	r2, r2
 8004db2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dd4:	f7fc fbbe 	bl	8001554 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d80d      	bhi.n	8004e00 <HAL_SPI_TransmitReceive+0x2f0>
 8004de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dea:	d009      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e1cd      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f47f af79 	bne.w	8004cfe <HAL_SPI_TransmitReceive+0x1ee>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f af72 	bne.w	8004cfe <HAL_SPI_TransmitReceive+0x1ee>
 8004e1a:	e12f      	b.n	800507c <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_SPI_TransmitReceive+0x31c>
 8004e24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	f040 811b 	bne.w	8005062 <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d912      	bls.n	8004e5c <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	881a      	ldrh	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b02      	subs	r3, #2
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e5a:	e102      	b.n	8005062 <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 80ea 	bne.w	8005062 <HAL_SPI_TransmitReceive+0x552>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e96:	f040 80e4 	bne.w	8005062 <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10c      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x3ae>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ebc:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ecc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ece:	e0c8      	b.n	8005062 <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d158      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x480>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d053      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x480>
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d150      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d912      	bls.n	8004f1e <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	881a      	ldrh	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b02      	subs	r3, #2
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f1c:	e012      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11e      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x480>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5a:	d119      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x470>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f8e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d148      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x520>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d042      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d923      	bls.n	8004ffe <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	b292      	uxth	r2, r2
 8004fc2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	1c9a      	adds	r2, r3, #2
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b02      	subs	r3, #2
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d81f      	bhi.n	800502c <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	e016      	b.n	800502c <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f103 020c 	add.w	r2, r3, #12
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	7812      	ldrb	r2, [r2, #0]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800502c:	2301      	movs	r3, #1
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005030:	f7fc fa90 	bl	8001554 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800503c:	429a      	cmp	r2, r3
 800503e:	d803      	bhi.n	8005048 <HAL_SPI_TransmitReceive+0x538>
 8005040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005046:	d102      	bne.n	800504e <HAL_SPI_TransmitReceive+0x53e>
 8005048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e09c      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f af31 	bne.w	8004ed0 <HAL_SPI_TransmitReceive+0x3c0>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	f47f af2a 	bne.w	8004ed0 <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005084:	d152      	bne.n	800512c <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800508c:	2201      	movs	r2, #1
 800508e:	2101      	movs	r1, #1
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f991 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00f      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a0:	f043 0202 	orr.w	r2, r3, #2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e06f      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80050c4:	d105      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	e02c      	b.n	800512c <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050e2:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d11f      	bne.n	800512c <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050f2:	2201      	movs	r2, #1
 80050f4:	2101      	movs	r1, #1
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f95e 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00f      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	f043 0202 	orr.w	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e03c      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800512a:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d110      	bne.n	800515c <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	f043 0202 	orr.w	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800514e:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e01f      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800515c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fa47 	bl	80055f4 <SPI_EndRxTxTransaction>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e00e      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 800519a:	2300      	movs	r3, #0
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3738      	adds	r7, #56	@ 0x38
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10e      	bne.n	80051e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
    return;
 80051e2:	e0ce      	b.n	8005382 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_SPI_IRQHandler+0x5e>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
    return;
 8005200:	e0bf      	b.n	8005382 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <HAL_SPI_IRQHandler+0x7e>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80b0 	beq.w	8005382 <HAL_SPI_IRQHandler+0x1de>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80aa 	beq.w	8005382 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d023      	beq.n	8005280 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b03      	cmp	r3, #3
 8005242:	d011      	beq.n	8005268 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005248:	f043 0204 	orr.w	r2, r3, #4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	e00b      	b.n	8005280 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
        return;
 800527e:	e080      	b.n	8005382 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d014      	beq.n	80052b4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c2:	f043 0208 	orr.w	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d04f      	beq.n	8005380 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <HAL_SPI_IRQHandler+0x168>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d034      	beq.n	8005376 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0203 	bic.w	r2, r2, #3
 800531a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005320:	2b00      	cmp	r3, #0
 8005322:	d011      	beq.n	8005348 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005328:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_SPI_IRQHandler+0x1e4>)
 800532a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005330:	4618      	mov	r0, r3
 8005332:	f7fc fc27 	bl	8001b84 <HAL_DMA_Abort_IT>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005340:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	4a0c      	ldr	r2, [pc, #48]	@ (8005388 <HAL_SPI_IRQHandler+0x1e4>)
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535c:	4618      	mov	r0, r3
 800535e:	f7fc fc11 	bl	8001b84 <HAL_DMA_Abort_IT>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005374:	e003      	b.n	800537e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb feb2 	bl	80010e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800537c:	e000      	b.n	8005380 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800537e:	bf00      	nop
    return;
 8005380:	bf00      	nop
  }
}
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	0800538d 	.word	0x0800538d

0800538c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7fb fe99 	bl	80010e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c8:	f7fc f8c4 	bl	8001554 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d8:	f7fc f8bc 	bl	8001554 <HAL_GetTick>
 80053dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053de:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	015b      	lsls	r3, r3, #5
 80053e4:	0d1b      	lsrs	r3, r3, #20
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	e054      	b.n	800549a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053f6:	d050      	beq.n	800549a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f8:	f7fc f8ac 	bl	8001554 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	429a      	cmp	r2, r3
 8005406:	d902      	bls.n	800540e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d13d      	bne.n	800548a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800541c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005426:	d111      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005430:	d004      	beq.n	800543c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d107      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005454:	d10f      	bne.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e017      	b.n	80054ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3b01      	subs	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d19b      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000000 	.word	0x20000000

080054c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	@ 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054da:	f7fc f83b 	bl	8001554 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	4413      	add	r3, r2
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80054ea:	f7fc f833 	bl	8001554 <HAL_GetTick>
 80054ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054f8:	4b3d      	ldr	r3, [pc, #244]	@ (80055f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00da      	lsls	r2, r3, #3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	0d1b      	lsrs	r3, r3, #20
 8005508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005510:	e060      	b.n	80055d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005518:	d107      	bne.n	800552a <SPI_WaitFifoStateUntilTimeout+0x62>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005528:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005530:	d050      	beq.n	80055d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005532:	f7fc f80f 	bl	8001554 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553e:	429a      	cmp	r2, r3
 8005540:	d902      	bls.n	8005548 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d13d      	bne.n	80055c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005556:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005560:	d111      	bne.n	8005586 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556a:	d004      	beq.n	8005576 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005574:	d107      	bne.n	8005586 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005584:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800558e:	d10f      	bne.n	80055b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e010      	b.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d196      	bne.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3728      	adds	r7, #40	@ 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000000 	.word	0x20000000

080055f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff ff5b 	bl	80054c8 <SPI_WaitFifoStateUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e027      	b.n	8005678 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2200      	movs	r2, #0
 8005630:	2180      	movs	r1, #128	@ 0x80
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fec0 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e014      	b.n	8005678 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff ff34 	bl	80054c8 <SPI_WaitFifoStateUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e000      	b.n	8005678 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e049      	b.n	8005726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f841 	bl	800572e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f000 f9e0 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d001      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e04f      	b.n	80057fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a23      	ldr	r2, [pc, #140]	@ (8005808 <HAL_TIM_Base_Start_IT+0xc4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01d      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x76>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005786:	d018      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x76>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <HAL_TIM_Base_Start_IT+0xc8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x76>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1e      	ldr	r2, [pc, #120]	@ (8005810 <HAL_TIM_Base_Start_IT+0xcc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x76>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <HAL_TIM_Base_Start_IT+0xd0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x76>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <HAL_TIM_Base_Start_IT+0xd4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x76>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a19      	ldr	r2, [pc, #100]	@ (800581c <HAL_TIM_Base_Start_IT+0xd8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d115      	bne.n	80057e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_TIM_Base_Start_IT+0xdc>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d015      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0xb4>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d2:	d011      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	e008      	b.n	80057f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e000      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	00010007 	.word	0x00010007

08005824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0202 	mvn.w	r2, #2
 8005858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8e9 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8db 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8ec 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0204 	mvn.w	r2, #4
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f8c3 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8b5 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f8c6 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d020      	beq.n	8005920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0208 	mvn.w	r2, #8
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2204      	movs	r2, #4
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f89d 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f88f 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8a0 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b00      	cmp	r3, #0
 8005928:	d020      	beq.n	800596c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01b      	beq.n	800596c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0210 	mvn.w	r2, #16
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2208      	movs	r2, #8
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f877 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f869 	bl	8005a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f87a 	bl	8005a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0201 	mvn.w	r2, #1
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fb fbba 	bl	8001104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f913 	bl	8005be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00c      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f90b 	bl	8005bf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f834 	bl	8005a6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0220 	mvn.w	r2, #32
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8d3 	bl	8005bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a46      	ldr	r2, [pc, #280]	@ (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a43      	ldr	r2, [pc, #268]	@ (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a42      	ldr	r2, [pc, #264]	@ (8005bb8 <TIM_Base_SetConfig+0x134>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a41      	ldr	r2, [pc, #260]	@ (8005bbc <TIM_Base_SetConfig+0x138>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a40      	ldr	r2, [pc, #256]	@ (8005bc0 <TIM_Base_SetConfig+0x13c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a35      	ldr	r2, [pc, #212]	@ (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01f      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d01b      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a32      	ldr	r2, [pc, #200]	@ (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d017      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a31      	ldr	r2, [pc, #196]	@ (8005bb8 <TIM_Base_SetConfig+0x134>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a30      	ldr	r2, [pc, #192]	@ (8005bbc <TIM_Base_SetConfig+0x138>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00f      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc0 <TIM_Base_SetConfig+0x13c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <TIM_Base_SetConfig+0x140>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc8 <TIM_Base_SetConfig+0x144>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_Base_SetConfig+0x9a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2c      	ldr	r2, [pc, #176]	@ (8005bcc <TIM_Base_SetConfig+0x148>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d108      	bne.n	8005b30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a16      	ldr	r2, [pc, #88]	@ (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <TIM_Base_SetConfig+0xf8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <TIM_Base_SetConfig+0x13c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_Base_SetConfig+0xf8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <TIM_Base_SetConfig+0x140>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_Base_SetConfig+0xf8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	@ (8005bc8 <TIM_Base_SetConfig+0x144>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_Base_SetConfig+0xf8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <TIM_Base_SetConfig+0x148>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d103      	bne.n	8005b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f023 0201 	bic.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	611a      	str	r2, [r3, #16]
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e040      	b.n	8005ca0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb fb0e 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	@ 0x24
 8005c38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fae0 	bl	8006218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f825 	bl	8005ca8 <UART_SetConfig>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e01b      	b.n	8005ca0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fb5f 	bl	800635c <UART_CheckIdleState>
 8005c9e:	4603      	mov	r3, r0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b08a      	sub	sp, #40	@ 0x28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005f68 <UART_SetConfig+0x2c0>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a99      	ldr	r2, [pc, #612]	@ (8005f6c <UART_SetConfig+0x2c4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	4313      	orrs	r3, r2
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a90      	ldr	r2, [pc, #576]	@ (8005f70 <UART_SetConfig+0x2c8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d126      	bne.n	8005d80 <UART_SetConfig+0xd8>
 8005d32:	4b90      	ldr	r3, [pc, #576]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d81b      	bhi.n	8005d78 <UART_SetConfig+0xd0>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0xa0>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5e:	e116      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d66:	e112      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e10e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e10a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	e106      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7c      	ldr	r2, [pc, #496]	@ (8005f78 <UART_SetConfig+0x2d0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d138      	bne.n	8005dfc <UART_SetConfig+0x154>
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	d82d      	bhi.n	8005df4 <UART_SetConfig+0x14c>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <UART_SetConfig+0xf8>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005df5 	.word	0x08005df5
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005df5 	.word	0x08005df5
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005df5 	.word	0x08005df5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005df5 	.word	0x08005df5
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dda:	e0d8      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e0d4      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e0d0      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e0cc      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfa:	e0c8      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5e      	ldr	r2, [pc, #376]	@ (8005f7c <UART_SetConfig+0x2d4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d125      	bne.n	8005e52 <UART_SetConfig+0x1aa>
 8005e06:	4b5b      	ldr	r3, [pc, #364]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d016      	beq.n	8005e42 <UART_SetConfig+0x19a>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d818      	bhi.n	8005e4a <UART_SetConfig+0x1a2>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d00a      	beq.n	8005e32 <UART_SetConfig+0x18a>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d814      	bhi.n	8005e4a <UART_SetConfig+0x1a2>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <UART_SetConfig+0x182>
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d008      	beq.n	8005e3a <UART_SetConfig+0x192>
 8005e28:	e00f      	b.n	8005e4a <UART_SetConfig+0x1a2>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e30:	e0ad      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e32:	2302      	movs	r3, #2
 8005e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e38:	e0a9      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e40:	e0a5      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e42:	2308      	movs	r3, #8
 8005e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e48:	e0a1      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e50:	e09d      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a4a      	ldr	r2, [pc, #296]	@ (8005f80 <UART_SetConfig+0x2d8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d125      	bne.n	8005ea8 <UART_SetConfig+0x200>
 8005e5c:	4b45      	ldr	r3, [pc, #276]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e68:	d016      	beq.n	8005e98 <UART_SetConfig+0x1f0>
 8005e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e6c:	d818      	bhi.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e6e:	2b80      	cmp	r3, #128	@ 0x80
 8005e70:	d00a      	beq.n	8005e88 <UART_SetConfig+0x1e0>
 8005e72:	2b80      	cmp	r3, #128	@ 0x80
 8005e74:	d814      	bhi.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <UART_SetConfig+0x1d8>
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d008      	beq.n	8005e90 <UART_SetConfig+0x1e8>
 8005e7e:	e00f      	b.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e082      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e07e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e07a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e076      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e072      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <UART_SetConfig+0x2dc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d12a      	bne.n	8005f08 <UART_SetConfig+0x260>
 8005eb2:	4b30      	ldr	r3, [pc, #192]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec0:	d01a      	beq.n	8005ef8 <UART_SetConfig+0x250>
 8005ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec6:	d81b      	bhi.n	8005f00 <UART_SetConfig+0x258>
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ecc:	d00c      	beq.n	8005ee8 <UART_SetConfig+0x240>
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed2:	d815      	bhi.n	8005f00 <UART_SetConfig+0x258>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <UART_SetConfig+0x238>
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005edc:	d008      	beq.n	8005ef0 <UART_SetConfig+0x248>
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x258>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee6:	e052      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eee:	e04e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e04a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e046      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e042      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a17      	ldr	r2, [pc, #92]	@ (8005f6c <UART_SetConfig+0x2c4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d13a      	bne.n	8005f88 <UART_SetConfig+0x2e0>
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f20:	d01a      	beq.n	8005f58 <UART_SetConfig+0x2b0>
 8005f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f26:	d81b      	bhi.n	8005f60 <UART_SetConfig+0x2b8>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d00c      	beq.n	8005f48 <UART_SetConfig+0x2a0>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f32:	d815      	bhi.n	8005f60 <UART_SetConfig+0x2b8>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x298>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0x2a8>
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x2b8>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f46:	e022      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e01e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e01a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e016      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f66:	e012      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f68:	efff69f3 	.word	0xefff69f3
 8005f6c:	40008000 	.word	0x40008000
 8005f70:	40013800 	.word	0x40013800
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40004400 	.word	0x40004400
 8005f7c:	40004800 	.word	0x40004800
 8005f80:	40004c00 	.word	0x40004c00
 8005f84:	40005000 	.word	0x40005000
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a9f      	ldr	r2, [pc, #636]	@ (8006210 <UART_SetConfig+0x568>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d17a      	bne.n	800608e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d824      	bhi.n	8005fea <UART_SetConfig+0x342>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x300>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005fdb 	.word	0x08005fdb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005feb 	.word	0x08005feb
 8005fc8:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd ff5a 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e010      	b.n	8005ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8006214 <UART_SetConfig+0x56c>)
 8005fd6:	61fb      	str	r3, [r7, #28]
        break;
 8005fd8:	e00d      	b.n	8005ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fd febd 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8005fde:	61f8      	str	r0, [r7, #28]
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80fb 	beq.w	80061f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	429a      	cmp	r2, r3
 800600c:	d305      	bcc.n	800601a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	429a      	cmp	r2, r3
 8006018:	d903      	bls.n	8006022 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006020:	e0e8      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2200      	movs	r2, #0
 8006026:	461c      	mov	r4, r3
 8006028:	4615      	mov	r5, r2
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	022b      	lsls	r3, r5, #8
 8006034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006038:	0222      	lsls	r2, r4, #8
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	6849      	ldr	r1, [r1, #4]
 800603e:	0849      	lsrs	r1, r1, #1
 8006040:	2000      	movs	r0, #0
 8006042:	4688      	mov	r8, r1
 8006044:	4681      	mov	r9, r0
 8006046:	eb12 0a08 	adds.w	sl, r2, r8
 800604a:	eb43 0b09 	adc.w	fp, r3, r9
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605c:	4650      	mov	r0, sl
 800605e:	4659      	mov	r1, fp
 8006060:	f7fa f8b2 	bl	80001c8 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006072:	d308      	bcc.n	8006086 <UART_SetConfig+0x3de>
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607a:	d204      	bcs.n	8006086 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e0b6      	b.n	80061f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800608c:	e0b2      	b.n	80061f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006096:	d15e      	bne.n	8006156 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800609c:	2b08      	cmp	r3, #8
 800609e:	d828      	bhi.n	80060f2 <UART_SetConfig+0x44a>
 80060a0:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0x400>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060f3 	.word	0x080060f3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060cc:	f7fd feda 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 80060d0:	61f8      	str	r0, [r7, #28]
        break;
 80060d2:	e014      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fd feec 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e010      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006214 <UART_SetConfig+0x56c>)
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e00d      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fd fe39 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 80060e6:	61f8      	str	r0, [r7, #28]
        break;
 80060e8:	e009      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ee:	61fb      	str	r3, [r7, #28]
        break;
 80060f0:	e005      	b.n	80060fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d077      	beq.n	80061f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005a      	lsls	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b0f      	cmp	r3, #15
 800611e:	d916      	bls.n	800614e <UART_SetConfig+0x4a6>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006126:	d212      	bcs.n	800614e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f023 030f 	bic.w	r3, r3, #15
 8006130:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	b29a      	uxth	r2, r3
 800613e:	8afb      	ldrh	r3, [r7, #22]
 8006140:	4313      	orrs	r3, r2
 8006142:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	8afa      	ldrh	r2, [r7, #22]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	e052      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006154:	e04e      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006156:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800615a:	2b08      	cmp	r3, #8
 800615c:	d827      	bhi.n	80061ae <UART_SetConfig+0x506>
 800615e:	a201      	add	r2, pc, #4	@ (adr r2, 8006164 <UART_SetConfig+0x4bc>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	080061af 	.word	0x080061af
 8006174:	0800619f 	.word	0x0800619f
 8006178:	080061af 	.word	0x080061af
 800617c:	080061af 	.word	0x080061af
 8006180:	080061af 	.word	0x080061af
 8006184:	080061a7 	.word	0x080061a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fd fe7c 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 800618c:	61f8      	str	r0, [r7, #28]
        break;
 800618e:	e014      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fd fe8e 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8006194:	61f8      	str	r0, [r7, #28]
        break;
 8006196:	e010      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006198:	4b1e      	ldr	r3, [pc, #120]	@ (8006214 <UART_SetConfig+0x56c>)
 800619a:	61fb      	str	r3, [r7, #28]
        break;
 800619c:	e00d      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619e:	f7fd fddb 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 80061a2:	61f8      	str	r0, [r7, #28]
        break;
 80061a4:	e009      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061aa:	61fb      	str	r3, [r7, #28]
        break;
 80061ac:	e005      	b.n	80061ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061b8:	bf00      	nop
    }

    if (pclk != 0U)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	085a      	lsrs	r2, r3, #1
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	441a      	add	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d909      	bls.n	80061ee <UART_SetConfig+0x546>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e0:	d205      	bcs.n	80061ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e002      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006200:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006204:	4618      	mov	r0, r3
 8006206:	3728      	adds	r7, #40	@ 0x28
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620e:	bf00      	nop
 8006210:	40008000 	.word	0x40008000
 8006214:	00f42400 	.word	0x00f42400

08006218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01a      	beq.n	800632e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006316:	d10a      	bne.n	800632e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
  }
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b098      	sub	sp, #96	@ 0x60
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800636c:	f7fb f8f2 	bl	8001554 <HAL_GetTick>
 8006370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d12e      	bne.n	80063de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006388:	2200      	movs	r2, #0
 800638a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f88c 	bl	80064ac <UART_WaitOnFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d021      	beq.n	80063de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e062      	b.n	80064a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d149      	bne.n	8006480 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f4:	2200      	movs	r2, #0
 80063f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f856 	bl	80064ac <UART_WaitOnFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d03c      	beq.n	8006480 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	623b      	str	r3, [r7, #32]
   return(result);
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
 8006426:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006458:	61fa      	str	r2, [r7, #28]
 800645a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	617b      	str	r3, [r7, #20]
   return(result);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e011      	b.n	80064a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3758      	adds	r7, #88	@ 0x58
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064bc:	e04f      	b.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c4:	d04b      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c6:	f7fb f845 	bl	8001554 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d302      	bcc.n	80064dc <UART_WaitOnFlagUntilTimeout+0x30>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e04e      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d037      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b80      	cmp	r3, #128	@ 0x80
 80064f2:	d034      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b40      	cmp	r3, #64	@ 0x40
 80064f8:	d031      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b08      	cmp	r3, #8
 8006506:	d110      	bne.n	800652a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2208      	movs	r2, #8
 800650e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f838 	bl	8006586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2208      	movs	r2, #8
 800651a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e029      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006538:	d111      	bne.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f81e 	bl	8006586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e00f      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4013      	ands	r3, r2
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	429a      	cmp	r2, r3
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	429a      	cmp	r2, r3
 800657a:	d0a0      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006586:	b480      	push	{r7}
 8006588:	b095      	sub	sp, #84	@ 0x54
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d118      	bne.n	800662e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	60bb      	str	r3, [r7, #8]
   return(result);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0310 	bic.w	r3, r3, #16
 8006610:	647b      	str	r3, [r7, #68]	@ 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	613b      	str	r3, [r7, #16]
   return(result);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e6      	bne.n	80065fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006642:	bf00      	nop
 8006644:	3754      	adds	r7, #84	@ 0x54
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800664e:	b084      	sub	sp, #16
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	f107 001c 	add.w	r0, r7, #28
 800665c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fa25 	bl	8007abc <USB_CoreReset>
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006676:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	639a      	str	r2, [r3, #56]	@ 0x38
 800668a:	e005      	b.n	8006698 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006690:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a4:	b004      	add	sp, #16
 80066a6:	4770      	bx	lr

080066a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d165      	bne.n	8006788 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4a3e      	ldr	r2, [pc, #248]	@ (80067b8 <USB_SetTurnaroundTime+0x110>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d906      	bls.n	80066d2 <USB_SetTurnaroundTime+0x2a>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a3d      	ldr	r2, [pc, #244]	@ (80067bc <USB_SetTurnaroundTime+0x114>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d202      	bcs.n	80066d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066cc:	230f      	movs	r3, #15
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e05c      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a39      	ldr	r2, [pc, #228]	@ (80067bc <USB_SetTurnaroundTime+0x114>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d306      	bcc.n	80066e8 <USB_SetTurnaroundTime+0x40>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4a38      	ldr	r2, [pc, #224]	@ (80067c0 <USB_SetTurnaroundTime+0x118>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d202      	bcs.n	80066e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066e2:	230e      	movs	r3, #14
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e051      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a35      	ldr	r2, [pc, #212]	@ (80067c0 <USB_SetTurnaroundTime+0x118>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d306      	bcc.n	80066fe <USB_SetTurnaroundTime+0x56>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a34      	ldr	r2, [pc, #208]	@ (80067c4 <USB_SetTurnaroundTime+0x11c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d202      	bcs.n	80066fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066f8:	230d      	movs	r3, #13
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e046      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a30      	ldr	r2, [pc, #192]	@ (80067c4 <USB_SetTurnaroundTime+0x11c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d306      	bcc.n	8006714 <USB_SetTurnaroundTime+0x6c>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a2f      	ldr	r2, [pc, #188]	@ (80067c8 <USB_SetTurnaroundTime+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d802      	bhi.n	8006714 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800670e:	230c      	movs	r3, #12
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e03b      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a2c      	ldr	r2, [pc, #176]	@ (80067c8 <USB_SetTurnaroundTime+0x120>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d906      	bls.n	800672a <USB_SetTurnaroundTime+0x82>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a2b      	ldr	r2, [pc, #172]	@ (80067cc <USB_SetTurnaroundTime+0x124>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d802      	bhi.n	800672a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006724:	230b      	movs	r3, #11
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e030      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a27      	ldr	r2, [pc, #156]	@ (80067cc <USB_SetTurnaroundTime+0x124>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d906      	bls.n	8006740 <USB_SetTurnaroundTime+0x98>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a26      	ldr	r2, [pc, #152]	@ (80067d0 <USB_SetTurnaroundTime+0x128>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d802      	bhi.n	8006740 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800673a:	230a      	movs	r3, #10
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e025      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a23      	ldr	r2, [pc, #140]	@ (80067d0 <USB_SetTurnaroundTime+0x128>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d906      	bls.n	8006756 <USB_SetTurnaroundTime+0xae>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a22      	ldr	r2, [pc, #136]	@ (80067d4 <USB_SetTurnaroundTime+0x12c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d202      	bcs.n	8006756 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006750:	2309      	movs	r3, #9
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e01a      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4a1e      	ldr	r2, [pc, #120]	@ (80067d4 <USB_SetTurnaroundTime+0x12c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d306      	bcc.n	800676c <USB_SetTurnaroundTime+0xc4>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a1d      	ldr	r2, [pc, #116]	@ (80067d8 <USB_SetTurnaroundTime+0x130>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d802      	bhi.n	800676c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006766:	2308      	movs	r3, #8
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e00f      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a1a      	ldr	r2, [pc, #104]	@ (80067d8 <USB_SetTurnaroundTime+0x130>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d906      	bls.n	8006782 <USB_SetTurnaroundTime+0xda>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a19      	ldr	r2, [pc, #100]	@ (80067dc <USB_SetTurnaroundTime+0x134>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d202      	bcs.n	8006782 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800677c:	2307      	movs	r3, #7
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e004      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006782:	2306      	movs	r3, #6
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e001      	b.n	800678c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006788:	2309      	movs	r3, #9
 800678a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	00d8acbf 	.word	0x00d8acbf
 80067bc:	00e4e1c0 	.word	0x00e4e1c0
 80067c0:	00f42400 	.word	0x00f42400
 80067c4:	01067380 	.word	0x01067380
 80067c8:	011a499f 	.word	0x011a499f
 80067cc:	01312cff 	.word	0x01312cff
 80067d0:	014ca43f 	.word	0x014ca43f
 80067d4:	016e3600 	.word	0x016e3600
 80067d8:	01a6ab1f 	.word	0x01a6ab1f
 80067dc:	01e84800 	.word	0x01e84800

080067e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f043 0201 	orr.w	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d115      	bne.n	8006872 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006852:	200a      	movs	r0, #10
 8006854:	f7fa fe8a 	bl	800156c <HAL_Delay>
      ms += 10U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	330a      	adds	r3, #10
 800685c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 f8b3 	bl	80079ca <USB_GetMode>
 8006864:	4603      	mov	r3, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d01e      	beq.n	80068a8 <USB_SetCurrentMode+0x84>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2bc7      	cmp	r3, #199	@ 0xc7
 800686e:	d9f0      	bls.n	8006852 <USB_SetCurrentMode+0x2e>
 8006870:	e01a      	b.n	80068a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006884:	200a      	movs	r0, #10
 8006886:	f7fa fe71 	bl	800156c <HAL_Delay>
      ms += 10U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	330a      	adds	r3, #10
 800688e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f89a 	bl	80079ca <USB_GetMode>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USB_SetCurrentMode+0x84>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2bc7      	cmp	r3, #199	@ 0xc7
 80068a0:	d9f0      	bls.n	8006884 <USB_SetCurrentMode+0x60>
 80068a2:	e001      	b.n	80068a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e005      	b.n	80068b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80068ac:	d101      	bne.n	80068b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068bc:	b084      	sub	sp, #16
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80068ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e009      	b.n	80068f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	3340      	adds	r3, #64	@ 0x40
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	2200      	movs	r2, #0
 80068e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3301      	adds	r3, #1
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b0e      	cmp	r3, #14
 80068f4:	d9f2      	bls.n	80068dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11c      	bne.n	8006938 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	e005      	b.n	8006944 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006950:	2103      	movs	r1, #3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f95a 	bl	8006c0c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006958:	2110      	movs	r1, #16
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8f6 	bl	8006b4c <USB_FlushTxFifo>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f920 	bl	8006bb0 <USB_FlushRxFifo>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006980:	461a      	mov	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006998:	461a      	mov	r2, r3
 800699a:	2300      	movs	r3, #0
 800699c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800699e:	2300      	movs	r3, #0
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	e043      	b.n	8006a2c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069ba:	d118      	bne.n	80069ee <USB_DevInit+0x132>
    {
      if (i == 0U)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ce:	461a      	mov	r2, r3
 80069d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e013      	b.n	8006a00 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e4:	461a      	mov	r2, r3
 80069e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e008      	b.n	8006a00 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fa:	461a      	mov	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a30:	461a      	mov	r2, r3
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d3b5      	bcc.n	80069a4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	e043      	b.n	8006ac6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a54:	d118      	bne.n	8006a88 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e013      	b.n	8006a9a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e008      	b.n	8006a9a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a94:	461a      	mov	r2, r3
 8006a96:	2300      	movs	r3, #0
 8006a98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006abe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006aca:	461a      	mov	r2, r3
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d3b5      	bcc.n	8006a3e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006af2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <USB_DevInit+0x28c>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f043 0208 	orr.w	r2, r3, #8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d107      	bne.n	8006b38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b30:	f043 0304 	orr.w	r3, r3, #4
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr
 8006b48:	803c3800 	.word	0x803c3800

08006b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b66:	d901      	bls.n	8006b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e01b      	b.n	8006ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	daf2      	bge.n	8006b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	019b      	lsls	r3, r3, #6
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b90:	d901      	bls.n	8006b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e006      	b.n	8006ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d0f0      	beq.n	8006b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc8:	d901      	bls.n	8006bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e018      	b.n	8006c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	daf2      	bge.n	8006bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2210      	movs	r2, #16
 8006bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bec:	d901      	bls.n	8006bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e006      	b.n	8006c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d0f0      	beq.n	8006be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0306 	and.w	r3, r3, #6
 8006c56:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d002      	beq.n	8006c64 <USB_GetDevSpeed+0x26>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b06      	cmp	r3, #6
 8006c62:	d102      	bne.n	8006c6a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c64:	2302      	movs	r3, #2
 8006c66:	75fb      	strb	r3, [r7, #23]
 8006c68:	e001      	b.n	8006c6e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006c6a:	230f      	movs	r3, #15
 8006c6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d13a      	bne.n	8006d0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	2101      	movs	r1, #1
 8006caa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d155      	bne.n	8006d7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	059b      	lsls	r3, r3, #22
 8006cf2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e036      	b.n	8006d7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d14:	69da      	ldr	r2, [r3, #28]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	2101      	movs	r1, #1
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d11a      	bne.n	8006d7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	791b      	ldrb	r3, [r3, #4]
 8006d60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d62:	430b      	orrs	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d161      	bne.n	8006e6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dbe:	d11f      	bne.n	8006e00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	2101      	movs	r1, #1
 8006e12:	fa01 f303 	lsl.w	r3, r1, r3
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e20:	4013      	ands	r3, r2
 8006e22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	2101      	movs	r1, #1
 8006e36:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e44:	4013      	ands	r3, r2
 8006e46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	0159      	lsls	r1, r3, #5
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	440b      	add	r3, r1
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e62:	4619      	mov	r1, r3
 8006e64:	4b35      	ldr	r3, [pc, #212]	@ (8006f3c <USB_DeactivateEndpoint+0x1b0>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	600b      	str	r3, [r1, #0]
 8006e6a:	e060      	b.n	8006f2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e82:	d11f      	bne.n	8006ec4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ea2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	43db      	mvns	r3, r3
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	2101      	movs	r1, #1
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	041b      	lsls	r3, r3, #16
 8006f00:	43db      	mvns	r3, r3
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	0159      	lsls	r1, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	440b      	add	r3, r1
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	4619      	mov	r1, r3
 8006f28:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <USB_DeactivateEndpoint+0x1b4>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	ec337800 	.word	0xec337800
 8006f40:	eff37800 	.word	0xeff37800

08006f44 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	f040 812d 	bne.w	80071bc <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d132      	bne.n	8006fd0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f84:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f88:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc8:	0cdb      	lsrs	r3, r3, #19
 8006fca:	04db      	lsls	r3, r3, #19
 8006fcc:	6113      	str	r3, [r2, #16]
 8006fce:	e097      	b.n	8007100 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fea:	0cdb      	lsrs	r3, r3, #19
 8006fec:	04db      	lsls	r3, r3, #19
 8006fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800700a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800700e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007012:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d11a      	bne.n	8007050 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	d903      	bls.n	800702e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007048:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800704c:	6113      	str	r3, [r2, #16]
 800704e:	e044      	b.n	80070da <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	4413      	add	r3, r2
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	04d9      	lsls	r1, r3, #19
 8007078:	4b8f      	ldr	r3, [pc, #572]	@ (80072b8 <USB_EPStartXfer+0x374>)
 800707a:	400b      	ands	r3, r1
 800707c:	6939      	ldr	r1, [r7, #16]
 800707e:	0148      	lsls	r0, r1, #5
 8007080:	6979      	ldr	r1, [r7, #20]
 8007082:	4401      	add	r1, r0
 8007084:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007088:	4313      	orrs	r3, r2
 800708a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	791b      	ldrb	r3, [r3, #4]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d122      	bne.n	80070da <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80070b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	075b      	lsls	r3, r3, #29
 80070c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80070ca:	6939      	ldr	r1, [r7, #16]
 80070cc:	0148      	lsls	r0, r1, #5
 80070ce:	6979      	ldr	r1, [r7, #20]
 80070d0:	4401      	add	r1, r0
 80070d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070d6:	4313      	orrs	r3, r2
 80070d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f0:	6939      	ldr	r1, [r7, #16]
 80070f2:	0148      	lsls	r0, r1, #5
 80070f4:	6979      	ldr	r1, [r7, #20]
 80070f6:	4401      	add	r1, r0
 80070f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070fc:	4313      	orrs	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800711a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800711e:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	791b      	ldrb	r3, [r3, #4]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d015      	beq.n	8007154 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 813a 	beq.w	80073a6 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	2101      	movs	r1, #1
 8007144:	fa01 f303 	lsl.w	r3, r1, r3
 8007148:	6979      	ldr	r1, [r7, #20]
 800714a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800714e:	4313      	orrs	r3, r2
 8007150:	634b      	str	r3, [r1, #52]	@ 0x34
 8007152:	e128      	b.n	80073a6 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	d110      	bne.n	8007186 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800717e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e00f      	b.n	80071a6 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071a4:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68d9      	ldr	r1, [r3, #12]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f9a7 	bl	8007508 <USB_WritePacket>
 80071ba:	e0f4      	b.n	80073a6 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d6:	0cdb      	lsrs	r3, r3, #19
 80071d8:	04db      	lsls	r3, r3, #19
 80071da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80071fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80071fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d12f      	bne.n	8007266 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007234:	6939      	ldr	r1, [r7, #16]
 8007236:	0148      	lsls	r0, r1, #5
 8007238:	6979      	ldr	r1, [r7, #20]
 800723a:	4401      	add	r1, r0
 800723c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007240:	4313      	orrs	r3, r2
 8007242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800725e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007262:	6113      	str	r3, [r2, #16]
 8007264:	e062      	b.n	800732c <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d126      	bne.n	80072bc <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	6939      	ldr	r1, [r7, #16]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	6979      	ldr	r1, [r7, #20]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072b2:	6113      	str	r3, [r2, #16]
 80072b4:	e03a      	b.n	800732c <USB_EPStartXfer+0x3e8>
 80072b6:	bf00      	nop
 80072b8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	1e5a      	subs	r2, r3, #1
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	89fa      	ldrh	r2, [r7, #14]
 80072d8:	fb03 f202 	mul.w	r2, r3, r2
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	89fb      	ldrh	r3, [r7, #14]
 80072f0:	04d9      	lsls	r1, r3, #19
 80072f2:	4b2f      	ldr	r3, [pc, #188]	@ (80073b0 <USB_EPStartXfer+0x46c>)
 80072f4:	400b      	ands	r3, r1
 80072f6:	6939      	ldr	r1, [r7, #16]
 80072f8:	0148      	lsls	r0, r1, #5
 80072fa:	6979      	ldr	r1, [r7, #20]
 80072fc:	4401      	add	r1, r0
 80072fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007302:	4313      	orrs	r3, r2
 8007304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800731c:	6939      	ldr	r1, [r7, #16]
 800731e:	0148      	lsls	r0, r1, #5
 8007320:	6979      	ldr	r1, [r7, #20]
 8007322:	4401      	add	r1, r0
 8007324:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007328:	4313      	orrs	r3, r2
 800732a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	791b      	ldrb	r3, [r3, #4]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d128      	bne.n	8007386 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007340:	2b00      	cmp	r3, #0
 8007342:	d110      	bne.n	8007366 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800735e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	e00f      	b.n	8007386 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007384:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	440a      	add	r2, r1
 800739c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80073a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	1ff80000 	.word	0x1ff80000

080073b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	785b      	ldrb	r3, [r3, #1]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d14a      	bne.n	8007468 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ea:	f040 8086 	bne.w	80074fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007410:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	7812      	ldrb	r2, [r2, #0]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007430:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007442:	4293      	cmp	r3, r2
 8007444:	d902      	bls.n	800744c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]
          break;
 800744a:	e056      	b.n	80074fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007464:	d0e7      	beq.n	8007436 <USB_EPStopXfer+0x82>
 8007466:	e048      	b.n	80074fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800747c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007480:	d13b      	bne.n	80074fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	440a      	add	r2, r1
 800749c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	7812      	ldrb	r2, [r2, #0]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d902      	bls.n	80074e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
          break;
 80074de:	e00c      	b.n	80074fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074f8:	d0e7      	beq.n	80074ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	@ 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4611      	mov	r1, r2
 8007514:	461a      	mov	r2, r3
 8007516:	460b      	mov	r3, r1
 8007518:	71fb      	strb	r3, [r7, #7]
 800751a:	4613      	mov	r3, r2
 800751c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007526:	88bb      	ldrh	r3, [r7, #4]
 8007528:	3303      	adds	r3, #3
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e018      	b.n	8007566 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	031a      	lsls	r2, r3, #12
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	4413      	add	r3, r2
 800753c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007540:	461a      	mov	r2, r3
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3301      	adds	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	3301      	adds	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	3301      	adds	r3, #1
 800755e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	3301      	adds	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	429a      	cmp	r2, r3
 800756c:	d3e2      	bcc.n	8007534 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3724      	adds	r7, #36	@ 0x24
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800757c:	b480      	push	{r7}
 800757e:	b08b      	sub	sp, #44	@ 0x2c
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	089b      	lsrs	r3, r3, #2
 8007596:	b29b      	uxth	r3, r3
 8007598:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	623b      	str	r3, [r7, #32]
 80075a6:	e014      	b.n	80075d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	3301      	adds	r3, #1
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	3301      	adds	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	3301      	adds	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	3301      	adds	r3, #1
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	3301      	adds	r3, #1
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d3e6      	bcc.n	80075a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075da:	8bfb      	ldrh	r3, [r7, #30]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01e      	beq.n	800761e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ea:	461a      	mov	r2, r3
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007600:	b2da      	uxtb	r2, r3
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	701a      	strb	r2, [r3, #0]
      i++;
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	3301      	adds	r3, #1
 800760a:	623b      	str	r3, [r7, #32]
      pDest++;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	3301      	adds	r3, #1
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007612:	8bfb      	ldrh	r3, [r7, #30]
 8007614:	3b01      	subs	r3, #1
 8007616:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007618:	8bfb      	ldrh	r3, [r7, #30]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1ea      	bne.n	80075f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007620:	4618      	mov	r0, r3
 8007622:	372c      	adds	r7, #44	@ 0x2c
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d12c      	bne.n	80076a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	db12      	blt.n	8007680 <USB_EPSetStall+0x54>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00f      	beq.n	8007680 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800767e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800769a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	e02b      	b.n	80076fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db12      	blt.n	80076da <USB_EPSetStall+0xae>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00f      	beq.n	80076da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80076d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d128      	bne.n	8007776 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	440a      	add	r2, r1
 800773a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800773e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007742:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d003      	beq.n	8007754 <USB_EPClearStall+0x4c>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	791b      	ldrb	r3, [r3, #4]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d138      	bne.n	80077c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	e027      	b.n	80077c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	440a      	add	r2, r1
 800778c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007790:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007794:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	791b      	ldrb	r3, [r3, #4]
 800779a:	2b03      	cmp	r3, #3
 800779c:	d003      	beq.n	80077a6 <USB_EPClearStall+0x9e>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	791b      	ldrb	r3, [r3, #4]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d10f      	bne.n	80077c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80077f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800784e:	f023 0302 	bic.w	r3, r3, #2
 8007852:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800787c:	f023 0303 	bic.w	r3, r3, #3
 8007880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007890:	f043 0302 	orr.w	r3, r3, #2
 8007894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4013      	ands	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	4013      	ands	r3, r2
 80078ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	0c1b      	lsrs	r3, r3, #16
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	b29b      	uxth	r3, r3
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	460b      	mov	r3, r1
 800793c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4013      	ands	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007960:	68bb      	ldr	r3, [r7, #8]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800796e:	b480      	push	{r7}
 8007970:	b087      	sub	sp, #28
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007990:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	fa22 f303 	lsr.w	r3, r2, r3
 800799e:	01db      	lsls	r3, r3, #7
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4013      	ands	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079bc:	68bb      	ldr	r3, [r7, #8]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f003 0301 	and.w	r3, r3, #1
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a04:	f023 0307 	bic.w	r3, r3, #7
 8007a08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	333c      	adds	r3, #60	@ 0x3c
 8007a3e:	3304      	adds	r3, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab8 <USB_EP0_OutStart+0x8c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d90a      	bls.n	8007a62 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a5c:	d101      	bne.n	8007a62 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e024      	b.n	8007aac <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a90:	f043 0318 	orr.w	r3, r3, #24
 8007a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007aa8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	4f54300a 	.word	0x4f54300a

08007abc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad4:	d901      	bls.n	8007ada <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e01b      	b.n	8007b12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	daf2      	bge.n	8007ac8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f043 0201 	orr.w	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007afe:	d901      	bls.n	8007b04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e006      	b.n	8007b12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d0f0      	beq.n	8007af2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b30:	f002 fe36 	bl	800a7a0 <USBD_static_malloc>
 8007b34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d109      	bne.n	8007b50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	32b0      	adds	r2, #176	@ 0xb0
 8007b46:	2100      	movs	r1, #0
 8007b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e0d4      	b.n	8007cfa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b54:	2100      	movs	r1, #0
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f002 fe40 	bl	800a7dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	32b0      	adds	r2, #176	@ 0xb0
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32b0      	adds	r2, #176	@ 0xb0
 8007b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7c1b      	ldrb	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d138      	bne.n	8007bfa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b88:	4b5e      	ldr	r3, [pc, #376]	@ (8007d04 <USBD_CDC_Init+0x1e4>)
 8007b8a:	7819      	ldrb	r1, [r3, #0]
 8007b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b90:	2202      	movs	r2, #2
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f002 fbf0 	bl	800a378 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b98:	4b5a      	ldr	r3, [pc, #360]	@ (8007d04 <USBD_CDC_Init+0x1e4>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	3324      	adds	r3, #36	@ 0x24
 8007bae:	2201      	movs	r2, #1
 8007bb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bb2:	4b55      	ldr	r3, [pc, #340]	@ (8007d08 <USBD_CDC_Init+0x1e8>)
 8007bb4:	7819      	ldrb	r1, [r3, #0]
 8007bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bba:	2202      	movs	r2, #2
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f002 fbdb 	bl	800a378 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bc2:	4b51      	ldr	r3, [pc, #324]	@ (8007d08 <USBD_CDC_Init+0x1e8>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bda:	2201      	movs	r2, #1
 8007bdc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bde:	4b4b      	ldr	r3, [pc, #300]	@ (8007d0c <USBD_CDC_Init+0x1ec>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f003 020f 	and.w	r2, r3, #15
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3326      	adds	r3, #38	@ 0x26
 8007bf4:	2210      	movs	r2, #16
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e035      	b.n	8007c66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bfa:	4b42      	ldr	r3, [pc, #264]	@ (8007d04 <USBD_CDC_Init+0x1e4>)
 8007bfc:	7819      	ldrb	r1, [r3, #0]
 8007bfe:	2340      	movs	r3, #64	@ 0x40
 8007c00:	2202      	movs	r2, #2
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f002 fbb8 	bl	800a378 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c08:	4b3e      	ldr	r3, [pc, #248]	@ (8007d04 <USBD_CDC_Init+0x1e4>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3324      	adds	r3, #36	@ 0x24
 8007c1e:	2201      	movs	r2, #1
 8007c20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c22:	4b39      	ldr	r3, [pc, #228]	@ (8007d08 <USBD_CDC_Init+0x1e8>)
 8007c24:	7819      	ldrb	r1, [r3, #0]
 8007c26:	2340      	movs	r3, #64	@ 0x40
 8007c28:	2202      	movs	r2, #2
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f002 fba4 	bl	800a378 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c30:	4b35      	ldr	r3, [pc, #212]	@ (8007d08 <USBD_CDC_Init+0x1e8>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c48:	2201      	movs	r2, #1
 8007c4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d0c <USBD_CDC_Init+0x1ec>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	f003 020f 	and.w	r2, r3, #15
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	440b      	add	r3, r1
 8007c60:	3326      	adds	r3, #38	@ 0x26
 8007c62:	2210      	movs	r2, #16
 8007c64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c66:	4b29      	ldr	r3, [pc, #164]	@ (8007d0c <USBD_CDC_Init+0x1ec>)
 8007c68:	7819      	ldrb	r1, [r3, #0]
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f002 fb82 	bl	800a378 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c74:	4b25      	ldr	r3, [pc, #148]	@ (8007d0c <USBD_CDC_Init+0x1ec>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 020f 	and.w	r2, r3, #15
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	3324      	adds	r3, #36	@ 0x24
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	33b0      	adds	r3, #176	@ 0xb0
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e018      	b.n	8007cfa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7c1b      	ldrb	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <USBD_CDC_Init+0x1e8>)
 8007cd2:	7819      	ldrb	r1, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f002 fcc4 	bl	800a66c <USBD_LL_PrepareReceive>
 8007ce4:	e008      	b.n	8007cf8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ce6:	4b08      	ldr	r3, [pc, #32]	@ (8007d08 <USBD_CDC_Init+0x1e8>)
 8007ce8:	7819      	ldrb	r1, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007cf0:	2340      	movs	r3, #64	@ 0x40
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f002 fcba 	bl	800a66c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000093 	.word	0x20000093
 8007d08:	20000094 	.word	0x20000094
 8007d0c:	20000095 	.word	0x20000095

08007d10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8007e08 <USBD_CDC_DeInit+0xf8>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f002 fb66 	bl	800a3f4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d28:	4b37      	ldr	r3, [pc, #220]	@ (8007e08 <USBD_CDC_DeInit+0xf8>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 020f 	and.w	r2, r3, #15
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3324      	adds	r3, #36	@ 0x24
 8007d3e:	2200      	movs	r2, #0
 8007d40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d42:	4b32      	ldr	r3, [pc, #200]	@ (8007e0c <USBD_CDC_DeInit+0xfc>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f002 fb53 	bl	800a3f4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e0c <USBD_CDC_DeInit+0xfc>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f003 020f 	and.w	r2, r3, #15
 8007d56:	6879      	ldr	r1, [r7, #4]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d66:	2200      	movs	r2, #0
 8007d68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d6a:	4b29      	ldr	r3, [pc, #164]	@ (8007e10 <USBD_CDC_DeInit+0x100>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f002 fb3f 	bl	800a3f4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d76:	4b26      	ldr	r3, [pc, #152]	@ (8007e10 <USBD_CDC_DeInit+0x100>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 020f 	and.w	r2, r3, #15
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	3324      	adds	r3, #36	@ 0x24
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d90:	4b1f      	ldr	r3, [pc, #124]	@ (8007e10 <USBD_CDC_DeInit+0x100>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	3326      	adds	r3, #38	@ 0x26
 8007da6:	2200      	movs	r2, #0
 8007da8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	32b0      	adds	r2, #176	@ 0xb0
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01f      	beq.n	8007dfc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	33b0      	adds	r3, #176	@ 0xb0
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32b0      	adds	r2, #176	@ 0xb0
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f002 fcec 	bl	800a7bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	32b0      	adds	r2, #176	@ 0xb0
 8007dee:	2100      	movs	r1, #0
 8007df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000093 	.word	0x20000093
 8007e0c:	20000094 	.word	0x20000094
 8007e10:	20000095 	.word	0x20000095

08007e14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	32b0      	adds	r2, #176	@ 0xb0
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e0bf      	b.n	8007fc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d050      	beq.n	8007ef2 <USBD_CDC_Setup+0xde>
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	f040 80af 	bne.w	8007fb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d03a      	beq.n	8007ed4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da1b      	bge.n	8007ea0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	33b0      	adds	r3, #176	@ 0xb0
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	88d2      	ldrh	r2, [r2, #6]
 8007e84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	88db      	ldrh	r3, [r3, #6]
 8007e8a:	2b07      	cmp	r3, #7
 8007e8c:	bf28      	it	cs
 8007e8e:	2307      	movcs	r3, #7
 8007e90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	89fa      	ldrh	r2, [r7, #14]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fdbd 	bl	8009a18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e9e:	e090      	b.n	8007fc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	785a      	ldrb	r2, [r3, #1]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b3f      	cmp	r3, #63	@ 0x3f
 8007eb0:	d803      	bhi.n	8007eba <USBD_CDC_Setup+0xa6>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	88db      	ldrh	r3, [r3, #6]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	e000      	b.n	8007ebc <USBD_CDC_Setup+0xa8>
 8007eba:	2240      	movs	r2, #64	@ 0x40
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ec2:	6939      	ldr	r1, [r7, #16]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 fdcf 	bl	8009a70 <USBD_CtlPrepareRx>
      break;
 8007ed2:	e076      	b.n	8007fc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	33b0      	adds	r3, #176	@ 0xb0
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	7850      	ldrb	r0, [r2, #1]
 8007eea:	2200      	movs	r2, #0
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	4798      	blx	r3
      break;
 8007ef0:	e067      	b.n	8007fc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b0b      	cmp	r3, #11
 8007ef8:	d851      	bhi.n	8007f9e <USBD_CDC_Setup+0x18a>
 8007efa:	a201      	add	r2, pc, #4	@ (adr r2, 8007f00 <USBD_CDC_Setup+0xec>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f31 	.word	0x08007f31
 8007f04:	08007fad 	.word	0x08007fad
 8007f08:	08007f9f 	.word	0x08007f9f
 8007f0c:	08007f9f 	.word	0x08007f9f
 8007f10:	08007f9f 	.word	0x08007f9f
 8007f14:	08007f9f 	.word	0x08007f9f
 8007f18:	08007f9f 	.word	0x08007f9f
 8007f1c:	08007f9f 	.word	0x08007f9f
 8007f20:	08007f9f 	.word	0x08007f9f
 8007f24:	08007f9f 	.word	0x08007f9f
 8007f28:	08007f5b 	.word	0x08007f5b
 8007f2c:	08007f85 	.word	0x08007f85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d107      	bne.n	8007f4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f3c:	f107 030a 	add.w	r3, r7, #10
 8007f40:	2202      	movs	r2, #2
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fd67 	bl	8009a18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f4a:	e032      	b.n	8007fb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fce5 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	75fb      	strb	r3, [r7, #23]
          break;
 8007f58:	e02b      	b.n	8007fb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d107      	bne.n	8007f76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f66:	f107 030d 	add.w	r3, r7, #13
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fd52 	bl	8009a18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f74:	e01d      	b.n	8007fb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 fcd0 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	75fb      	strb	r3, [r7, #23]
          break;
 8007f82:	e016      	b.n	8007fb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d00f      	beq.n	8007fb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 fcc3 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f9c:	e008      	b.n	8007fb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 fcbc 	bl	800991e <USBD_CtlError>
          ret = USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8007faa:	e002      	b.n	8007fb2 <USBD_CDC_Setup+0x19e>
          break;
 8007fac:	bf00      	nop
 8007fae:	e008      	b.n	8007fc2 <USBD_CDC_Setup+0x1ae>
          break;
 8007fb0:	bf00      	nop
      }
      break;
 8007fb2:	e006      	b.n	8007fc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fcb1 	bl	800991e <USBD_CtlError>
      ret = USBD_FAIL;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32b0      	adds	r2, #176	@ 0xb0
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e065      	b.n	80080c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	32b0      	adds	r2, #176	@ 0xb0
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	f003 020f 	and.w	r2, r3, #15
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	440b      	add	r3, r1
 8008018:	3318      	adds	r3, #24
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d02f      	beq.n	8008080 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	f003 020f 	and.w	r2, r3, #15
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	3318      	adds	r3, #24
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	f003 010f 	and.w	r1, r3, #15
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	460b      	mov	r3, r1
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	440b      	add	r3, r1
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4403      	add	r3, r0
 8008048:	331c      	adds	r3, #28
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008050:	fb01 f303 	mul.w	r3, r1, r3
 8008054:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008056:	2b00      	cmp	r3, #0
 8008058:	d112      	bne.n	8008080 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	3318      	adds	r3, #24
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008072:	78f9      	ldrb	r1, [r7, #3]
 8008074:	2300      	movs	r3, #0
 8008076:	2200      	movs	r2, #0
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f002 fabf 	bl	800a5fc <USBD_LL_Transmit>
 800807e:	e01f      	b.n	80080c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	33b0      	adds	r3, #176	@ 0xb0
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d010      	beq.n	80080c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	33b0      	adds	r3, #176	@ 0xb0
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	32b0      	adds	r2, #176	@ 0xb0
 80080e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	32b0      	adds	r2, #176	@ 0xb0
 80080f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e01a      	b.n	8008132 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f002 faeb 	bl	800a6dc <USBD_LL_GetRxDataSize>
 8008106:	4602      	mov	r2, r0
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	33b0      	adds	r3, #176	@ 0xb0
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800812c:	4611      	mov	r1, r2
 800812e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32b0      	adds	r2, #176	@ 0xb0
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	e024      	b.n	80081a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	33b0      	adds	r3, #176	@ 0xb0
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d019      	beq.n	80081a4 <USBD_CDC_EP0_RxReady+0x6a>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008176:	2bff      	cmp	r3, #255	@ 0xff
 8008178:	d014      	beq.n	80081a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	33b0      	adds	r3, #176	@ 0xb0
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008192:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800819a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	22ff      	movs	r2, #255	@ 0xff
 80081a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081b8:	2182      	movs	r1, #130	@ 0x82
 80081ba:	4818      	ldr	r0, [pc, #96]	@ (800821c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081bc:	f000 fd4f 	bl	8008c5e <USBD_GetEpDesc>
 80081c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081c2:	2101      	movs	r1, #1
 80081c4:	4815      	ldr	r0, [pc, #84]	@ (800821c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081c6:	f000 fd4a 	bl	8008c5e <USBD_GetEpDesc>
 80081ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081cc:	2181      	movs	r1, #129	@ 0x81
 80081ce:	4813      	ldr	r0, [pc, #76]	@ (800821c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081d0:	f000 fd45 	bl	8008c5e <USBD_GetEpDesc>
 80081d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2210      	movs	r2, #16
 80081e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081f0:	711a      	strb	r2, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008204:	711a      	strb	r2, [r3, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2243      	movs	r2, #67	@ 0x43
 800820e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008210:	4b02      	ldr	r3, [pc, #8]	@ (800821c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000050 	.word	0x20000050

08008220 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008228:	2182      	movs	r1, #130	@ 0x82
 800822a:	4818      	ldr	r0, [pc, #96]	@ (800828c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800822c:	f000 fd17 	bl	8008c5e <USBD_GetEpDesc>
 8008230:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008232:	2101      	movs	r1, #1
 8008234:	4815      	ldr	r0, [pc, #84]	@ (800828c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008236:	f000 fd12 	bl	8008c5e <USBD_GetEpDesc>
 800823a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800823c:	2181      	movs	r1, #129	@ 0x81
 800823e:	4813      	ldr	r0, [pc, #76]	@ (800828c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008240:	f000 fd0d 	bl	8008c5e <USBD_GetEpDesc>
 8008244:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2210      	movs	r2, #16
 8008250:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d006      	beq.n	8008266 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2200      	movs	r2, #0
 800825c:	711a      	strb	r2, [r3, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f042 0202 	orr.w	r2, r2, #2
 8008264:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d006      	beq.n	800827a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	711a      	strb	r2, [r3, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f042 0202 	orr.w	r2, r2, #2
 8008278:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2243      	movs	r2, #67	@ 0x43
 800827e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008280:	4b02      	ldr	r3, [pc, #8]	@ (800828c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000050 	.word	0x20000050

08008290 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008298:	2182      	movs	r1, #130	@ 0x82
 800829a:	4818      	ldr	r0, [pc, #96]	@ (80082fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800829c:	f000 fcdf 	bl	8008c5e <USBD_GetEpDesc>
 80082a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082a2:	2101      	movs	r1, #1
 80082a4:	4815      	ldr	r0, [pc, #84]	@ (80082fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082a6:	f000 fcda 	bl	8008c5e <USBD_GetEpDesc>
 80082aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082ac:	2181      	movs	r1, #129	@ 0x81
 80082ae:	4813      	ldr	r0, [pc, #76]	@ (80082fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082b0:	f000 fcd5 	bl	8008c5e <USBD_GetEpDesc>
 80082b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2210      	movs	r2, #16
 80082c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d006      	beq.n	80082d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082d0:	711a      	strb	r2, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d006      	beq.n	80082ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082e4:	711a      	strb	r2, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2243      	movs	r2, #67	@ 0x43
 80082ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082f0:	4b02      	ldr	r3, [pc, #8]	@ (80082fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000050 	.word	0x20000050

08008300 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	220a      	movs	r2, #10
 800830c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800830e:	4b03      	ldr	r3, [pc, #12]	@ (800831c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	2000000c 	.word	0x2000000c

08008320 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008330:	2303      	movs	r3, #3
 8008332:	e009      	b.n	8008348 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	33b0      	adds	r3, #176	@ 0xb0
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	32b0      	adds	r2, #176	@ 0xb0
 800836a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008376:	2303      	movs	r3, #3
 8008378:	e008      	b.n	800838c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	371c      	adds	r7, #28
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	32b0      	adds	r2, #176	@ 0xb0
 80083ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e004      	b.n	80083c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	32b0      	adds	r2, #176	@ 0xb0
 80083e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e025      	b.n	8008446 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11f      	bne.n	8008444 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2201      	movs	r2, #1
 8008408:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800840c:	4b10      	ldr	r3, [pc, #64]	@ (8008450 <USBD_CDC_TransmitPacket+0x7c>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 020f 	and.w	r2, r3, #15
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4403      	add	r3, r0
 8008426:	3318      	adds	r3, #24
 8008428:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800842a:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <USBD_CDC_TransmitPacket+0x7c>)
 800842c:	7819      	ldrb	r1, [r3, #0]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f002 f8de 	bl	800a5fc <USBD_LL_Transmit>

    ret = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000093 	.word	0x20000093

08008454 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	32b0      	adds	r2, #176	@ 0xb0
 8008466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32b0      	adds	r2, #176	@ 0xb0
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800847e:	2303      	movs	r3, #3
 8008480:	e018      	b.n	80084b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7c1b      	ldrb	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800848a:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <USBD_CDC_ReceivePacket+0x68>)
 800848c:	7819      	ldrb	r1, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008494:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f002 f8e7 	bl	800a66c <USBD_LL_PrepareReceive>
 800849e:	e008      	b.n	80084b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084a0:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <USBD_CDC_ReceivePacket+0x68>)
 80084a2:	7819      	ldrb	r1, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084aa:	2340      	movs	r3, #64	@ 0x40
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f002 f8dd 	bl	800a66c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20000094 	.word	0x20000094

080084c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e01f      	b.n	8008518 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	79fa      	ldrb	r2, [r7, #7]
 800850a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 feb5 	bl	800a27c <USBD_LL_Init>
 8008512:	4603      	mov	r3, r0
 8008514:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	e025      	b.n	8008584 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32ae      	adds	r2, #174	@ 0xae
 800854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00f      	beq.n	8008574 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	32ae      	adds	r2, #174	@ 0xae
 800855e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008564:	f107 020e 	add.w	r2, r7, #14
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	4602      	mov	r2, r0
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 febd 	bl	800a314 <USBD_LL_Start>
 800859a:	4603      	mov	r3, r0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	4611      	mov	r1, r2
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	78fa      	ldrb	r2, [r7, #3]
 800860c:	4611      	mov	r1, r2
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f001 f936 	bl	80098aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800864c:	461a      	mov	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	2b02      	cmp	r3, #2
 8008660:	d01a      	beq.n	8008698 <USBD_LL_SetupStage+0x72>
 8008662:	2b02      	cmp	r3, #2
 8008664:	d822      	bhi.n	80086ac <USBD_LL_SetupStage+0x86>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <USBD_LL_SetupStage+0x4a>
 800866a:	2b01      	cmp	r3, #1
 800866c:	d00a      	beq.n	8008684 <USBD_LL_SetupStage+0x5e>
 800866e:	e01d      	b.n	80086ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fb63 	bl	8008d44 <USBD_StdDevReq>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]
      break;
 8008682:	e020      	b.n	80086c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fbcb 	bl	8008e28 <USBD_StdItfReq>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
      break;
 8008696:	e016      	b.n	80086c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fc2d 	bl	8008f00 <USBD_StdEPReq>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]
      break;
 80086aa:	e00c      	b.n	80086c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fed0 	bl	800a460 <USBD_LL_StallEP>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
      break;
 80086c4:	bf00      	nop
  }

  return ret;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	460b      	mov	r3, r1
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d16e      	bne.n	80087c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	f040 8098 	bne.w	800882c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	429a      	cmp	r2, r3
 8008706:	d913      	bls.n	8008730 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	1ad2      	subs	r2, r2, r3
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	4293      	cmp	r3, r2
 8008720:	bf28      	it	cs
 8008722:	4613      	movcs	r3, r2
 8008724:	461a      	mov	r2, r3
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 f9be 	bl	8009aaa <USBD_CtlContinueRx>
 800872e:	e07d      	b.n	800882c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008736:	f003 031f 	and.w	r3, r3, #31
 800873a:	2b02      	cmp	r3, #2
 800873c:	d014      	beq.n	8008768 <USBD_LL_DataOutStage+0x98>
 800873e:	2b02      	cmp	r3, #2
 8008740:	d81d      	bhi.n	800877e <USBD_LL_DataOutStage+0xae>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <USBD_LL_DataOutStage+0x7c>
 8008746:	2b01      	cmp	r3, #1
 8008748:	d003      	beq.n	8008752 <USBD_LL_DataOutStage+0x82>
 800874a:	e018      	b.n	800877e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	75bb      	strb	r3, [r7, #22]
            break;
 8008750:	e018      	b.n	8008784 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008758:	b2db      	uxtb	r3, r3
 800875a:	4619      	mov	r1, r3
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fa64 	bl	8008c2a <USBD_CoreFindIF>
 8008762:	4603      	mov	r3, r0
 8008764:	75bb      	strb	r3, [r7, #22]
            break;
 8008766:	e00d      	b.n	8008784 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800876e:	b2db      	uxtb	r3, r3
 8008770:	4619      	mov	r1, r3
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 fa66 	bl	8008c44 <USBD_CoreFindEP>
 8008778:	4603      	mov	r3, r0
 800877a:	75bb      	strb	r3, [r7, #22]
            break;
 800877c:	e002      	b.n	8008784 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	75bb      	strb	r3, [r7, #22]
            break;
 8008782:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008784:	7dbb      	ldrb	r3, [r7, #22]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d119      	bne.n	80087be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b03      	cmp	r3, #3
 8008794:	d113      	bne.n	80087be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008796:	7dba      	ldrb	r2, [r7, #22]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	32ae      	adds	r2, #174	@ 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087a6:	7dba      	ldrb	r2, [r7, #22]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087ae:	7dba      	ldrb	r2, [r7, #22]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	32ae      	adds	r2, #174	@ 0xae
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f001 f984 	bl	8009acc <USBD_CtlSendStatus>
 80087c4:	e032      	b.n	800882c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	4619      	mov	r1, r3
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fa37 	bl	8008c44 <USBD_CoreFindEP>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087da:	7dbb      	ldrb	r3, [r7, #22]
 80087dc:	2bff      	cmp	r3, #255	@ 0xff
 80087de:	d025      	beq.n	800882c <USBD_LL_DataOutStage+0x15c>
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d122      	bne.n	800882c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d117      	bne.n	8008822 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087f2:	7dba      	ldrb	r2, [r7, #22]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	32ae      	adds	r2, #174	@ 0xae
 80087f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00f      	beq.n	8008822 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008802:	7dba      	ldrb	r2, [r7, #22]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800880a:	7dba      	ldrb	r2, [r7, #22]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	32ae      	adds	r2, #174	@ 0xae
 8008810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	7afa      	ldrb	r2, [r7, #11]
 8008818:	4611      	mov	r1, r2
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	4798      	blx	r3
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	e000      	b.n	800882e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b086      	sub	sp, #24
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	460b      	mov	r3, r1
 8008840:	607a      	str	r2, [r7, #4]
 8008842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d16f      	bne.n	800892a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3314      	adds	r3, #20
 800884e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008856:	2b02      	cmp	r3, #2
 8008858:	d15a      	bne.n	8008910 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	429a      	cmp	r2, r3
 8008864:	d914      	bls.n	8008890 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	461a      	mov	r2, r3
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f001 f8e6 	bl	8009a4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f001 feef 	bl	800a66c <USBD_LL_PrepareReceive>
 800888e:	e03f      	b.n	8008910 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	d11c      	bne.n	80088d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d316      	bcc.n	80088d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d20f      	bcs.n	80088d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f001 f8c7 	bl	8009a4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088c8:	2300      	movs	r3, #0
 80088ca:	2200      	movs	r2, #0
 80088cc:	2100      	movs	r1, #0
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f001 fecc 	bl	800a66c <USBD_LL_PrepareReceive>
 80088d4:	e01c      	b.n	8008910 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d10f      	bne.n	8008902 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008902:	2180      	movs	r1, #128	@ 0x80
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f001 fdab 	bl	800a460 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f001 f8f1 	bl	8009af2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d03a      	beq.n	8008990 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff fe42 	bl	80085a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008928:	e032      	b.n	8008990 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800892a:	7afb      	ldrb	r3, [r7, #11]
 800892c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008930:	b2db      	uxtb	r3, r3
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f985 	bl	8008c44 <USBD_CoreFindEP>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	2bff      	cmp	r3, #255	@ 0xff
 8008942:	d025      	beq.n	8008990 <USBD_LL_DataInStage+0x15a>
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d122      	bne.n	8008990 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b03      	cmp	r3, #3
 8008954:	d11c      	bne.n	8008990 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008956:	7dfa      	ldrb	r2, [r7, #23]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	32ae      	adds	r2, #174	@ 0xae
 800895c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d014      	beq.n	8008990 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008966:	7dfa      	ldrb	r2, [r7, #23]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800896e:	7dfa      	ldrb	r2, [r7, #23]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	32ae      	adds	r2, #174	@ 0xae
 8008974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	7afa      	ldrb	r2, [r7, #11]
 800897c:	4611      	mov	r1, r2
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008986:	7dbb      	ldrb	r3, [r7, #22]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800898c:	7dbb      	ldrb	r3, [r7, #22]
 800898e:	e000      	b.n	8008992 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d014      	beq.n	8008a00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00e      	beq.n	8008a00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6852      	ldr	r2, [r2, #4]
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	4611      	mov	r1, r2
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a00:	2340      	movs	r3, #64	@ 0x40
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fcb6 	bl	800a378 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2240      	movs	r2, #64	@ 0x40
 8008a18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2180      	movs	r1, #128	@ 0x80
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fca8 	bl	800a378 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2240      	movs	r2, #64	@ 0x40
 8008a32:	621a      	str	r2, [r3, #32]

  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d006      	beq.n	8008a80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2204      	movs	r2, #4
 8008a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d106      	bne.n	8008ab8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d110      	bne.n	8008afc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	32ae      	adds	r2, #174	@ 0xae
 8008b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e01c      	b.n	8008b62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d115      	bne.n	8008b60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	32ae      	adds	r2, #174	@ 0xae
 8008b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	32ae      	adds	r2, #174	@ 0xae
 8008b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	78fa      	ldrb	r2, [r7, #3]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460b      	mov	r3, r1
 8008b74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	32ae      	adds	r2, #174	@ 0xae
 8008b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e01c      	b.n	8008bc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d115      	bne.n	8008bc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32ae      	adds	r2, #174	@ 0xae
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32ae      	adds	r2, #174	@ 0xae
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00e      	beq.n	8008c20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6852      	ldr	r2, [r2, #4]
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	4611      	mov	r1, r2
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d91f      	bls.n	8008cc4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c8a:	e013      	b.n	8008cb4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c8c:	f107 030a 	add.w	r3, r7, #10
 8008c90:	4619      	mov	r1, r3
 8008c92:	6978      	ldr	r0, [r7, #20]
 8008c94:	f000 f81b 	bl	8008cce <USBD_GetNextDesc>
 8008c98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	785b      	ldrb	r3, [r3, #1]
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d108      	bne.n	8008cb4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	789b      	ldrb	r3, [r3, #2]
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d008      	beq.n	8008cc2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	897b      	ldrh	r3, [r7, #10]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d8e5      	bhi.n	8008c8c <USBD_GetEpDesc+0x2e>
 8008cc0:	e000      	b.n	8008cc4 <USBD_GetEpDesc+0x66>
          break;
 8008cc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008cc4:	693b      	ldr	r3, [r7, #16]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	7812      	ldrb	r2, [r2, #0]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b087      	sub	sp, #28
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d24:	8a3b      	ldrh	r3, [r7, #16]
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	b21a      	sxth	r2, r3
 8008d2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	b21b      	sxth	r3, r3
 8008d32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d34:	89fb      	ldrh	r3, [r7, #14]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d5a:	2b40      	cmp	r3, #64	@ 0x40
 8008d5c:	d005      	beq.n	8008d6a <USBD_StdDevReq+0x26>
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d857      	bhi.n	8008e12 <USBD_StdDevReq+0xce>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00f      	beq.n	8008d86 <USBD_StdDevReq+0x42>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d153      	bne.n	8008e12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	32ae      	adds	r2, #174	@ 0xae
 8008d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
      break;
 8008d84:	e04a      	b.n	8008e1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	2b09      	cmp	r3, #9
 8008d8c:	d83b      	bhi.n	8008e06 <USBD_StdDevReq+0xc2>
 8008d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <USBD_StdDevReq+0x50>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008dfd 	.word	0x08008dfd
 8008d9c:	08008e07 	.word	0x08008e07
 8008da0:	08008df3 	.word	0x08008df3
 8008da4:	08008e07 	.word	0x08008e07
 8008da8:	08008dc7 	.word	0x08008dc7
 8008dac:	08008dbd 	.word	0x08008dbd
 8008db0:	08008e07 	.word	0x08008e07
 8008db4:	08008ddf 	.word	0x08008ddf
 8008db8:	08008dd1 	.word	0x08008dd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa3c 	bl	800923c <USBD_GetDescriptor>
          break;
 8008dc4:	e024      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fbcb 	bl	8009564 <USBD_SetAddress>
          break;
 8008dce:	e01f      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fc0a 	bl	80095ec <USBD_SetConfig>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
          break;
 8008ddc:	e018      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fcad 	bl	8009740 <USBD_GetConfig>
          break;
 8008de6:	e013      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fcde 	bl	80097ac <USBD_GetStatus>
          break;
 8008df0:	e00e      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fd0d 	bl	8009814 <USBD_SetFeature>
          break;
 8008dfa:	e009      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fd31 	bl	8009866 <USBD_ClrFeature>
          break;
 8008e04:	e004      	b.n	8008e10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fd88 	bl	800991e <USBD_CtlError>
          break;
 8008e0e:	bf00      	nop
      }
      break;
 8008e10:	e004      	b.n	8008e1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fd82 	bl	800991e <USBD_CtlError>
      break;
 8008e1a:	bf00      	nop
  }

  return ret;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop

08008e28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e3e:	2b40      	cmp	r3, #64	@ 0x40
 8008e40:	d005      	beq.n	8008e4e <USBD_StdItfReq+0x26>
 8008e42:	2b40      	cmp	r3, #64	@ 0x40
 8008e44:	d852      	bhi.n	8008eec <USBD_StdItfReq+0xc4>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <USBD_StdItfReq+0x26>
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d14e      	bne.n	8008eec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d840      	bhi.n	8008ede <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	889b      	ldrh	r3, [r3, #4]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d836      	bhi.n	8008ed4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	889b      	ldrh	r3, [r3, #4]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff fedb 	bl	8008c2a <USBD_CoreFindIF>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2bff      	cmp	r3, #255	@ 0xff
 8008e7c:	d01d      	beq.n	8008eba <USBD_StdItfReq+0x92>
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d11a      	bne.n	8008eba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e84:	7bba      	ldrb	r2, [r7, #14]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	32ae      	adds	r2, #174	@ 0xae
 8008e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00f      	beq.n	8008eb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e94:	7bba      	ldrb	r2, [r7, #14]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e9c:	7bba      	ldrb	r2, [r7, #14]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32ae      	adds	r2, #174	@ 0xae
 8008ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008eb2:	e004      	b.n	8008ebe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008eb8:	e001      	b.n	8008ebe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	88db      	ldrh	r3, [r3, #6]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d110      	bne.n	8008ee8 <USBD_StdItfReq+0xc0>
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10d      	bne.n	8008ee8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fdfd 	bl	8009acc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ed2:	e009      	b.n	8008ee8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fd21 	bl	800991e <USBD_CtlError>
          break;
 8008edc:	e004      	b.n	8008ee8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fd1c 	bl	800991e <USBD_CtlError>
          break;
 8008ee6:	e000      	b.n	8008eea <USBD_StdItfReq+0xc2>
          break;
 8008ee8:	bf00      	nop
      }
      break;
 8008eea:	e004      	b.n	8008ef6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fd15 	bl	800991e <USBD_CtlError>
      break;
 8008ef4:	bf00      	nop
  }

  return ret;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	889b      	ldrh	r3, [r3, #4]
 8008f12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f1c:	2b40      	cmp	r3, #64	@ 0x40
 8008f1e:	d007      	beq.n	8008f30 <USBD_StdEPReq+0x30>
 8008f20:	2b40      	cmp	r3, #64	@ 0x40
 8008f22:	f200 817f 	bhi.w	8009224 <USBD_StdEPReq+0x324>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d02a      	beq.n	8008f80 <USBD_StdEPReq+0x80>
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	f040 817a 	bne.w	8009224 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff fe85 	bl	8008c44 <USBD_CoreFindEP>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f3e:	7b7b      	ldrb	r3, [r7, #13]
 8008f40:	2bff      	cmp	r3, #255	@ 0xff
 8008f42:	f000 8174 	beq.w	800922e <USBD_StdEPReq+0x32e>
 8008f46:	7b7b      	ldrb	r3, [r7, #13]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f040 8170 	bne.w	800922e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f4e:	7b7a      	ldrb	r2, [r7, #13]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f56:	7b7a      	ldrb	r2, [r7, #13]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	32ae      	adds	r2, #174	@ 0xae
 8008f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 8163 	beq.w	800922e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f68:	7b7a      	ldrb	r2, [r7, #13]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	32ae      	adds	r2, #174	@ 0xae
 8008f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	4798      	blx	r3
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f7e:	e156      	b.n	800922e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d008      	beq.n	8008f9a <USBD_StdEPReq+0x9a>
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	f300 8145 	bgt.w	8009218 <USBD_StdEPReq+0x318>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 809b 	beq.w	80090ca <USBD_StdEPReq+0x1ca>
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d03c      	beq.n	8009012 <USBD_StdEPReq+0x112>
 8008f98:	e13e      	b.n	8009218 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d002      	beq.n	8008fac <USBD_StdEPReq+0xac>
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d016      	beq.n	8008fd8 <USBD_StdEPReq+0xd8>
 8008faa:	e02c      	b.n	8009006 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00d      	beq.n	8008fce <USBD_StdEPReq+0xce>
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b80      	cmp	r3, #128	@ 0x80
 8008fb6:	d00a      	beq.n	8008fce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 fa4f 	bl	800a460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fc2:	2180      	movs	r1, #128	@ 0x80
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fa4b 	bl	800a460 <USBD_LL_StallEP>
 8008fca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fcc:	e020      	b.n	8009010 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fca4 	bl	800991e <USBD_CtlError>
              break;
 8008fd6:	e01b      	b.n	8009010 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	885b      	ldrh	r3, [r3, #2]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10e      	bne.n	8008ffe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <USBD_StdEPReq+0xfe>
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b80      	cmp	r3, #128	@ 0x80
 8008fea:	d008      	beq.n	8008ffe <USBD_StdEPReq+0xfe>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	88db      	ldrh	r3, [r3, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fa31 	bl	800a460 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fd64 	bl	8009acc <USBD_CtlSendStatus>

              break;
 8009004:	e004      	b.n	8009010 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc88 	bl	800991e <USBD_CtlError>
              break;
 800900e:	bf00      	nop
          }
          break;
 8009010:	e107      	b.n	8009222 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d002      	beq.n	8009024 <USBD_StdEPReq+0x124>
 800901e:	2b03      	cmp	r3, #3
 8009020:	d016      	beq.n	8009050 <USBD_StdEPReq+0x150>
 8009022:	e04b      	b.n	80090bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <USBD_StdEPReq+0x146>
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b80      	cmp	r3, #128	@ 0x80
 800902e:	d00a      	beq.n	8009046 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 fa13 	bl	800a460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800903a:	2180      	movs	r1, #128	@ 0x80
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fa0f 	bl	800a460 <USBD_LL_StallEP>
 8009042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009044:	e040      	b.n	80090c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc68 	bl	800991e <USBD_CtlError>
              break;
 800904e:	e03b      	b.n	80090c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	885b      	ldrh	r3, [r3, #2]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d136      	bne.n	80090c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800905e:	2b00      	cmp	r3, #0
 8009060:	d004      	beq.n	800906c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 fa30 	bl	800a4cc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fd2d 	bl	8009acc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff fde4 	bl	8008c44 <USBD_CoreFindEP>
 800907c:	4603      	mov	r3, r0
 800907e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009080:	7b7b      	ldrb	r3, [r7, #13]
 8009082:	2bff      	cmp	r3, #255	@ 0xff
 8009084:	d01f      	beq.n	80090c6 <USBD_StdEPReq+0x1c6>
 8009086:	7b7b      	ldrb	r3, [r7, #13]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d11c      	bne.n	80090c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800908c:	7b7a      	ldrb	r2, [r7, #13]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009094:	7b7a      	ldrb	r2, [r7, #13]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	32ae      	adds	r2, #174	@ 0xae
 800909a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d010      	beq.n	80090c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090a4:	7b7a      	ldrb	r2, [r7, #13]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	32ae      	adds	r2, #174	@ 0xae
 80090aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090ba:	e004      	b.n	80090c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc2d 	bl	800991e <USBD_CtlError>
              break;
 80090c4:	e000      	b.n	80090c8 <USBD_StdEPReq+0x1c8>
              break;
 80090c6:	bf00      	nop
          }
          break;
 80090c8:	e0ab      	b.n	8009222 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d002      	beq.n	80090dc <USBD_StdEPReq+0x1dc>
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d032      	beq.n	8009140 <USBD_StdEPReq+0x240>
 80090da:	e097      	b.n	800920c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <USBD_StdEPReq+0x1f2>
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b80      	cmp	r3, #128	@ 0x80
 80090e6:	d004      	beq.n	80090f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fc17 	bl	800991e <USBD_CtlError>
                break;
 80090f0:	e091      	b.n	8009216 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da0b      	bge.n	8009112 <USBD_StdEPReq+0x212>
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	3310      	adds	r3, #16
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	3304      	adds	r3, #4
 8009110:	e00b      	b.n	800912a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	3304      	adds	r3, #4
 800912a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2202      	movs	r2, #2
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fc6d 	bl	8009a18 <USBD_CtlSendData>
              break;
 800913e:	e06a      	b.n	8009216 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009144:	2b00      	cmp	r3, #0
 8009146:	da11      	bge.n	800916c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	f003 020f 	and.w	r2, r3, #15
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	3324      	adds	r3, #36	@ 0x24
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d117      	bne.n	8009192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fbda 	bl	800991e <USBD_CtlError>
                  break;
 800916a:	e054      	b.n	8009216 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	f003 020f 	and.w	r2, r3, #15
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fbc7 	bl	800991e <USBD_CtlError>
                  break;
 8009190:	e041      	b.n	8009216 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009196:	2b00      	cmp	r3, #0
 8009198:	da0b      	bge.n	80091b2 <USBD_StdEPReq+0x2b2>
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	3310      	adds	r3, #16
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	3304      	adds	r3, #4
 80091b0:	e00b      	b.n	80091ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
 80091b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	4413      	add	r3, r2
 80091c8:	3304      	adds	r3, #4
 80091ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <USBD_StdEPReq+0x2d8>
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b80      	cmp	r3, #128	@ 0x80
 80091d6:	d103      	bne.n	80091e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e00e      	b.n	80091fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f9a7 	bl	800a538 <USBD_LL_IsStallEP>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2201      	movs	r2, #1
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	e002      	b.n	80091fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2202      	movs	r2, #2
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fc07 	bl	8009a18 <USBD_CtlSendData>
              break;
 800920a:	e004      	b.n	8009216 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fb85 	bl	800991e <USBD_CtlError>
              break;
 8009214:	bf00      	nop
          }
          break;
 8009216:	e004      	b.n	8009222 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fb7f 	bl	800991e <USBD_CtlError>
          break;
 8009220:	bf00      	nop
      }
      break;
 8009222:	e005      	b.n	8009230 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fb79 	bl	800991e <USBD_CtlError>
      break;
 800922c:	e000      	b.n	8009230 <USBD_StdEPReq+0x330>
      break;
 800922e:	bf00      	nop
  }

  return ret;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	885b      	ldrh	r3, [r3, #2]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	2b0e      	cmp	r3, #14
 800925e:	f200 8152 	bhi.w	8009506 <USBD_GetDescriptor+0x2ca>
 8009262:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <USBD_GetDescriptor+0x2c>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	080092d9 	.word	0x080092d9
 800926c:	080092f1 	.word	0x080092f1
 8009270:	08009331 	.word	0x08009331
 8009274:	08009507 	.word	0x08009507
 8009278:	08009507 	.word	0x08009507
 800927c:	080094a7 	.word	0x080094a7
 8009280:	080094d3 	.word	0x080094d3
 8009284:	08009507 	.word	0x08009507
 8009288:	08009507 	.word	0x08009507
 800928c:	08009507 	.word	0x08009507
 8009290:	08009507 	.word	0x08009507
 8009294:	08009507 	.word	0x08009507
 8009298:	08009507 	.word	0x08009507
 800929c:	08009507 	.word	0x08009507
 80092a0:	080092a5 	.word	0x080092a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c6:	e126      	b.n	8009516 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fb27 	bl	800991e <USBD_CtlError>
        err++;
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	3301      	adds	r3, #1
 80092d4:	72fb      	strb	r3, [r7, #11]
      break;
 80092d6:	e11e      	b.n	8009516 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7c12      	ldrb	r2, [r2, #16]
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
      break;
 80092ee:	e112      	b.n	8009516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7c1b      	ldrb	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10d      	bne.n	8009314 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009300:	f107 0208 	add.w	r2, r7, #8
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	2202      	movs	r2, #2
 8009310:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009312:	e100      	b.n	8009516 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800931a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931c:	f107 0208 	add.w	r2, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	2202      	movs	r2, #2
 800932c:	701a      	strb	r2, [r3, #0]
      break;
 800932e:	e0f2      	b.n	8009516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b05      	cmp	r3, #5
 8009338:	f200 80ac 	bhi.w	8009494 <USBD_GetDescriptor+0x258>
 800933c:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <USBD_GetDescriptor+0x108>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009391 	.word	0x08009391
 800934c:	080093c5 	.word	0x080093c5
 8009350:	080093f9 	.word	0x080093f9
 8009354:	0800942d 	.word	0x0800942d
 8009358:	08009461 	.word	0x08009461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e091      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 facb 	bl	800991e <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e089      	b.n	80094a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e077      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fab1 	bl	800991e <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e06f      	b.n	80094a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e05d      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa97 	bl	800991e <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e055      	b.n	80094a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7c12      	ldrb	r2, [r2, #16]
 8009410:	f107 0108 	add.w	r1, r7, #8
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941a:	e043      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa7d 	bl	800991e <USBD_CtlError>
            err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
          break;
 800942a:	e03b      	b.n	80094a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00b      	beq.n	8009450 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	7c12      	ldrb	r2, [r2, #16]
 8009444:	f107 0108 	add.w	r1, r7, #8
 8009448:	4610      	mov	r0, r2
 800944a:	4798      	blx	r3
 800944c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944e:	e029      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa63 	bl	800991e <USBD_CtlError>
            err++;
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	3301      	adds	r3, #1
 800945c:	72fb      	strb	r3, [r7, #11]
          break;
 800945e:	e021      	b.n	80094a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	7c12      	ldrb	r2, [r2, #16]
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009482:	e00f      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa49 	bl	800991e <USBD_CtlError>
            err++;
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	3301      	adds	r3, #1
 8009490:	72fb      	strb	r3, [r7, #11]
          break;
 8009492:	e007      	b.n	80094a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa41 	bl	800991e <USBD_CtlError>
          err++;
 800949c:	7afb      	ldrb	r3, [r7, #11]
 800949e:	3301      	adds	r3, #1
 80094a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80094a2:	bf00      	nop
      }
      break;
 80094a4:	e037      	b.n	8009516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7c1b      	ldrb	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b6:	f107 0208 	add.w	r2, r7, #8
 80094ba:	4610      	mov	r0, r2
 80094bc:	4798      	blx	r3
 80094be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094c0:	e029      	b.n	8009516 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa2a 	bl	800991e <USBD_CtlError>
        err++;
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	3301      	adds	r3, #1
 80094ce:	72fb      	strb	r3, [r7, #11]
      break;
 80094d0:	e021      	b.n	8009516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7c1b      	ldrb	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e2:	f107 0208 	add.w	r2, r7, #8
 80094e6:	4610      	mov	r0, r2
 80094e8:	4798      	blx	r3
 80094ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	2207      	movs	r2, #7
 80094f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f4:	e00f      	b.n	8009516 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa10 	bl	800991e <USBD_CtlError>
        err++;
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	3301      	adds	r3, #1
 8009502:	72fb      	strb	r3, [r7, #11]
      break;
 8009504:	e007      	b.n	8009516 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa08 	bl	800991e <USBD_CtlError>
      err++;
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	3301      	adds	r3, #1
 8009512:	72fb      	strb	r3, [r7, #11]
      break;
 8009514:	bf00      	nop
  }

  if (err != 0U)
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11e      	bne.n	800955a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	88db      	ldrh	r3, [r3, #6]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d016      	beq.n	8009552 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009524:	893b      	ldrh	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	88da      	ldrh	r2, [r3, #6]
 800952e:	893b      	ldrh	r3, [r7, #8]
 8009530:	4293      	cmp	r3, r2
 8009532:	bf28      	it	cs
 8009534:	4613      	movcs	r3, r2
 8009536:	b29b      	uxth	r3, r3
 8009538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800953a:	893b      	ldrh	r3, [r7, #8]
 800953c:	461a      	mov	r2, r3
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa69 	bl	8009a18 <USBD_CtlSendData>
 8009546:	e009      	b.n	800955c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9e7 	bl	800991e <USBD_CtlError>
 8009550:	e004      	b.n	800955c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 faba 	bl	8009acc <USBD_CtlSendStatus>
 8009558:	e000      	b.n	800955c <USBD_GetDescriptor+0x320>
    return;
 800955a:	bf00      	nop
  }
}
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop

08009564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	889b      	ldrh	r3, [r3, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d131      	bne.n	80095da <USBD_SetAddress+0x76>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88db      	ldrh	r3, [r3, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d12d      	bne.n	80095da <USBD_SetAddress+0x76>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	2b7f      	cmp	r3, #127	@ 0x7f
 8009584:	d829      	bhi.n	80095da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	885b      	ldrh	r3, [r3, #2]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b03      	cmp	r3, #3
 800959c:	d104      	bne.n	80095a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9bc 	bl	800991e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a6:	e01d      	b.n	80095e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	7bfa      	ldrb	r2, [r7, #15]
 80095ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 ffeb 	bl	800a590 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fa86 	bl	8009acc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ce:	e009      	b.n	80095e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d8:	e004      	b.n	80095e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f99e 	bl	800991e <USBD_CtlError>
  }
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	4b4e      	ldr	r3, [pc, #312]	@ (800973c <USBD_SetConfig+0x150>)
 8009602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009604:	4b4d      	ldr	r3, [pc, #308]	@ (800973c <USBD_SetConfig+0x150>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d905      	bls.n	8009618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f985 	bl	800991e <USBD_CtlError>
    return USBD_FAIL;
 8009614:	2303      	movs	r3, #3
 8009616:	e08c      	b.n	8009732 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d002      	beq.n	800962a <USBD_SetConfig+0x3e>
 8009624:	2b03      	cmp	r3, #3
 8009626:	d029      	beq.n	800967c <USBD_SetConfig+0x90>
 8009628:	e075      	b.n	8009716 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800962a:	4b44      	ldr	r3, [pc, #272]	@ (800973c <USBD_SetConfig+0x150>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d020      	beq.n	8009674 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009632:	4b42      	ldr	r3, [pc, #264]	@ (800973c <USBD_SetConfig+0x150>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800963c:	4b3f      	ldr	r3, [pc, #252]	@ (800973c <USBD_SetConfig+0x150>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fe ffb9 	bl	80085ba <USBD_SetClassConfig>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f962 	bl	800991e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009662:	e065      	b.n	8009730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa31 	bl	8009acc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2203      	movs	r2, #3
 800966e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009672:	e05d      	b.n	8009730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa29 	bl	8009acc <USBD_CtlSendStatus>
      break;
 800967a:	e059      	b.n	8009730 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800967c:	4b2f      	ldr	r3, [pc, #188]	@ (800973c <USBD_SetConfig+0x150>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d112      	bne.n	80096aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800968c:	4b2b      	ldr	r3, [pc, #172]	@ (800973c <USBD_SetConfig+0x150>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009696:	4b29      	ldr	r3, [pc, #164]	@ (800973c <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fe ffa8 	bl	80085f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa12 	bl	8009acc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096a8:	e042      	b.n	8009730 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096aa:	4b24      	ldr	r3, [pc, #144]	@ (800973c <USBD_SetConfig+0x150>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d02a      	beq.n	800970e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7fe ff96 	bl	80085f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096c6:	4b1d      	ldr	r3, [pc, #116]	@ (800973c <USBD_SetConfig+0x150>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	@ (800973c <USBD_SetConfig+0x150>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fe ff6f 	bl	80085ba <USBD_SetClassConfig>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00f      	beq.n	8009706 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f918 	bl	800991e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fe ff7b 	bl	80085f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009704:	e014      	b.n	8009730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9e0 	bl	8009acc <USBD_CtlSendStatus>
      break;
 800970c:	e010      	b.n	8009730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9dc 	bl	8009acc <USBD_CtlSendStatus>
      break;
 8009714:	e00c      	b.n	8009730 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f900 	bl	800991e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800971e:	4b07      	ldr	r3, [pc, #28]	@ (800973c <USBD_SetConfig+0x150>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7fe ff64 	bl	80085f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800972a:	2303      	movs	r3, #3
 800972c:	73fb      	strb	r3, [r7, #15]
      break;
 800972e:	bf00      	nop
  }

  return ret;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	200002b0 	.word	0x200002b0

08009740 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	88db      	ldrh	r3, [r3, #6]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d004      	beq.n	800975c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8e2 	bl	800991e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800975a:	e023      	b.n	80097a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	dc02      	bgt.n	800976e <USBD_GetConfig+0x2e>
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc03      	bgt.n	8009774 <USBD_GetConfig+0x34>
 800976c:	e015      	b.n	800979a <USBD_GetConfig+0x5a>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d00b      	beq.n	800978a <USBD_GetConfig+0x4a>
 8009772:	e012      	b.n	800979a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3308      	adds	r3, #8
 800977e:	2201      	movs	r2, #1
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f948 	bl	8009a18 <USBD_CtlSendData>
        break;
 8009788:	e00c      	b.n	80097a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3304      	adds	r3, #4
 800978e:	2201      	movs	r2, #1
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f940 	bl	8009a18 <USBD_CtlSendData>
        break;
 8009798:	e004      	b.n	80097a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f8be 	bl	800991e <USBD_CtlError>
        break;
 80097a2:	bf00      	nop
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d81e      	bhi.n	8009802 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	88db      	ldrh	r3, [r3, #6]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d004      	beq.n	80097d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f8a5 	bl	800991e <USBD_CtlError>
        break;
 80097d4:	e01a      	b.n	800980c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f043 0202 	orr.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	330c      	adds	r3, #12
 80097f6:	2202      	movs	r2, #2
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f90c 	bl	8009a18 <USBD_CtlSendData>
      break;
 8009800:	e004      	b.n	800980c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f88a 	bl	800991e <USBD_CtlError>
      break;
 800980a:	bf00      	nop
  }
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d107      	bne.n	8009836 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f94c 	bl	8009acc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009834:	e013      	b.n	800985e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	2b02      	cmp	r3, #2
 800983c:	d10b      	bne.n	8009856 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	889b      	ldrh	r3, [r3, #4]
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	b29b      	uxth	r3, r3
 8009846:	b2da      	uxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f93c 	bl	8009acc <USBD_CtlSendStatus>
}
 8009854:	e003      	b.n	800985e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f860 	bl	800991e <USBD_CtlError>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009876:	b2db      	uxtb	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	2b02      	cmp	r3, #2
 800987c:	d80b      	bhi.n	8009896 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d10c      	bne.n	80098a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f91c 	bl	8009acc <USBD_CtlSendStatus>
      }
      break;
 8009894:	e004      	b.n	80098a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f840 	bl	800991e <USBD_CtlError>
      break;
 800989e:	e000      	b.n	80098a2 <USBD_ClrFeature+0x3c>
      break;
 80098a0:	bf00      	nop
  }
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff fa16 	bl	8008d06 <SWAPBYTE>
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fa09 	bl	8008d06 <SWAPBYTE>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff f9fc 	bl	8008d06 <SWAPBYTE>
 800990e:	4603      	mov	r3, r0
 8009910:	461a      	mov	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	80da      	strh	r2, [r3, #6]
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009928:	2180      	movs	r1, #128	@ 0x80
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fd98 	bl	800a460 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fd94 	bl	800a460 <USBD_LL_StallEP>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d042      	beq.n	80099dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f000 f842 	bl	80099e4 <USBD_GetLen>
 8009960:	4603      	mov	r3, r0
 8009962:	3301      	adds	r3, #1
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996a:	d808      	bhi.n	800997e <USBD_GetString+0x3e>
 800996c:	6938      	ldr	r0, [r7, #16]
 800996e:	f000 f839 	bl	80099e4 <USBD_GetLen>
 8009972:	4603      	mov	r3, r0
 8009974:	3301      	adds	r3, #1
 8009976:	b29b      	uxth	r3, r3
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	e001      	b.n	8009982 <USBD_GetString+0x42>
 800997e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	4413      	add	r3, r2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7812      	ldrb	r2, [r2, #0]
 8009990:	701a      	strb	r2, [r3, #0]
  idx++;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	3301      	adds	r3, #1
 8009996:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	2203      	movs	r2, #3
 80099a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	3301      	adds	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099a8:	e013      	b.n	80099d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	4413      	add	r3, r2
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	3301      	adds	r3, #1
 80099ba:	613b      	str	r3, [r7, #16]
    idx++;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	3301      	adds	r3, #1
 80099c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	4413      	add	r3, r2
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	3301      	adds	r3, #1
 80099d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e7      	bne.n	80099aa <USBD_GetString+0x6a>
 80099da:	e000      	b.n	80099de <USBD_GetString+0x9e>
    return;
 80099dc:	bf00      	nop
  }
}
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099f4:	e005      	b.n	8009a02 <USBD_GetLen+0x1e>
  {
    len++;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	3301      	adds	r3, #1
 80099fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3301      	adds	r3, #1
 8009a00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f5      	bne.n	80099f6 <USBD_GetLen+0x12>
  }

  return len;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fddc 	bl	800a5fc <USBD_LL_Transmit>

  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fdcb 	bl	800a5fc <USBD_LL_Transmit>

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 fde6 	bl	800a66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	2100      	movs	r1, #0
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 fdd5 	bl	800a66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009adc:	2300      	movs	r3, #0
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fd8a 	bl	800a5fc <USBD_LL_Transmit>

  return USBD_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2205      	movs	r2, #5
 8009afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b02:	2300      	movs	r3, #0
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fdaf 	bl	800a66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4912      	ldr	r1, [pc, #72]	@ (8009b68 <MX_USB_DEVICE_Init+0x50>)
 8009b20:	4812      	ldr	r0, [pc, #72]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b22:	f7fe fccd 	bl	80084c0 <USBD_Init>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b2c:	f7f7 fafc 	bl	8001128 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b30:	490f      	ldr	r1, [pc, #60]	@ (8009b70 <MX_USB_DEVICE_Init+0x58>)
 8009b32:	480e      	ldr	r0, [pc, #56]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b34:	f7fe fcf4 	bl	8008520 <USBD_RegisterClass>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b3e:	f7f7 faf3 	bl	8001128 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b42:	490c      	ldr	r1, [pc, #48]	@ (8009b74 <MX_USB_DEVICE_Init+0x5c>)
 8009b44:	4809      	ldr	r0, [pc, #36]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b46:	f7fe fbeb 	bl	8008320 <USBD_CDC_RegisterInterface>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b50:	f7f7 faea 	bl	8001128 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b54:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b56:	f7fe fd19 	bl	800858c <USBD_Start>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b60:	f7f7 fae2 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b64:	bf00      	nop
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	200000ac 	.word	0x200000ac
 8009b6c:	200002b4 	.word	0x200002b4
 8009b70:	20000018 	.word	0x20000018
 8009b74:	20000098 	.word	0x20000098

08009b78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4905      	ldr	r1, [pc, #20]	@ (8009b94 <CDC_Init_FS+0x1c>)
 8009b80:	4805      	ldr	r0, [pc, #20]	@ (8009b98 <CDC_Init_FS+0x20>)
 8009b82:	f7fe fbe7 	bl	8008354 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b86:	4905      	ldr	r1, [pc, #20]	@ (8009b9c <CDC_Init_FS+0x24>)
 8009b88:	4803      	ldr	r0, [pc, #12]	@ (8009b98 <CDC_Init_FS+0x20>)
 8009b8a:	f7fe fc05 	bl	8008398 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000d90 	.word	0x20000d90
 8009b98:	200002b4 	.word	0x200002b4
 8009b9c:	20000590 	.word	0x20000590

08009ba0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ba4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	2b23      	cmp	r3, #35	@ 0x23
 8009bc4:	d84a      	bhi.n	8009c5c <CDC_Control_FS+0xac>
 8009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <CDC_Control_FS+0x1c>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c5d 	.word	0x08009c5d
 8009bd0:	08009c5d 	.word	0x08009c5d
 8009bd4:	08009c5d 	.word	0x08009c5d
 8009bd8:	08009c5d 	.word	0x08009c5d
 8009bdc:	08009c5d 	.word	0x08009c5d
 8009be0:	08009c5d 	.word	0x08009c5d
 8009be4:	08009c5d 	.word	0x08009c5d
 8009be8:	08009c5d 	.word	0x08009c5d
 8009bec:	08009c5d 	.word	0x08009c5d
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c5d 	.word	0x08009c5d
 8009c00:	08009c5d 	.word	0x08009c5d
 8009c04:	08009c5d 	.word	0x08009c5d
 8009c08:	08009c5d 	.word	0x08009c5d
 8009c0c:	08009c5d 	.word	0x08009c5d
 8009c10:	08009c5d 	.word	0x08009c5d
 8009c14:	08009c5d 	.word	0x08009c5d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c5d 	.word	0x08009c5d
 8009c20:	08009c5d 	.word	0x08009c5d
 8009c24:	08009c5d 	.word	0x08009c5d
 8009c28:	08009c5d 	.word	0x08009c5d
 8009c2c:	08009c5d 	.word	0x08009c5d
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c5d 	.word	0x08009c5d
 8009c3c:	08009c5d 	.word	0x08009c5d
 8009c40:	08009c5d 	.word	0x08009c5d
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c5d 	.word	0x08009c5d
 8009c4c:	08009c5d 	.word	0x08009c5d
 8009c50:	08009c5d 	.word	0x08009c5d
 8009c54:	08009c5d 	.word	0x08009c5d
 8009c58:	08009c5d 	.word	0x08009c5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c5c:	bf00      	nop
  }

  return (USBD_OK);
 8009c5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	4808      	ldr	r0, [pc, #32]	@ (8009c9c <CDC_Receive_FS+0x30>)
 8009c7a:	f7fe fb8d 	bl	8008398 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c7e:	4807      	ldr	r0, [pc, #28]	@ (8009c9c <CDC_Receive_FS+0x30>)
 8009c80:	f7fe fbe8 	bl	8008454 <USBD_CDC_ReceivePacket>

  parseCmd(Buf, *Len);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f6 ff42 	bl	8000b14 <parseCmd>
  return (USBD_OK);
 8009c90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	200002b4 	.word	0x200002b4

08009ca0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce8 <CDC_Transmit_FS+0x48>)
 8009cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e00b      	b.n	8009cde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cc6:	887b      	ldrh	r3, [r7, #2]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4806      	ldr	r0, [pc, #24]	@ (8009ce8 <CDC_Transmit_FS+0x48>)
 8009cce:	f7fe fb41 	bl	8008354 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cd2:	4805      	ldr	r0, [pc, #20]	@ (8009ce8 <CDC_Transmit_FS+0x48>)
 8009cd4:	f7fe fb7e 	bl	80083d4 <USBD_CDC_TransmitPacket>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200002b4 	.word	0x200002b4

08009cec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2212      	movs	r2, #18
 8009d20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d22:	4b03      	ldr	r3, [pc, #12]	@ (8009d30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	200000cc 	.word	0x200000cc

08009d34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2204      	movs	r2, #4
 8009d44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d46:	4b03      	ldr	r3, [pc, #12]	@ (8009d54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	200000ec 	.word	0x200000ec

08009d58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	6039      	str	r1, [r7, #0]
 8009d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4907      	ldr	r1, [pc, #28]	@ (8009d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d6e:	4808      	ldr	r0, [pc, #32]	@ (8009d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d70:	f7ff fde6 	bl	8009940 <USBD_GetString>
 8009d74:	e004      	b.n	8009d80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4904      	ldr	r1, [pc, #16]	@ (8009d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d7a:	4805      	ldr	r0, [pc, #20]	@ (8009d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d7c:	f7ff fde0 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d80:	4b02      	ldr	r3, [pc, #8]	@ (8009d8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20001590 	.word	0x20001590
 8009d90:	0800a84c 	.word	0x0800a84c

08009d94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	4904      	ldr	r1, [pc, #16]	@ (8009db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009da4:	4804      	ldr	r0, [pc, #16]	@ (8009db8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009da6:	f7ff fdcb 	bl	8009940 <USBD_GetString>
  return USBD_StrDesc;
 8009daa:	4b02      	ldr	r3, [pc, #8]	@ (8009db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20001590 	.word	0x20001590
 8009db8:	0800a864 	.word	0x0800a864

08009dbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	221a      	movs	r2, #26
 8009dcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dce:	f000 f855 	bl	8009e7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dd2:	4b02      	ldr	r3, [pc, #8]	@ (8009ddc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200000f0 	.word	0x200000f0

08009de0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4907      	ldr	r1, [pc, #28]	@ (8009e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009df6:	4808      	ldr	r0, [pc, #32]	@ (8009e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009df8:	f7ff fda2 	bl	8009940 <USBD_GetString>
 8009dfc:	e004      	b.n	8009e08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4904      	ldr	r1, [pc, #16]	@ (8009e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e02:	4805      	ldr	r0, [pc, #20]	@ (8009e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e04:	f7ff fd9c 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e08:	4b02      	ldr	r3, [pc, #8]	@ (8009e14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001590 	.word	0x20001590
 8009e18:	0800a878 	.word	0x0800a878

08009e1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4907      	ldr	r1, [pc, #28]	@ (8009e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e32:	4808      	ldr	r0, [pc, #32]	@ (8009e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e34:	f7ff fd84 	bl	8009940 <USBD_GetString>
 8009e38:	e004      	b.n	8009e44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4904      	ldr	r1, [pc, #16]	@ (8009e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e3e:	4805      	ldr	r0, [pc, #20]	@ (8009e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e40:	f7ff fd7e 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20001590 	.word	0x20001590
 8009e54:	0800a884 	.word	0x0800a884

08009e58 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	220c      	movs	r2, #12
 8009e68:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e6a:	4b03      	ldr	r3, [pc, #12]	@ (8009e78 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	200000e0 	.word	0x200000e0

08009e7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e82:	4b0f      	ldr	r3, [pc, #60]	@ (8009ec0 <Get_SerialNum+0x44>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e88:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec4 <Get_SerialNum+0x48>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec8 <Get_SerialNum+0x4c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ea2:	2208      	movs	r2, #8
 8009ea4:	4909      	ldr	r1, [pc, #36]	@ (8009ecc <Get_SerialNum+0x50>)
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 f814 	bl	8009ed4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009eac:	2204      	movs	r2, #4
 8009eae:	4908      	ldr	r1, [pc, #32]	@ (8009ed0 <Get_SerialNum+0x54>)
 8009eb0:	68b8      	ldr	r0, [r7, #8]
 8009eb2:	f000 f80f 	bl	8009ed4 <IntToUnicode>
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	1fff7590 	.word	0x1fff7590
 8009ec4:	1fff7594 	.word	0x1fff7594
 8009ec8:	1fff7598 	.word	0x1fff7598
 8009ecc:	200000f2 	.word	0x200000f2
 8009ed0:	20000102 	.word	0x20000102

08009ed4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]
 8009eea:	e027      	b.n	8009f3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	0f1b      	lsrs	r3, r3, #28
 8009ef0:	2b09      	cmp	r3, #9
 8009ef2:	d80b      	bhi.n	8009f0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	0f1b      	lsrs	r3, r3, #28
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	4619      	mov	r1, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	440b      	add	r3, r1
 8009f04:	3230      	adds	r2, #48	@ 0x30
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e00a      	b.n	8009f22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	0f1b      	lsrs	r3, r3, #28
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4619      	mov	r1, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3237      	adds	r2, #55	@ 0x37
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	4413      	add	r3, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	75fb      	strb	r3, [r7, #23]
 8009f3c:	7dfa      	ldrb	r2, [r7, #23]
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d3d3      	bcc.n	8009eec <IntToUnicode+0x18>
  }
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
	...

08009f54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b0ac      	sub	sp, #176	@ 0xb0
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	605a      	str	r2, [r3, #4]
 8009f66:	609a      	str	r2, [r3, #8]
 8009f68:	60da      	str	r2, [r3, #12]
 8009f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	2288      	movs	r2, #136	@ 0x88
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fc31 	bl	800a7dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f82:	d173      	bne.n	800a06c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009f8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009f92:	2301      	movs	r3, #1
 8009f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009f96:	2301      	movs	r3, #1
 8009f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009f9a:	2318      	movs	r3, #24
 8009f9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009f9e:	2307      	movs	r3, #7
 8009fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009faa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009fb0:	f107 0314 	add.w	r3, r7, #20
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fa f823 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8009fc0:	f7f7 f8b2 	bl	8001128 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fc4:	4b2b      	ldr	r3, [pc, #172]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 8009fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fc8:	4a2a      	ldr	r2, [pc, #168]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009fd0:	4b28      	ldr	r3, [pc, #160]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 8009fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	613b      	str	r3, [r7, #16]
 8009fda:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009fdc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ff6:	230a      	movs	r3, #10
 8009ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ffc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800a000:	4619      	mov	r1, r3
 800a002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a006:	f7f7 fdff 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a00a:	4b1a      	ldr	r3, [pc, #104]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a00e:	4a19      	ldr	r2, [pc, #100]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a016:	4b17      	ldr	r3, [pc, #92]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a01a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a022:	4b14      	ldr	r3, [pc, #80]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d114      	bne.n	800a058 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a02e:	4b11      	ldr	r3, [pc, #68]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a032:	4a10      	ldr	r2, [pc, #64]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a038:	6593      	str	r3, [r2, #88]	@ 0x58
 800a03a:	4b0e      	ldr	r3, [pc, #56]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a03c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a03e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a042:	60bb      	str	r3, [r7, #8]
 800a044:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a046:	f7f9 f99b 	bl	8003380 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a04a:	4b0a      	ldr	r3, [pc, #40]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a04e:	4a09      	ldr	r2, [pc, #36]	@ (800a074 <HAL_PCD_MspInit+0x120>)
 800a050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a054:	6593      	str	r3, [r2, #88]	@ 0x58
 800a056:	e001      	b.n	800a05c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a058:	f7f9 f992 	bl	8003380 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a05c:	2200      	movs	r2, #0
 800a05e:	2100      	movs	r1, #0
 800a060:	2043      	movs	r0, #67	@ 0x43
 800a062:	f7f7 fb5f 	bl	8001724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a066:	2043      	movs	r0, #67	@ 0x43
 800a068:	f7f7 fb78 	bl	800175c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a06c:	bf00      	nop
 800a06e:	37b0      	adds	r7, #176	@ 0xb0
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	40021000 	.word	0x40021000

0800a078 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fe fac9 	bl	8008626 <USBD_LL_SetupStage>
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	6879      	ldr	r1, [r7, #4]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	440b      	add	r3, r1
 800a0bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	78fb      	ldrb	r3, [r7, #3]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	f7fe fb03 	bl	80086d0 <USBD_LL_DataOutStage>
}
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0e4:	78fa      	ldrb	r2, [r7, #3]
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	3320      	adds	r3, #32
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f7fe fb9c 	bl	8008836 <USBD_LL_DataInStage>
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a114:	4618      	mov	r0, r3
 800a116:	f7fe fcd6 	bl	8008ac6 <USBD_LL_SOF>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	79db      	ldrb	r3, [r3, #7]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d001      	beq.n	800a13a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a136:	f7f6 fff7 	bl	8001128 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a140:	7bfa      	ldrb	r2, [r7, #15]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7fe fc7a 	bl	8008a3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe fc22 	bl	800899a <USBD_LL_Reset>
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fc69 	bl	8008a5e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7adb      	ldrb	r3, [r3, #11]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a194:	4b04      	ldr	r3, [pc, #16]	@ (800a1a8 <HAL_PCD_SuspendCallback+0x48>)
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	4a03      	ldr	r2, [pc, #12]	@ (800a1a8 <HAL_PCD_SuspendCallback+0x48>)
 800a19a:	f043 0306 	orr.w	r3, r3, #6
 800a19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed00 	.word	0xe000ed00

0800a1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	6812      	ldr	r2, [r2, #0]
 800a1c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7adb      	ldrb	r3, [r3, #11]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1d4:	4b08      	ldr	r3, [pc, #32]	@ (800a1f8 <HAL_PCD_ResumeCallback+0x4c>)
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	4a07      	ldr	r2, [pc, #28]	@ (800a1f8 <HAL_PCD_ResumeCallback+0x4c>)
 800a1da:	f023 0306 	bic.w	r3, r3, #6
 800a1de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a1e0:	f000 faf6 	bl	800a7d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fc53 	bl	8008a96 <USBD_LL_Resume>
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	e000ed00 	.word	0xe000ed00

0800a1fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fca9 	bl	8008b6a <USBD_LL_IsoOUTIncomplete>
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fc65 	bl	8008b06 <USBD_LL_IsoINIncomplete>
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fcbb 	bl	8008bce <USBD_LL_DevConnected>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fcb8 	bl	8008be4 <USBD_LL_DevDisconnected>
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d13c      	bne.n	800a306 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a28c:	4a20      	ldr	r2, [pc, #128]	@ (800a310 <USBD_LL_Init+0x94>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a1e      	ldr	r2, [pc, #120]	@ (800a310 <USBD_LL_Init+0x94>)
 800a298:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a29c:	4b1c      	ldr	r3, [pc, #112]	@ (800a310 <USBD_LL_Init+0x94>)
 800a29e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2a6:	2206      	movs	r2, #6
 800a2a8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2aa:	4b19      	ldr	r3, [pc, #100]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2b0:	4b17      	ldr	r3, [pc, #92]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2b6:	4b16      	ldr	r3, [pc, #88]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2bc:	4b14      	ldr	r3, [pc, #80]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2c2:	4b13      	ldr	r3, [pc, #76]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a2c8:	4b11      	ldr	r3, [pc, #68]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2ce:	4b10      	ldr	r3, [pc, #64]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2da:	480d      	ldr	r0, [pc, #52]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2dc:	f7f7 fe56 	bl	8001f8c <HAL_PCD_Init>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2e6:	f7f6 ff1f 	bl	8001128 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2ea:	2180      	movs	r1, #128	@ 0x80
 800a2ec:	4808      	ldr	r0, [pc, #32]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2ee:	f7f8 ffae 	bl	800324e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2f2:	2240      	movs	r2, #64	@ 0x40
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4806      	ldr	r0, [pc, #24]	@ (800a310 <USBD_LL_Init+0x94>)
 800a2f8:	f7f8 ff62 	bl	80031c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a2fc:	2280      	movs	r2, #128	@ 0x80
 800a2fe:	2101      	movs	r1, #1
 800a300:	4803      	ldr	r0, [pc, #12]	@ (800a310 <USBD_LL_Init+0x94>)
 800a302:	f7f8 ff5d 	bl	80031c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20001790 	.word	0x20001790

0800a314 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f7 ff3d 	bl	80021aa <HAL_PCD_Start>
 800a330:	4603      	mov	r3, r0
 800a332:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	2b03      	cmp	r3, #3
 800a338:	d816      	bhi.n	800a368 <USBD_LL_Start+0x54>
 800a33a:	a201      	add	r2, pc, #4	@ (adr r2, 800a340 <USBD_LL_Start+0x2c>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a357 	.word	0x0800a357
 800a348:	0800a35d 	.word	0x0800a35d
 800a34c:	0800a363 	.word	0x0800a363
    case HAL_OK :
      usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
    break;
 800a354:	e00b      	b.n	800a36e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a356:	2303      	movs	r3, #3
 800a358:	73fb      	strb	r3, [r7, #15]
    break;
 800a35a:	e008      	b.n	800a36e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a35c:	2301      	movs	r3, #1
 800a35e:	73fb      	strb	r3, [r7, #15]
    break;
 800a360:	e005      	b.n	800a36e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a362:	2303      	movs	r3, #3
 800a364:	73fb      	strb	r3, [r7, #15]
    break;
 800a366:	e002      	b.n	800a36e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a368:	2303      	movs	r3, #3
 800a36a:	73fb      	strb	r3, [r7, #15]
    break;
 800a36c:	bf00      	nop
  }
  return usb_status;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	4603      	mov	r3, r0
 800a388:	70fb      	strb	r3, [r7, #3]
 800a38a:	460b      	mov	r3, r1
 800a38c:	70bb      	strb	r3, [r7, #2]
 800a38e:	4613      	mov	r3, r2
 800a390:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3a0:	78bb      	ldrb	r3, [r7, #2]
 800a3a2:	883a      	ldrh	r2, [r7, #0]
 800a3a4:	78f9      	ldrb	r1, [r7, #3]
 800a3a6:	f7f8 fbe9 	bl	8002b7c <HAL_PCD_EP_Open>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d817      	bhi.n	800a3e4 <USBD_LL_OpenEP+0x6c>
 800a3b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3bc <USBD_LL_OpenEP+0x44>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a3cd 	.word	0x0800a3cd
 800a3c0:	0800a3d3 	.word	0x0800a3d3
 800a3c4:	0800a3d9 	.word	0x0800a3d9
 800a3c8:	0800a3df 	.word	0x0800a3df
    case HAL_OK :
      usb_status = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	e00b      	b.n	800a3ea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d6:	e008      	b.n	800a3ea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	73fb      	strb	r3, [r7, #15]
    break;
 800a3dc:	e005      	b.n	800a3ea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e2:	e002      	b.n	800a3ea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e8:	bf00      	nop
  }
  return usb_status;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a40e:	78fa      	ldrb	r2, [r7, #3]
 800a410:	4611      	mov	r1, r2
 800a412:	4618      	mov	r0, r3
 800a414:	f7f8 fc1c 	bl	8002c50 <HAL_PCD_EP_Close>
 800a418:	4603      	mov	r3, r0
 800a41a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d816      	bhi.n	800a450 <USBD_LL_CloseEP+0x5c>
 800a422:	a201      	add	r2, pc, #4	@ (adr r2, 800a428 <USBD_LL_CloseEP+0x34>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a43f 	.word	0x0800a43f
 800a430:	0800a445 	.word	0x0800a445
 800a434:	0800a44b 	.word	0x0800a44b
    case HAL_OK :
      usb_status = USBD_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]
    break;
 800a43c:	e00b      	b.n	800a456 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	73fb      	strb	r3, [r7, #15]
    break;
 800a442:	e008      	b.n	800a456 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
    break;
 800a448:	e005      	b.n	800a456 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	73fb      	strb	r3, [r7, #15]
    break;
 800a44e:	e002      	b.n	800a456 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a450:	2303      	movs	r3, #3
 800a452:	73fb      	strb	r3, [r7, #15]
    break;
 800a454:	bf00      	nop
  }
  return usb_status;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a47a:	78fa      	ldrb	r2, [r7, #3]
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f8 fcab 	bl	8002dda <HAL_PCD_EP_SetStall>
 800a484:	4603      	mov	r3, r0
 800a486:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d816      	bhi.n	800a4bc <USBD_LL_StallEP+0x5c>
 800a48e:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <USBD_LL_StallEP+0x34>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4a5 	.word	0x0800a4a5
 800a498:	0800a4ab 	.word	0x0800a4ab
 800a49c:	0800a4b1 	.word	0x0800a4b1
 800a4a0:	0800a4b7 	.word	0x0800a4b7
    case HAL_OK :
      usb_status = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	e00b      	b.n	800a4c2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ae:	e008      	b.n	800a4c2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	e005      	b.n	800a4c2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ba:	e002      	b.n	800a4c2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	bf00      	nop
  }
  return usb_status;
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4e6:	78fa      	ldrb	r2, [r7, #3]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7f8 fcd7 	bl	8002e9e <HAL_PCD_EP_ClrStall>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d816      	bhi.n	800a528 <USBD_LL_ClearStallEP+0x5c>
 800a4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a500 <USBD_LL_ClearStallEP+0x34>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a511 	.word	0x0800a511
 800a504:	0800a517 	.word	0x0800a517
 800a508:	0800a51d 	.word	0x0800a51d
 800a50c:	0800a523 	.word	0x0800a523
    case HAL_OK :
      usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
    break;
 800a514:	e00b      	b.n	800a52e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a516:	2303      	movs	r3, #3
 800a518:	73fb      	strb	r3, [r7, #15]
    break;
 800a51a:	e008      	b.n	800a52e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a51c:	2301      	movs	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
    break;
 800a520:	e005      	b.n	800a52e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a522:	2303      	movs	r3, #3
 800a524:	73fb      	strb	r3, [r7, #15]
    break;
 800a526:	e002      	b.n	800a52e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a528:	2303      	movs	r3, #3
 800a52a:	73fb      	strb	r3, [r7, #15]
    break;
 800a52c:	bf00      	nop
  }
  return usb_status;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a54a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a54c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a550:	2b00      	cmp	r3, #0
 800a552:	da0b      	bge.n	800a56c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a55a:	68f9      	ldr	r1, [r7, #12]
 800a55c:	4613      	mov	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	3316      	adds	r3, #22
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	e00b      	b.n	800a584 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	4613      	mov	r3, r2
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a582:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7f8 fac0 	bl	8002b34 <HAL_PCD_SetAddress>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d816      	bhi.n	800a5ec <USBD_LL_SetUSBAddress+0x5c>
 800a5be:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c4 <USBD_LL_SetUSBAddress+0x34>)
 800a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c4:	0800a5d5 	.word	0x0800a5d5
 800a5c8:	0800a5db 	.word	0x0800a5db
 800a5cc:	0800a5e1 	.word	0x0800a5e1
 800a5d0:	0800a5e7 	.word	0x0800a5e7
    case HAL_OK :
      usb_status = USBD_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d8:	e00b      	b.n	800a5f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a5de:	e008      	b.n	800a5f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e4:	e005      	b.n	800a5f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ea:	e002      	b.n	800a5f2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f0:	bf00      	nop
  }
  return usb_status;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	607a      	str	r2, [r7, #4]
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	460b      	mov	r3, r1
 800a60a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a61a:	7af9      	ldrb	r1, [r7, #11]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	f7f8 fbaa 	bl	8002d78 <HAL_PCD_EP_Transmit>
 800a624:	4603      	mov	r3, r0
 800a626:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a628:	7dbb      	ldrb	r3, [r7, #22]
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d816      	bhi.n	800a65c <USBD_LL_Transmit+0x60>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <USBD_LL_Transmit+0x38>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a645 	.word	0x0800a645
 800a638:	0800a64b 	.word	0x0800a64b
 800a63c:	0800a651 	.word	0x0800a651
 800a640:	0800a657 	.word	0x0800a657
    case HAL_OK :
      usb_status = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	75fb      	strb	r3, [r7, #23]
    break;
 800a648:	e00b      	b.n	800a662 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a64a:	2303      	movs	r3, #3
 800a64c:	75fb      	strb	r3, [r7, #23]
    break;
 800a64e:	e008      	b.n	800a662 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a650:	2301      	movs	r3, #1
 800a652:	75fb      	strb	r3, [r7, #23]
    break;
 800a654:	e005      	b.n	800a662 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a656:	2303      	movs	r3, #3
 800a658:	75fb      	strb	r3, [r7, #23]
    break;
 800a65a:	e002      	b.n	800a662 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a65c:	2303      	movs	r3, #3
 800a65e:	75fb      	strb	r3, [r7, #23]
    break;
 800a660:	bf00      	nop
  }
  return usb_status;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	607a      	str	r2, [r7, #4]
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	460b      	mov	r3, r1
 800a67a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a68a:	7af9      	ldrb	r1, [r7, #11]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	f7f8 fb28 	bl	8002ce4 <HAL_PCD_EP_Receive>
 800a694:	4603      	mov	r3, r0
 800a696:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a698:	7dbb      	ldrb	r3, [r7, #22]
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d816      	bhi.n	800a6cc <USBD_LL_PrepareReceive+0x60>
 800a69e:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a4 <USBD_LL_PrepareReceive+0x38>)
 800a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a4:	0800a6b5 	.word	0x0800a6b5
 800a6a8:	0800a6bb 	.word	0x0800a6bb
 800a6ac:	0800a6c1 	.word	0x0800a6c1
 800a6b0:	0800a6c7 	.word	0x0800a6c7
    case HAL_OK :
      usb_status = USBD_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	75fb      	strb	r3, [r7, #23]
    break;
 800a6b8:	e00b      	b.n	800a6d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	75fb      	strb	r3, [r7, #23]
    break;
 800a6be:	e008      	b.n	800a6d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	75fb      	strb	r3, [r7, #23]
    break;
 800a6c4:	e005      	b.n	800a6d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	75fb      	strb	r3, [r7, #23]
    break;
 800a6ca:	e002      	b.n	800a6d2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	75fb      	strb	r3, [r7, #23]
    break;
 800a6d0:	bf00      	nop
  }
  return usb_status;
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6ee:	78fa      	ldrb	r2, [r7, #3]
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f8 fb28 	bl	8002d48 <HAL_PCD_EP_GetRxCount>
 800a6f8:	4603      	mov	r3, r0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <HAL_PCDEx_LPM_Callback+0x18>
 800a716:	2b01      	cmp	r3, #1
 800a718:	d01f      	beq.n	800a75a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a71a:	e03b      	b.n	800a794 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7adb      	ldrb	r3, [r3, #11]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a724:	f000 f854 	bl	800a7d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a728:	4b1c      	ldr	r3, [pc, #112]	@ (800a79c <HAL_PCDEx_LPM_Callback+0x98>)
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	4a1b      	ldr	r2, [pc, #108]	@ (800a79c <HAL_PCDEx_LPM_Callback+0x98>)
 800a72e:	f023 0306 	bic.w	r3, r3, #6
 800a732:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6812      	ldr	r2, [r2, #0]
 800a742:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a746:	f023 0301 	bic.w	r3, r3, #1
 800a74a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe f99f 	bl	8008a96 <USBD_LL_Resume>
    break;
 800a758:	e01c      	b.n	800a794 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a76c:	f043 0301 	orr.w	r3, r3, #1
 800a770:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fe f970 	bl	8008a5e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7adb      	ldrb	r3, [r3, #11]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d005      	beq.n	800a792 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a786:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <HAL_PCDEx_LPM_Callback+0x98>)
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	4a04      	ldr	r2, [pc, #16]	@ (800a79c <HAL_PCDEx_LPM_Callback+0x98>)
 800a78c:	f043 0306 	orr.w	r3, r3, #6
 800a790:	6113      	str	r3, [r2, #16]
    break;
 800a792:	bf00      	nop
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	e000ed00 	.word	0xe000ed00

0800a7a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	@ (800a7b8 <USBD_static_malloc+0x18>)
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20001c74 	.word	0x20001c74

0800a7bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a7d4:	f7f6 fade 	bl	8000d94 <SystemClock_Config>
}
 800a7d8:	bf00      	nop
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <memset>:
 800a7dc:	4402      	add	r2, r0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d100      	bne.n	800a7e6 <memset+0xa>
 800a7e4:	4770      	bx	lr
 800a7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ea:	e7f9      	b.n	800a7e0 <memset+0x4>

0800a7ec <__libc_init_array>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a824 <__libc_init_array+0x38>)
 800a7f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a828 <__libc_init_array+0x3c>)
 800a7f2:	1b64      	subs	r4, r4, r5
 800a7f4:	10a4      	asrs	r4, r4, #2
 800a7f6:	2600      	movs	r6, #0
 800a7f8:	42a6      	cmp	r6, r4
 800a7fa:	d109      	bne.n	800a810 <__libc_init_array+0x24>
 800a7fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a82c <__libc_init_array+0x40>)
 800a7fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a830 <__libc_init_array+0x44>)
 800a800:	f000 f818 	bl	800a834 <_init>
 800a804:	1b64      	subs	r4, r4, r5
 800a806:	10a4      	asrs	r4, r4, #2
 800a808:	2600      	movs	r6, #0
 800a80a:	42a6      	cmp	r6, r4
 800a80c:	d105      	bne.n	800a81a <__libc_init_array+0x2e>
 800a80e:	bd70      	pop	{r4, r5, r6, pc}
 800a810:	f855 3b04 	ldr.w	r3, [r5], #4
 800a814:	4798      	blx	r3
 800a816:	3601      	adds	r6, #1
 800a818:	e7ee      	b.n	800a7f8 <__libc_init_array+0xc>
 800a81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81e:	4798      	blx	r3
 800a820:	3601      	adds	r6, #1
 800a822:	e7f2      	b.n	800a80a <__libc_init_array+0x1e>
 800a824:	0800a8e4 	.word	0x0800a8e4
 800a828:	0800a8e4 	.word	0x0800a8e4
 800a82c:	0800a8e4 	.word	0x0800a8e4
 800a830:	0800a8e8 	.word	0x0800a8e8

0800a834 <_init>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	bf00      	nop
 800a838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83a:	bc08      	pop	{r3}
 800a83c:	469e      	mov	lr, r3
 800a83e:	4770      	bx	lr

0800a840 <_fini>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	bf00      	nop
 800a844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a846:	bc08      	pop	{r3}
 800a848:	469e      	mov	lr, r3
 800a84a:	4770      	bx	lr
