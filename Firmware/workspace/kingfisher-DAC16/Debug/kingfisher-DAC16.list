
kingfisher-DAC16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009528  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080096b0  080096b0  0000a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800973c  0800973c  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800973c  0800973c  0000a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009744  08009744  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009744  08009744  0000a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009748  08009748  0000a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  0800974c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  2000010c  08009858  0000b10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dfc  08009858  0000bdfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169b6  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f7  00000000  00000000  00021af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  000252f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dec  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c8c  00000000  00000000  0002732c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017315  00000000  00000000  0004ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed5ab  00000000  00000000  000672cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b34  00000000  00000000  001548bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001593f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009698 	.word	0x08009698

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	08009698 	.word	0x08009698

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <DACx1416_SPI_transmit>:
extern SPI_HandleTypeDef hspi1;




void DACx1416_SPI_transmit(uint8_t *txBuffer,uint16_t size){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]



	// Full-duplex transmission and reception (blocking mode)
	if (HAL_SPI_Transmit(&hspi1, txBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 80004c4:	887a      	ldrh	r2, [r7, #2]
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <DACx1416_SPI_transmit+0x2c>)
 80004ce:	f003 fcb2 	bl	8003e36 <HAL_SPI_Transmit>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <DACx1416_SPI_transmit+0x24>
	{
		// Communication error
		Error_Handler();
 80004d8:	f000 fa9a 	bl	8000a10 <Error_Handler>
	}



}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000128 	.word	0x20000128

080004e8 <DACx1416_SPI_receive>:


void DACx1416_SPI_receive(uint8_t *rxBuffer,uint16_t size){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	807b      	strh	r3, [r7, #2]


	// Full-duplex transmission and reception (blocking mode)
	if (HAL_SPI_Receive(&hspi1, rxBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 80004f4:	887a      	ldrh	r2, [r7, #2]
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	4805      	ldr	r0, [pc, #20]	@ (8000514 <DACx1416_SPI_receive+0x2c>)
 80004fe:	f003 fe10 	bl	8004122 <HAL_SPI_Receive>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <DACx1416_SPI_receive+0x24>
	{
		// Communication error
		Error_Handler();
 8000508:	f000 fa82 	bl	8000a10 <Error_Handler>
	}

}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000128 	.word	0x20000128

08000518 <DACx1416_write_register>:
}




void DACx1416_write_register(uint8_t address, uint16_t data){
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000530:	f000 ff02 	bl	8001338 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3] = {address & ~(1<<7) , (data >> 8) & 0xFF, data & 0xFF};
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800053a:	b2db      	uxtb	r3, r3
 800053c:	733b      	strb	r3, [r7, #12]
 800053e:	88bb      	ldrh	r3, [r7, #4]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	b29b      	uxth	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3];
	SPI1_TransmitReceive(txBuffer, rxBuffer,  3);
 800054e:	f107 0108 	add.w	r1, r7, #8
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2203      	movs	r2, #3
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f849 	bl	80005f0 <SPI1_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000566:	f000 fee7 	bl	8001338 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <DACx1416_read_register>:

uint16_t DACx1416_read_register(uint8_t address){
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	4603      	mov	r3, r0
 800057a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 800057c:	2200      	movs	r2, #0
 800057e:	2110      	movs	r1, #16
 8000580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000584:	f000 fed8 	bl	8001338 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3] = {address | (1<<7) , 0xFF, 0xFF};
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800058e:	b2db      	uxtb	r3, r3
 8000590:	733b      	strb	r3, [r7, #12]
 8000592:	23ff      	movs	r3, #255	@ 0xff
 8000594:	737b      	strb	r3, [r7, #13]
 8000596:	23ff      	movs	r3, #255	@ 0xff
 8000598:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3];
	DACx1416_SPI_transmit(txBuffer, 3);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2103      	movs	r1, #3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff89 	bl	80004b8 <DACx1416_SPI_transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 80005a6:	2201      	movs	r2, #1
 80005a8:	2110      	movs	r1, #16
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ae:	f000 fec3 	bl	8001338 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ba:	f000 febd 	bl	8001338 <HAL_GPIO_WritePin>
	DACx1416_SPI_receive(rxBuffer, 3);
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	2103      	movs	r1, #3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff8f 	bl	80004e8 <DACx1416_SPI_receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f000 feb1 	bl	8001338 <HAL_GPIO_WritePin>


	return rxBuffer[1]<<8 | rxBuffer[2];
 80005d6:	7a7b      	ldrb	r3, [r7, #9]
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	b21a      	sxth	r2, r3
 80005dc:	7abb      	ldrb	r3, [r7, #10]
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	b29b      	uxth	r3, r3

}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <SPI1_TransmitReceive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SPI1_TransmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	4613      	mov	r3, r2
 80005fc:	80fb      	strh	r3, [r7, #6]
    // Pull CS low to start the transmission
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low (adjust GPIO pin as needed)
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000606:	f000 fe97 	bl	8001338 <HAL_GPIO_WritePin>

    // Full-duplex transmission and reception (blocking mode)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, size, HAL_MAX_DELAY) != HAL_OK)
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	68f9      	ldr	r1, [r7, #12]
 8000616:	4809      	ldr	r0, [pc, #36]	@ (800063c <SPI1_TransmitReceive+0x4c>)
 8000618:	f003 febb 	bl	8004392 <HAL_SPI_TransmitReceive>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SPI1_TransmitReceive+0x36>
    {
        // Communication error
        Error_Handler();
 8000622:	f000 f9f5 	bl	8000a10 <Error_Handler>
    }

    // Pull CS high to end the transmission
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
 8000626:	2201      	movs	r2, #1
 8000628:	2110      	movs	r1, #16
 800062a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062e:	f000 fe83 	bl	8001338 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000128 	.word	0x20000128

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fb22 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8b5 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f973 	bl	8000938 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000652:	f000 f903 	bl	800085c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000656:	f000 f93f 	bl	80008d8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800065a:	f008 f9bb 	bl	80089d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000666:	f000 fe67 	bl	8001338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4851      	ldr	r0, [pc, #324]	@ (80007b4 <main+0x174>)
 8000670:	f000 fe62 	bl	8001338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	484e      	ldr	r0, [pc, #312]	@ (80007b4 <main+0x174>)
 800067a:	f000 fe5d 	bl	8001338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2180      	movs	r1, #128	@ 0x80
 8000682:	484c      	ldr	r0, [pc, #304]	@ (80007b4 <main+0x174>)
 8000684:	f000 fe58 	bl	8001338 <HAL_GPIO_WritePin>
//
//  SPI1_TransmitReceive(txBuffer3, rxBuffer3, 3);


  volatile uint16_t x;
  x = DACx1416_read_register(3);
 8000688:	2003      	movs	r0, #3
 800068a:	f7ff ff72 	bl	8000572 <DACx1416_read_register>
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  x = DACx1416_read_register(5);
 8000692:	2005      	movs	r0, #5
 8000694:	f7ff ff6d 	bl	8000572 <DACx1416_read_register>
 8000698:	4603      	mov	r3, r0
 800069a:	80fb      	strh	r3, [r7, #6]
  x = DACx1416_read_register(4);
 800069c:	2004      	movs	r0, #4
 800069e:	f7ff ff68 	bl	8000572 <DACx1416_read_register>
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
  x = DACx1416_read_register(3);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f7ff ff63 	bl	8000572 <DACx1416_read_register>
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  x = DACx1416_read_register(2);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff5e 	bl	8000572 <DACx1416_read_register>
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
  x = DACx1416_read_register(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ff59 	bl	8000572 <DACx1416_read_register>
 80006c0:	4603      	mov	r3, r0
 80006c2:	80fb      	strh	r3, [r7, #6]


  x = DACx1416_read_register(3);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f7ff ff54 	bl	8000572 <DACx1416_read_register>
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
  //DACx1416_write_register(2, 0b0000111010100100);
  x = DACx1416_read_register(3);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f7ff ff4f 	bl	8000572 <DACx1416_read_register>
 80006d4:	4603      	mov	r3, r0
 80006d6:	80fb      	strh	r3, [r7, #6]

  DACx1416_write_register(0x03, 0b0000101010000100);
 80006d8:	f640 2184 	movw	r1, #2692	@ 0xa84
 80006dc:	2003      	movs	r0, #3
 80006de:	f7ff ff1b 	bl	8000518 <DACx1416_write_register>
  x = DACx1416_read_register(0x3);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f7ff ff45 	bl	8000572 <DACx1416_read_register>
 80006e8:	4603      	mov	r3, r0
 80006ea:	80fb      	strh	r3, [r7, #6]
  DACx1416_write_register(0x9, 0x0000 );
 80006ec:	2100      	movs	r1, #0
 80006ee:	2009      	movs	r0, #9
 80006f0:	f7ff ff12 	bl	8000518 <DACx1416_write_register>
  x = DACx1416_read_register(0x9);
 80006f4:	2009      	movs	r0, #9
 80006f6:	f7ff ff3c 	bl	8000572 <DACx1416_read_register>
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]

  DACx1416_write_register(0xD, 0b00000000);
 80006fe:	2100      	movs	r1, #0
 8000700:	200d      	movs	r0, #13
 8000702:	f7ff ff09 	bl	8000518 <DACx1416_write_register>

  DACx1416_write_register(0x10, 0);
 8000706:	2100      	movs	r1, #0
 8000708:	2010      	movs	r0, #16
 800070a:	f7ff ff05 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 1023); //0.078125
 800070e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000712:	2010      	movs	r0, #16
 8000714:	f7ff ff00 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 2047); //0.15625
 8000718:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800071c:	2010      	movs	r0, #16
 800071e:	f7ff fefb 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 4095); //0.3125
 8000722:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000726:	2010      	movs	r0, #16
 8000728:	f7ff fef6 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 8191); //0.625
 800072c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8000730:	2010      	movs	r0, #16
 8000732:	f7ff fef1 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 16383); //1.25
 8000736:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 800073a:	2010      	movs	r0, #16
 800073c:	f7ff feec 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 32767); //2.5
 8000740:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000744:	2010      	movs	r0, #16
 8000746:	f7ff fee7 	bl	8000518 <DACx1416_write_register>


  DACx1416_write_register(0x10, 36000); // 2.7466V
 800074a:	f648 41a0 	movw	r1, #36000	@ 0x8ca0
 800074e:	2010      	movs	r0, #16
 8000750:	f7ff fee2 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 40000); // 3.0528V
 8000754:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8000758:	2010      	movs	r0, #16
 800075a:	f7ff fedd 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 44000); // 3.3591V
 800075e:	f64a 31e0 	movw	r1, #44000	@ 0xabe0
 8000762:	2010      	movs	r0, #16
 8000764:	f7ff fed8 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 48000); // 3.6654V
 8000768:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 800076c:	2010      	movs	r0, #16
 800076e:	f7ff fed3 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 50000); // 3.8185V
 8000772:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000776:	2010      	movs	r0, #16
 8000778:	f7ff fece 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 52000); // 3.9715V
 800077c:	f64c 3120 	movw	r1, #52000	@ 0xcb20
 8000780:	2010      	movs	r0, #16
 8000782:	f7ff fec9 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 56000); // 4.2778V
 8000786:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 800078a:	2010      	movs	r0, #16
 800078c:	f7ff fec4 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 60000); // 4.5841V   --> 4.37V
 8000790:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8000794:	2010      	movs	r0, #16
 8000796:	f7ff febf 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 64000); // 4.8904V --> 4.497V
 800079a:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 800079e:	2010      	movs	r0, #16
 80007a0:	f7ff feba 	bl	8000518 <DACx1416_write_register>
  DACx1416_write_register(0x10, 65535); //5V --> 3.5V
 80007a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007a8:	2010      	movs	r0, #16
 80007aa:	f7ff feb5 	bl	8000518 <DACx1416_write_register>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ae:	bf00      	nop
 80007b0:	e7fd      	b.n	80007ae <main+0x16e>
 80007b2:	bf00      	nop
 80007b4:	48000400 	.word	0x48000400

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b096      	sub	sp, #88	@ 0x58
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2244      	movs	r2, #68	@ 0x44
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f008 ff3a 	bl	8009640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007de:	f001 ff67 	bl	80026b0 <HAL_PWREx_ControlVoltageScaling>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007e8:	f000 f912 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007ec:	2310      	movs	r3, #16
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f8:	2360      	movs	r3, #96	@ 0x60
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000800:	2301      	movs	r3, #1
 8000802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000808:	2328      	movs	r3, #40	@ 0x28
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080c:	2307      	movs	r3, #7
 800080e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4618      	mov	r0, r3
 800081e:	f001 ffad 	bl	800277c <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000828:	f000 f8f2 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2303      	movs	r3, #3
 8000832:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2104      	movs	r1, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fb75 	bl	8002f34 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000850:	f000 f8de 	bl	8000a10 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3758      	adds	r7, #88	@ 0x58
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_SPI1_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000868:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000876:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800087a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_SPI1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_SPI1_Init+0x74>)
 800088a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800088e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000892:	2208      	movs	r2, #8
 8000894:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_SPI1_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_SPI1_Init+0x74>)
 80008bc:	f003 fa18 	bl	8003cf0 <HAL_SPI_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f8a3 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000128 	.word	0x20000128
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <MX_USART1_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 800091c:	f004 f914 	bl	8004b48 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f873 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000018c 	.word	0x2000018c
 8000934:	40013800 	.word	0x40013800

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a2d      	ldr	r2, [pc, #180]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a27      	ldr	r2, [pc, #156]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_GPIO_Init+0xd0>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2110      	movs	r1, #16
 800099a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099e:	f000 fccb 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 80009a2:	2200      	movs	r2, #0
 80009a4:	21e7      	movs	r1, #231	@ 0xe7
 80009a6:	4819      	ldr	r0, [pc, #100]	@ (8000a0c <MX_GPIO_Init+0xd4>)
 80009a8:	f000 fcc6 	bl	8001338 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ac:	2310      	movs	r3, #16
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c6:	f000 fb0d 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 80009ca:	23e7      	movs	r3, #231	@ 0xe7
 80009cc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <MX_GPIO_Init+0xd4>)
 80009e2:	f000 faff 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_GPIO_Init+0xd4>)
 80009fc:	f000 faf2 	bl	8000fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_SPI_MspInit+0x7c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d128      	bne.n	8000ad8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23e0      	movs	r3, #224	@ 0xe0
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f000 fa86 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40013000 	.word	0x40013000
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ac      	sub	sp, #176	@ 0xb0
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2288      	movs	r2, #136	@ 0x88
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f008 fd99 	bl	8009640 <memset>
  if(huart->Instance==USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a22      	ldr	r2, [pc, #136]	@ (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d13c      	bne.n	8000b92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fc27 	bl	8003378 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b30:	f7ff ff6e 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b38:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b50:	4a13      	ldr	r2, [pc, #76]	@ (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b64:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8e:	f000 fa29 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b92:	bf00      	nop
 8000b94:	37b0      	adds	r7, #176	@ 0xb0
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f89d 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f000 fceb 	bl	80015e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200016f8 	.word	0x200016f8

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f008 fcf1 	bl	8009650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fce7 	bl	8000640 <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000c80:	0800974c 	.word	0x0800974c
  ldr r2, =_sbss
 8000c84:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000c88:	20001dfc 	.word	0x20001dfc

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>

08000c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f961 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f80e 	bl	8000cc0 <HAL_InitTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e001      	b.n	8000cb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb0:	f7ff feb4 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_InitTick+0x6c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d023      	beq.n	8000d1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_InitTick+0x70>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_InitTick+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f96d 	bl	8000fca <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10f      	bne.n	8000d16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d809      	bhi.n	8000d10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d04:	f000 f937 	bl	8000f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_InitTick+0x74>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e007      	b.n	8000d20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e004      	b.n	8000d20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e001      	b.n	8000d20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000214 	.word	0x20000214

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000214 	.word	0x20000214

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffde 	bl	8000d60 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	@ (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff3e 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff31 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e17f      	b.n	80012f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8171 	beq.w	80012ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x40>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d118      	bne.n	80010c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	08db      	lsrs	r3, r3, #3
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	6939      	ldr	r1, [r7, #16]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80ac 	beq.w	80012ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <HAL_GPIO_Init+0x330>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119a:	4a5e      	ldr	r2, [pc, #376]	@ (8001314 <HAL_GPIO_Init+0x330>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001314 <HAL_GPIO_Init+0x330>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001318 <HAL_GPIO_Init+0x334>)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x242>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x338>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x23e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x33c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x23a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x340>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x236>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x344>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x232>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x348>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x22e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x34c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x22a>
 800120a:	2306      	movs	r3, #6
 800120c:	e00c      	b.n	8001228 <HAL_GPIO_Init+0x244>
 800120e:	2307      	movs	r3, #7
 8001210:	e00a      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001212:	2305      	movs	r3, #5
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001216:	2304      	movs	r3, #4
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x244>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x244>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001226:	2300      	movs	r3, #0
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	f002 0203 	and.w	r2, r2, #3
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001238:	4937      	ldr	r1, [pc, #220]	@ (8001318 <HAL_GPIO_Init+0x334>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_GPIO_Init+0x350>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800126a:	4a32      	ldr	r2, [pc, #200]	@ (8001334 <HAL_GPIO_Init+0x350>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <HAL_GPIO_Init+0x350>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001294:	4a27      	ldr	r2, [pc, #156]	@ (8001334 <HAL_GPIO_Init+0x350>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <HAL_GPIO_Init+0x350>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012be:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_GPIO_Init+0x350>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_GPIO_Init+0x350>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e8:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <HAL_GPIO_Init+0x350>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f ae78 	bne.w	8000ff4 <HAL_GPIO_Init+0x10>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	48000c00 	.word	0x48000c00
 8001328:	48001000 	.word	0x48001000
 800132c:	48001400 	.word	0x48001400
 8001330:	48001800 	.word	0x48001800
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001354:	e002      	b.n	800135c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e101      	b.n	800157e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f007 fd12 	bl	8008db8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 f9c9 	bl	800573e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7c1a      	ldrb	r2, [r3, #16]
 80013b4:	f88d 2000 	strb.w	r2, [sp]
 80013b8:	3304      	adds	r3, #4
 80013ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013bc:	f004 f8e5 	bl	800558a <USB_CoreInit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0d5      	b.n	800157e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 f9c1 	bl	8005760 <USB_SetCurrentMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0c6      	b.n	800157e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e04a      	b.n	800148c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	3315      	adds	r3, #21
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3314      	adds	r3, #20
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	b298      	uxth	r0, r3
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	332e      	adds	r3, #46	@ 0x2e
 8001432:	4602      	mov	r2, r0
 8001434:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3318      	adds	r3, #24
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	331c      	adds	r3, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	3320      	adds	r3, #32
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3324      	adds	r3, #36	@ 0x24
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	3301      	adds	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	429a      	cmp	r2, r3
 8001494:	d3af      	bcc.n	80013f6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e044      	b.n	8001526 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3b5      	bcc.n	800149c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7c1a      	ldrb	r2, [r3, #16]
 8001538:	f88d 2000 	strb.w	r2, [sp]
 800153c:	3304      	adds	r3, #4
 800153e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001540:	f004 f95a 	bl	80057f8 <USB_DevInit>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e013      	b.n	800157e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7b1b      	ldrb	r3, [r3, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d102      	bne.n	8001572 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 f86d 	bl	800264c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f005 f911 	bl	800679e <USB_DevDisconnect>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_PCD_Start+0x1c>
 800159e:	2302      	movs	r3, #2
 80015a0:	e01c      	b.n	80015dc <HAL_PCD_Start+0x56>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7b5b      	ldrb	r3, [r3, #13]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d105      	bne.n	80015be <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 f8aa 	bl	800571c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 f8c5 	bl	800675c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b08d      	sub	sp, #52	@ 0x34
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 f983 	bl	8006906 <USB_GetMode>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8481 	bne.w	8001f0a <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f005 f8e7 	bl	80067e0 <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8477 	beq.w	8001f08 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f005 f8d4 	bl	80067e0 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f002 0202 	and.w	r2, r2, #2
 8001650:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f005 f8c2 	bl	80067e0 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b10      	cmp	r3, #16
 8001664:	d161      	bne.n	800172a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0210 	bic.w	r2, r2, #16
 8001674:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f003 020f 	and.w	r2, r3, #15
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	3304      	adds	r3, #4
 8001694:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	0c5b      	lsrs	r3, r3, #17
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d124      	bne.n	80016ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d035      	beq.n	800171a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	6a38      	ldr	r0, [r7, #32]
 80016c2:	f004 fef9 	bl	80064b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d2:	441a      	add	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e4:	441a      	add	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	e016      	b.n	800171a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	0c5b      	lsrs	r3, r3, #17
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d110      	bne.n	800171a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016fe:	2208      	movs	r2, #8
 8001700:	4619      	mov	r1, r3
 8001702:	6a38      	ldr	r0, [r7, #32]
 8001704:	f004 fed8 	bl	80064b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001714:	441a      	add	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0210 	orr.w	r2, r2, #16
 8001728:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f005 f856 	bl	80067e0 <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800173a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800173e:	f040 80a7 	bne.w	8001890 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f005 f85b 	bl	8006806 <USB_ReadDevAllOutEpInterrupt>
 8001750:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001752:	e099      	b.n	8001888 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 808e 	beq.w	800187c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f87f 	bl	800686e <USB_ReadDevOutEPInterrupt>
 8001770:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001788:	461a      	mov	r2, r3
 800178a:	2301      	movs	r3, #1
 800178c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800178e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fe81 	bl	8002498 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00c      	beq.n	80017ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ac:	461a      	mov	r2, r3
 80017ae:	2308      	movs	r3, #8
 80017b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 febd 	bl	8002534 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017d0:	461a      	mov	r2, r3
 80017d2:	2310      	movs	r3, #16
 80017d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d030      	beq.n	8001842 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e8:	2b80      	cmp	r3, #128	@ 0x80
 80017ea:	d109      	bne.n	8001800 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d108      	bne.n	8001830 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f007 fc18 	bl	8009060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800183c:	461a      	mov	r2, r3
 800183e:	2302      	movs	r3, #2
 8001840:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001858:	461a      	mov	r2, r3
 800185a:	2320      	movs	r3, #32
 800185c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d009      	beq.n	800187c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001874:	461a      	mov	r2, r3
 8001876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	3301      	adds	r3, #1
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f af62 	bne.w	8001754 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f004 ffa3 	bl	80067e0 <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018a4:	f040 80a4 	bne.w	80019f0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 ffc4 	bl	800683a <USB_ReadDevAllInEpInterrupt>
 80018b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80018b8:	e096      	b.n	80019e8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 808b 	beq.w	80019dc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 ffea 	bl	80068aa <USB_ReadDevInEPInterrupt>
 80018d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d020      	beq.n	8001924 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	2201      	movs	r2, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69f9      	ldr	r1, [r7, #28]
 80018fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001902:	4013      	ands	r3, r2
 8001904:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001912:	461a      	mov	r2, r3
 8001914:	2301      	movs	r3, #1
 8001916:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f007 fb09 	bl	8008f36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800193a:	461a      	mov	r2, r3
 800193c:	2308      	movs	r3, #8
 800193e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001956:	461a      	mov	r2, r3
 8001958:	2310      	movs	r3, #16
 800195a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001972:	461a      	mov	r2, r3
 8001974:	2340      	movs	r3, #64	@ 0x40
 8001976:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d023      	beq.n	80019ca <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001984:	6a38      	ldr	r0, [r7, #32]
 8001986:	f004 f87f 	bl	8005a88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	3310      	adds	r3, #16
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f007 fb66 	bl	8009084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019c4:	461a      	mov	r2, r3
 80019c6:	2302      	movs	r3, #2
 80019c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fcd6 	bl	8002388 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	3301      	adds	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f47f af65 	bne.w	80018ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fef3 	bl	80067e0 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a04:	d122      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f007 fd9a 	bl	8009568 <HAL_PCDEx_LPM_Callback>
 8001a34:	e002      	b.n	8001a3c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f007 faea 	bl	8009010 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fec5 	bl	80067e0 <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a60:	d112      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f007 faa6 	bl	8008fc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fea7 	bl	80067e0 <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a9c:	d121      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001aac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d111      	bne.n	8001adc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	f003 020f 	and.w	r2, r3, #15
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f007 fd47 	bl	8009568 <HAL_PCDEx_LPM_Callback>
 8001ada:	e002      	b.n	8001ae2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f007 fa71 	bl	8008fc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fe7a 	bl	80067e0 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af6:	f040 80b6 	bne.w	8001c66 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2110      	movs	r1, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 ffb7 	bl	8005a88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1e:	e046      	b.n	8001bae <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b44:	0151      	lsls	r1, r2, #5
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	440a      	add	r2, r1
 8001b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b60:	461a      	mov	r2, r3
 8001b62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b78:	0151      	lsls	r1, r2, #5
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	440a      	add	r2, r1
 8001b7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b98:	0151      	lsls	r1, r2, #5
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	440a      	add	r2, r1
 8001b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ba2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ba6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001baa:	3301      	adds	r3, #1
 8001bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d3b2      	bcc.n	8001b20 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001bcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7bdb      	ldrb	r3, [r3, #15]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d016      	beq.n	8001c04 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be6:	f043 030b 	orr.w	r3, r3, #11
 8001bea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bfc:	f043 030b 	orr.w	r3, r3, #11
 8001c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c02:	e015      	b.n	8001c30 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c16:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001c1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c2a:	f043 030b 	orr.w	r3, r3, #11
 8001c2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4610      	mov	r0, r2
 8001c52:	f004 fe89 	bl	8006968 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fdb8 	bl	80067e0 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c7a:	d123      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fe4e 	bl	8006922 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 ff75 	bl	8005b7a <USB_GetDevSpeed>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681c      	ldr	r4, [r3, #0]
 8001c9c:	f001 fad4 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f003 fc9b 	bl	80055e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f007 f969 	bl	8008f86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fd89 	bl	80067e0 <USB_ReadInterrupts>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d10a      	bne.n	8001cee <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f007 f946 	bl	8008f6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 0208 	and.w	r2, r2, #8
 8001cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 fd74 	bl	80067e0 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	2b80      	cmp	r3, #128	@ 0x80
 8001d00:	d123      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d12:	e014      	b.n	8001d3e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 faf7 	bl	8002326 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	461a      	mov	r2, r3
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d3e4      	bcc.n	8001d14 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fd46 	bl	80067e0 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d5e:	d13c      	bne.n	8001dda <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d60:	2301      	movs	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d64:	e02b      	b.n	8001dbe <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3318      	adds	r3, #24
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d115      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da12      	bge.n	8001db8 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3317      	adds	r3, #23
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4619      	mov	r1, r3
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fab7 	bl	8002326 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	3301      	adds	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d3cd      	bcc.n	8001d66 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fcfe 	bl	80067e0 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dee:	d156      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df4:	e045      	b.n	8001e82 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12e      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da2b      	bge.n	8001e7c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001e30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d121      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e78:	6053      	str	r3, [r2, #4]
            break;
 8001e7a:	e008      	b.n	8001e8e <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	3301      	adds	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	791b      	ldrb	r3, [r3, #4]
 8001e86:	461a      	mov	r2, r3
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d3b3      	bcc.n	8001df6 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fc9c 	bl	80067e0 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb2:	d10a      	bne.n	8001eca <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f007 f8f7 	bl	80090a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 fc86 	bl	80067e0 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d115      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f007 f8e7 	bl	80090c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e000      	b.n	8001f0a <HAL_PCD_IRQHandler+0x926>
      return;
 8001f08:	bf00      	nop
    }
  }
}
 8001f0a:	3734      	adds	r7, #52	@ 0x34
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}

08001f10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_SetAddress+0x1a>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e012      	b.n	8001f50 <HAL_PCD_SetAddress+0x40>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fbe5 	bl	8006710 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	70fb      	strb	r3, [r7, #3]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	803b      	strh	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da0f      	bge.n	8001f9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	705a      	strb	r2, [r3, #1]
 8001f9c:	e00f      	b.n	8001fbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001fca:	883b      	ldrh	r3, [r7, #0]
 8001fcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	78ba      	ldrb	r2, [r7, #2]
 8001fd8:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fec:	78bb      	ldrb	r3, [r7, #2]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_EP_Open+0xae>
 8002002:	2302      	movs	r3, #2
 8002004:	e00e      	b.n	8002024 <HAL_PCD_EP_Open+0xcc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fdcf 	bl	8005bb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002022:	7afb      	ldrb	r3, [r7, #11]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0f      	bge.n	8002060 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3310      	adds	r3, #16
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	705a      	strb	r2, [r3, #1]
 800205e:	e00f      	b.n	8002080 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_PCD_EP_Close+0x6e>
 8002096:	2302      	movs	r3, #2
 8002098:	e00e      	b.n	80020b8 <HAL_PCD_EP_Close+0x8c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fe0d 	bl	8005cc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	460b      	mov	r3, r1
 80020ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2200      	movs	r2, #0
 8002100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	b2da      	uxtb	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 feb3 	bl	8005e80 <USB_EPStartXfer>

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 020f 	and.w	r2, r3, #15
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	460b      	mov	r3, r1
 8002162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f003 020f 	and.w	r2, r3, #15
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3310      	adds	r3, #16
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	3304      	adds	r3, #4
 800217a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b2da      	uxtb	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6979      	ldr	r1, [r7, #20]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fe6a 	bl	8005e80 <USB_EPStartXfer>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	7912      	ldrb	r2, [r2, #4]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e04e      	b.n	8002272 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da0f      	bge.n	80021fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3310      	adds	r3, #16
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
 80021fa:	e00d      	b.n	8002218 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	3304      	adds	r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_PCD_EP_SetStall+0x82>
 8002234:	2302      	movs	r3, #2
 8002236:	e01c      	b.n	8002272 <HAL_PCD_EP_SetStall+0xbc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f004 f98e 	bl	8006568 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f004 fb80 	bl	8006968 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	7912      	ldrb	r2, [r2, #4]
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e042      	b.n	800231e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229c:	2b00      	cmp	r3, #0
 800229e:	da0f      	bge.n	80022c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	3310      	adds	r3, #16
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	705a      	strb	r2, [r3, #1]
 80022be:	e00f      	b.n	80022e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	3304      	adds	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_PCD_EP_ClrStall+0x86>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e00e      	b.n	800231e <HAL_PCD_EP_ClrStall+0xa4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f998 	bl	8006644 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	da0c      	bge.n	8002354 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	3310      	adds	r3, #16
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	3304      	adds	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e00c      	b.n	800236e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 020f 	and.w	r2, r3, #15
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 ffbb 	bl	80062f0 <USB_EPStopXfer>
 800237a:	4603      	mov	r3, r0
 800237c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800237e:	7afb      	ldrb	r3, [r7, #11]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3310      	adds	r3, #16
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d901      	bls.n	80023c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e067      	b.n	8002490 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d902      	bls.n	80023dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3303      	adds	r3, #3
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e4:	e026      	b.n	8002434 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d902      	bls.n	8002402 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3303      	adds	r3, #3
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	b29b      	uxth	r3, r3
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f004 f814 	bl	8006444 <USB_WritePacket>

    ep->xfer_buff  += len;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	441a      	add	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	441a      	add	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	429a      	cmp	r2, r3
 8002448:	d809      	bhi.n	800245e <PCD_WriteEmptyTxFifo+0xd6>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002452:	429a      	cmp	r2, r3
 8002454:	d203      	bcs.n	800245e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1c3      	bne.n	80023e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	429a      	cmp	r2, r3
 8002468:	d811      	bhi.n	800248e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	2201      	movs	r2, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	43db      	mvns	r3, r3
 8002484:	6939      	ldr	r1, [r7, #16]
 8002486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800248a:	4013      	ands	r3, r2
 800248c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	333c      	adds	r3, #60	@ 0x3c
 80024b0:	3304      	adds	r3, #4
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a19      	ldr	r2, [pc, #100]	@ (8002530 <PCD_EP_OutXfrComplete_int+0x98>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d124      	bne.n	8002518 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e4:	461a      	mov	r2, r3
 80024e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024ea:	6093      	str	r3, [r2, #8]
 80024ec:	e01a      	b.n	8002524 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	2320      	movs	r3, #32
 8002508:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f006 fcf5 	bl	8008f00 <HAL_PCD_DataOutStageCallback>
 8002516:	e005      	b.n	8002524 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f006 fcee 	bl	8008f00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	4f54310a 	.word	0x4f54310a

08002534 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	333c      	adds	r3, #60	@ 0x3c
 800254c:	3304      	adds	r3, #4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <PCD_EP_OutSetupPacket_int+0x64>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d90e      	bls.n	8002588 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002580:	461a      	mov	r2, r3
 8002582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002586:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f006 fca7 	bl	8008edc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	4f54300a 	.word	0x4f54300a

0800259c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
 80025a8:	4613      	mov	r3, r2
 80025aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	0419      	lsls	r1, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80025c8:	e028      	b.n	800261c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4413      	add	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e00d      	b.n	80025fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3340      	adds	r3, #64	@ 0x40
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	3301      	adds	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	3b01      	subs	r3, #1
 8002600:	429a      	cmp	r2, r3
 8002602:	d3ec      	bcc.n	80025de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002604:	883b      	ldrh	r3, [r7, #0]
 8002606:	0418      	lsls	r0, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	3b01      	subs	r3, #1
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4302      	orrs	r2, r0
 8002614:	3340      	adds	r3, #64	@ 0x40
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267e:	f043 0303 	orr.w	r3, r3, #3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <HAL_PWREx_GetVoltageRange+0x18>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000

080026b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026be:	d130      	bne.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c0:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026cc:	d038      	beq.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2232      	movs	r2, #50	@ 0x32
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	3301      	adds	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f4:	e002      	b.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002708:	d102      	bne.n	8002710 <HAL_PWREx_ControlVoltageScaling+0x60>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f2      	bne.n	80026f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271c:	d110      	bne.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e00f      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272e:	d007      	beq.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002738:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800273e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40007000 	.word	0x40007000
 8002754:	20000000 	.word	0x20000000
 8002758:	431bde83 	.word	0x431bde83

0800275c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800276a:	6053      	str	r3, [r2, #4]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e3ca      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278e:	4b97      	ldr	r3, [pc, #604]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002798:	4b94      	ldr	r3, [pc, #592]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80e4 	beq.w	8002978 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4a>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	f040 808b 	bne.w	80028d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f040 8087 	bne.w	80028d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c6:	4b89      	ldr	r3, [pc, #548]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e3a2      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1a      	ldr	r2, [r3, #32]
 80027e2:	4b82      	ldr	r3, [pc, #520]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <HAL_RCC_OscConfig+0x7c>
 80027ee:	4b7f      	ldr	r3, [pc, #508]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f6:	e005      	b.n	8002804 <HAL_RCC_OscConfig+0x88>
 80027f8:	4b7c      	ldr	r3, [pc, #496]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002804:	4293      	cmp	r3, r2
 8002806:	d223      	bcs.n	8002850 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fd53 	bl	80032b8 <RCC_SetFlashLatencyFromMSIRange>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e383      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281c:	4b73      	ldr	r3, [pc, #460]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a72      	ldr	r2, [pc, #456]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b70      	ldr	r3, [pc, #448]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	496d      	ldr	r1, [pc, #436]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283a:	4b6c      	ldr	r3, [pc, #432]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	4968      	ldr	r1, [pc, #416]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
 800284e:	e025      	b.n	800289c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a65      	ldr	r2, [pc, #404]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4960      	ldr	r1, [pc, #384]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	495b      	ldr	r1, [pc, #364]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fd13 	bl	80032b8 <RCC_SetFlashLatencyFromMSIRange>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e343      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800289c:	f000 fc4a 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b52      	ldr	r3, [pc, #328]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	4950      	ldr	r1, [pc, #320]	@ (80029f0 <HAL_RCC_OscConfig+0x274>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	4a4e      	ldr	r2, [pc, #312]	@ (80029f4 <HAL_RCC_OscConfig+0x278>)
 80028ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028bc:	4b4e      	ldr	r3, [pc, #312]	@ (80029f8 <HAL_RCC_OscConfig+0x27c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe f9fd 	bl	8000cc0 <HAL_InitTick>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d052      	beq.n	8002976 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	e327      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d032      	beq.n	8002942 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028dc:	4b43      	ldr	r3, [pc, #268]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a42      	ldr	r2, [pc, #264]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fa3a 	bl	8000d60 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f0:	f7fe fa36 	bl	8000d60 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e310      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002902:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290e:	4b37      	ldr	r3, [pc, #220]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a36      	ldr	r2, [pc, #216]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b34      	ldr	r3, [pc, #208]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4931      	ldr	r1, [pc, #196]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292c:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	492c      	ldr	r1, [pc, #176]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e01a      	b.n	8002978 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002942:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a29      	ldr	r2, [pc, #164]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800294e:	f7fe fa07 	bl	8000d60 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002956:	f7fe fa03 	bl	8000d60 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e2dd      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002968:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x1da>
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002976:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d074      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2b08      	cmp	r3, #8
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x21a>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d10e      	bne.n	80029ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d10b      	bne.n	80029ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d064      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d160      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e2ba      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x24a>
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e026      	b.n	8002a14 <HAL_RCC_OscConfig+0x298>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ce:	d115      	bne.n	80029fc <HAL_RCC_OscConfig+0x280>
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a05      	ldr	r2, [pc, #20]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80029d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a02      	ldr	r2, [pc, #8]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x298>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	080096f4 	.word	0x080096f4
 80029f4:	20000000 	.word	0x20000000
 80029f8:	20000004 	.word	0x20000004
 80029fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a9f      	ldr	r2, [pc, #636]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b9d      	ldr	r3, [pc, #628]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a9c      	ldr	r2, [pc, #624]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe f9a0 	bl	8000d60 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe f99c 	bl	8000d60 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	@ 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e276      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a36:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x2a8>
 8002a42:	e014      	b.n	8002a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe f98c 	bl	8000d60 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe f988 	bl	8000d60 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e262      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a5e:	4b88      	ldr	r3, [pc, #544]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2d0>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d060      	beq.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x310>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d119      	bne.n	8002aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d116      	bne.n	8002aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x328>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e23f      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b76      	ldr	r3, [pc, #472]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	4973      	ldr	r1, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab8:	e040      	b.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d023      	beq.n	8002b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe f947 	bl	8000d60 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fe f943 	bl	8000d60 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e21d      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b62      	ldr	r3, [pc, #392]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	495f      	ldr	r1, [pc, #380]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e018      	b.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe f923 	bl	8000d60 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe f91f 	bl	8000d60 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1f9      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b30:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b50:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b56:	4a4a      	ldr	r2, [pc, #296]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe f8fe 	bl	8000d60 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe f8fa 	bl	8000d60 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1d4      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7a:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ef      	beq.n	8002b68 <HAL_RCC_OscConfig+0x3ec>
 8002b88:	e01b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b90:	4a3b      	ldr	r2, [pc, #236]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe f8e1 	bl	8000d60 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe f8dd 	bl	8000d60 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e1b7      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb4:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ef      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80a6 	beq.w	8002d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b27      	ldr	r3, [pc, #156]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	4a26      	ldr	r2, [pc, #152]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bec:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <HAL_RCC_OscConfig+0x508>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d118      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c08:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <HAL_RCC_OscConfig+0x508>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c84 <HAL_RCC_OscConfig+0x508>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c14:	f7fe f8a4 	bl	8000d60 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1c:	f7fe f8a0 	bl	8000d60 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e17a      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_RCC_OscConfig+0x508>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d108      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4d8>
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c52:	e029      	b.n	8002ca8 <HAL_RCC_OscConfig+0x52c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d115      	bne.n	8002c88 <HAL_RCC_OscConfig+0x50c>
 8002c5c:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	4a03      	ldr	r2, [pc, #12]	@ (8002c80 <HAL_RCC_OscConfig+0x504>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x52c>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	4b9c      	ldr	r3, [pc, #624]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	4a9b      	ldr	r2, [pc, #620]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c98:	4b98      	ldr	r3, [pc, #608]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	4a97      	ldr	r2, [pc, #604]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d016      	beq.n	8002cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe f856 	bl	8000d60 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fe f852 	bl	8000d60 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e12a      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cce:	4b8b      	ldr	r3, [pc, #556]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ed      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x53c>
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe f83f 	bl	8000d60 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe f83b 	bl	8000d60 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e113      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cfc:	4b7f      	ldr	r3, [pc, #508]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ed      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b7a      	ldr	r3, [pc, #488]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a79      	ldr	r2, [pc, #484]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80fe 	beq.w	8002f22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	f040 80d0 	bne.w	8002ed0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d30:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d130      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d127      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11f      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d70:	2a07      	cmp	r2, #7
 8002d72:	bf14      	ite	ne
 8002d74:	2201      	movne	r2, #1
 8002d76:	2200      	moveq	r2, #0
 8002d78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d113      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d06e      	beq.n	8002e84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d069      	beq.n	8002e80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002db8:	4b50      	ldr	r3, [pc, #320]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0ad      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd4:	f7fd ffc4 	bl	8000d60 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fd ffc0 	bl	8000d60 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e09a      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dee:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfa:	4b40      	ldr	r3, [pc, #256]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <HAL_RCC_OscConfig+0x784>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e14:	0212      	lsls	r2, r2, #8
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e1c:	0852      	lsrs	r2, r2, #1
 8002e1e:	3a01      	subs	r2, #1
 8002e20:	0552      	lsls	r2, r2, #21
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e28:	0852      	lsrs	r2, r2, #1
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	0652      	lsls	r2, r2, #25
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e34:	0912      	lsrs	r2, r2, #4
 8002e36:	0452      	lsls	r2, r2, #17
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	4930      	ldr	r1, [pc, #192]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e40:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a2a      	ldr	r2, [pc, #168]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e58:	f7fd ff82 	bl	8000d60 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fd ff7e 	bl	8000d60 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e058      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e72:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7e:	e050      	b.n	8002f22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e04f      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e84:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d148      	bne.n	8002f22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a16      	ldr	r2, [pc, #88]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ea8:	f7fd ff5a 	bl	8000d60 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fd ff56 	bl	8000d60 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e030      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x734>
 8002ece:	e028      	b.n	8002f22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d023      	beq.n	8002f1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a08      	ldr	r2, [pc, #32]	@ (8002efc <HAL_RCC_OscConfig+0x780>)
 8002edc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fd ff3d 	bl	8000d60 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	e00c      	b.n	8002f04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fd ff39 	bl	8000d60 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d905      	bls.n	8002f04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e013      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
 8002efc:	40021000 	.word	0x40021000
 8002f00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_OscConfig+0x7b0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ec      	bne.n	8002eea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_OscConfig+0x7b0>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	4905      	ldr	r1, [pc, #20]	@ (8002f2c <HAL_RCC_OscConfig+0x7b0>)
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_RCC_OscConfig+0x7b4>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
 8002f1c:	e001      	b.n	8002f22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	feeefffc 	.word	0xfeeefffc

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0e7      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b75      	ldr	r3, [pc, #468]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b72      	ldr	r3, [pc, #456]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4970      	ldr	r1, [pc, #448]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b6e      	ldr	r3, [pc, #440]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0cf      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4960      	ldr	r1, [pc, #384]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d04c      	beq.n	800304c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	4b5a      	ldr	r3, [pc, #360]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d121      	bne.n	800300a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0a6      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd2:	4b54      	ldr	r3, [pc, #336]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e09a      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fea:	4b4e      	ldr	r3, [pc, #312]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e08e      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e086      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b46      	ldr	r3, [pc, #280]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4943      	ldr	r1, [pc, #268]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fd fea0 	bl	8000d60 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fd fe9c 	bl	8000d60 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e06e      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b3a      	ldr	r3, [pc, #232]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	4b31      	ldr	r3, [pc, #196]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003064:	429a      	cmp	r2, r3
 8003066:	d208      	bcs.n	800307a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	492b      	ldr	r1, [pc, #172]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307a:	4b29      	ldr	r3, [pc, #164]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d210      	bcs.n	80030aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 0207 	bic.w	r2, r3, #7
 8003090:	4923      	ldr	r1, [pc, #140]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <HAL_RCC_ClockConfig+0x1ec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e036      	b.n	8003118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4918      	ldr	r1, [pc, #96]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d4:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4910      	ldr	r1, [pc, #64]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e8:	f000 f824 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	490b      	ldr	r1, [pc, #44]	@ (8003128 <HAL_RCC_ClockConfig+0x1f4>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	4a09      	ldr	r2, [pc, #36]	@ (800312c <HAL_RCC_ClockConfig+0x1f8>)
 8003106:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1fc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fdd7 	bl	8000cc0 <HAL_InitTick>
 8003112:	4603      	mov	r3, r0
 8003114:	72fb      	strb	r3, [r7, #11]

  return status;
 8003116:	7afb      	ldrb	r3, [r7, #11]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40022000 	.word	0x40022000
 8003124:	40021000 	.word	0x40021000
 8003128:	080096f4 	.word	0x080096f4
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003142:	4b3e      	ldr	r3, [pc, #248]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800314c:	4b3b      	ldr	r3, [pc, #236]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x34>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d121      	bne.n	80031a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d11e      	bne.n	80031a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003168:	4b34      	ldr	r3, [pc, #208]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e005      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003184:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003190:	4a2b      	ldr	r2, [pc, #172]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d102      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ac:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e004      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b8:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d134      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031c2:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0xa6>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d003      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xac>
 80031d8:	e005      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031da:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x110>)
 80031dc:	617b      	str	r3, [r7, #20]
      break;
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e0:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x110>)
 80031e2:	617b      	str	r3, [r7, #20]
      break;
 80031e4:	e002      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	617b      	str	r3, [r7, #20]
      break;
 80031ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ec:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	3301      	adds	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	fb03 f202 	mul.w	r2, r3, r2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_RCC_GetSysClockFreq+0x108>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	0e5b      	lsrs	r3, r3, #25
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	3301      	adds	r3, #1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800322c:	69bb      	ldr	r3, [r7, #24]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	0800970c 	.word	0x0800970c
 8003244:	00f42400 	.word	0x00f42400

08003248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <HAL_RCC_GetHCLKFreq+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000000 	.word	0x20000000

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003264:	f7ff fff0 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4904      	ldr	r1, [pc, #16]	@ (8003288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	08009704 	.word	0x08009704

0800328c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003290:	f7ff ffda 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0adb      	lsrs	r3, r3, #11
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08009704 	.word	0x08009704

080032b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032d0:	f7ff f9e0 	bl	8002694 <HAL_PWREx_GetVoltageRange>
 80032d4:	6178      	str	r0, [r7, #20]
 80032d6:	e014      	b.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	4a24      	ldr	r2, [pc, #144]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e4:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032f0:	f7ff f9d0 	bl	8002694 <HAL_PWREx_GetVoltageRange>
 80032f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003308:	d10b      	bne.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b80      	cmp	r3, #128	@ 0x80
 800330e:	d919      	bls.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2ba0      	cmp	r3, #160	@ 0xa0
 8003314:	d902      	bls.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003316:	2302      	movs	r3, #2
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e013      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800331c:	2301      	movs	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e010      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d902      	bls.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003328:	2303      	movs	r3, #3
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e00a      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b80      	cmp	r3, #128	@ 0x80
 8003332:	d102      	bne.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003334:	2302      	movs	r3, #2
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e004      	b.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b70      	cmp	r3, #112	@ 0x70
 800333e:	d101      	bne.n	8003344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003340:	2301      	movs	r3, #1
 8003342:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 0207 	bic.w	r2, r3, #7
 800334c:	4909      	ldr	r1, [pc, #36]	@ (8003374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003354:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	40022000 	.word	0x40022000

08003378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003380:	2300      	movs	r3, #0
 8003382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003384:	2300      	movs	r3, #0
 8003386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003390:	2b00      	cmp	r3, #0
 8003392:	d041      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003398:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800339c:	d02a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800339e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033a2:	d824      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033ae:	d81e      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b8:	d010      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ba:	e018      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033bc:	4b86      	ldr	r3, [pc, #536]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a85      	ldr	r2, [pc, #532]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c8:	e015      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fabb 	bl	800394c <RCCEx_PLLSAI1_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033da:	e00c      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3320      	adds	r3, #32
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fba6 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ec:	e003      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	74fb      	strb	r3, [r7, #19]
      break;
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033fc:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800340a:	4973      	ldr	r1, [pc, #460]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003412:	e001      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d041      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003428:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800342c:	d02a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800342e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003432:	d824      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800343a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800343e:	d81e      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003448:	d010      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344a:	e018      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800344c:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a61      	ldr	r2, [pc, #388]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003456:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fa73 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3320      	adds	r3, #32
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb5e 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	74fb      	strb	r3, [r7, #19]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800348c:	4b52      	ldr	r3, [pc, #328]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800349a:	494f      	ldr	r1, [pc, #316]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a0 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ba:	4b47      	ldr	r3, [pc, #284]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b41      	ldr	r3, [pc, #260]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	4a40      	ldr	r2, [pc, #256]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	@ 0x58
 80034dc:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ec:	4b3b      	ldr	r3, [pc, #236]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3a      	ldr	r2, [pc, #232]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f8:	f7fd fc32 	bl	8000d60 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fd fc2e 	bl	8000d60 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d902      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	74fb      	strb	r3, [r7, #19]
        break;
 8003512:	e005      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003514:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d15c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003526:	4b2c      	ldr	r3, [pc, #176]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003530:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	d019      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003544:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800354e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	4a20      	ldr	r2, [pc, #128]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd fbed 	bl	8000d60 <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003588:	e00b      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd fbe9 	bl	8000d60 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d902      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	74fb      	strb	r3, [r7, #19]
            break;
 80035a0:	e006      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ec      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b6:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c6:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035ce:	e009      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
 80035d4:	e006      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e4:	7c7b      	ldrb	r3, [r7, #17]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b9e      	ldr	r3, [pc, #632]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	4a9d      	ldr	r2, [pc, #628]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003602:	4b98      	ldr	r3, [pc, #608]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003608:	f023 0203 	bic.w	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	4994      	ldr	r1, [pc, #592]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003624:	4b8f      	ldr	r3, [pc, #572]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 020c 	bic.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	498c      	ldr	r1, [pc, #560]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003646:	4b87      	ldr	r3, [pc, #540]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	4983      	ldr	r1, [pc, #524]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003668:	4b7e      	ldr	r3, [pc, #504]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	497b      	ldr	r1, [pc, #492]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800368a:	4b76      	ldr	r3, [pc, #472]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003698:	4972      	ldr	r1, [pc, #456]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	496a      	ldr	r1, [pc, #424]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ce:	4b65      	ldr	r3, [pc, #404]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	4961      	ldr	r1, [pc, #388]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	4959      	ldr	r1, [pc, #356]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003712:	4b54      	ldr	r3, [pc, #336]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	4950      	ldr	r1, [pc, #320]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003734:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	4948      	ldr	r1, [pc, #288]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003756:	4b43      	ldr	r3, [pc, #268]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	493f      	ldr	r1, [pc, #252]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d028      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003778:	4b3a      	ldr	r3, [pc, #232]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003786:	4937      	ldr	r1, [pc, #220]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003796:	d106      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003798:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a31      	ldr	r2, [pc, #196]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a2:	60d3      	str	r3, [r2, #12]
 80037a4:	e011      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ae:	d10c      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f8c8 	bl	800394c <RCCEx_PLLSAI1_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d028      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037d6:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	491f      	ldr	r1, [pc, #124]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f4:	d106      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003800:	60d3      	str	r3, [r2, #12]
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f899 	bl	800394c <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02b      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003852:	d109      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a02      	ldr	r2, [pc, #8]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385e:	60d3      	str	r3, [r2, #12]
 8003860:	e014      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f867 	bl	800394c <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003898:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a6:	4928      	ldr	r1, [pc, #160]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f844 	bl	800394c <RCCEx_PLLSAI1_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d014      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
 80038d2:	e011      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3320      	adds	r3, #32
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f925 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003904:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003912:	490d      	ldr	r1, [pc, #52]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003926:	4b08      	ldr	r3, [pc, #32]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003936:	4904      	ldr	r1, [pc, #16]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800393e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000

0800394c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395a:	4b75      	ldr	r3, [pc, #468]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003966:	4b72      	ldr	r3, [pc, #456]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d10d      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
       ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800397e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
       ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d047      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e044      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d018      	beq.n	80039d2 <RCCEx_PLLSAI1_Config+0x86>
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d825      	bhi.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d002      	beq.n	80039ae <RCCEx_PLLSAI1_Config+0x62>
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d009      	beq.n	80039c0 <RCCEx_PLLSAI1_Config+0x74>
 80039ac:	e020      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ae:	4b60      	ldr	r3, [pc, #384]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e01a      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d0:	e013      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d2:	4b57      	ldr	r3, [pc, #348]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039de:	4b54      	ldr	r3, [pc, #336]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ee:	e006      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e004      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a06:	4b4a      	ldr	r3, [pc, #296]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	4944      	ldr	r1, [pc, #272]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d17d      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd f994 	bl	8000d60 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a3c:	f7fd f990 	bl	8000d60 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a50:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ef      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d160      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d111      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a68:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	0912      	lsrs	r2, r2, #4
 8003a80:	0452      	lsls	r2, r2, #17
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492a      	ldr	r1, [pc, #168]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
 8003a8a:	e027      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d112      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	0211      	lsls	r1, r2, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6912      	ldr	r2, [r2, #16]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	0552      	lsls	r2, r2, #21
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	491f      	ldr	r1, [pc, #124]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e011      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ac0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6952      	ldr	r2, [r2, #20]
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4916      	ldr	r1, [pc, #88]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f93a 	bl	8000d60 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af0:	f7fd f936 	bl	8000d60 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
          break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	4904      	ldr	r1, [pc, #16]	@ (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b42:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d10d      	bne.n	8003b7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
       ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b66:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
       ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d047      	beq.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e044      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d018      	beq.n	8003bba <RCCEx_PLLSAI2_Config+0x86>
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d825      	bhi.n	8003bd8 <RCCEx_PLLSAI2_Config+0xa4>
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <RCCEx_PLLSAI2_Config+0x62>
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d009      	beq.n	8003ba8 <RCCEx_PLLSAI2_Config+0x74>
 8003b94:	e020      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b96:	4b55      	ldr	r3, [pc, #340]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11d      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba6:	e01a      	b.n	8003bde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ba8:	4b50      	ldr	r3, [pc, #320]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d116      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e013      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bba:	4b4c      	ldr	r3, [pc, #304]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc6:	4b49      	ldr	r3, [pc, #292]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd6:	e006      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e004      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bee:	4b3f      	ldr	r3, [pc, #252]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	430b      	orrs	r3, r1
 8003c04:	4939      	ldr	r1, [pc, #228]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d167      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c10:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd f8a0 	bl	8000d60 <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c24:	f7fd f89c 	bl	8000d60 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
        break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ef      	bne.n	8003c24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d14a      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d111      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c50:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	0211      	lsls	r1, r2, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	0912      	lsrs	r2, r2, #4
 8003c68:	0452      	lsls	r2, r2, #17
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	614b      	str	r3, [r1, #20]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6912      	ldr	r2, [r2, #16]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f85c 	bl	8000d60 <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cac:	f7fd f858 	bl	8000d60 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4904      	ldr	r1, [pc, #16]	@ (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e095      	b.n	8003e2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fc fe8e 	bl	8000a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d68:	d902      	bls.n	8003d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e002      	b.n	8003d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d7e:	d007      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	ea42 0103 	orr.w	r1, r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	f003 0204 	and.w	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b088      	sub	sp, #32
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e46:	f7fc ff8b 	bl	8000d60 <HAL_GetTick>
 8003e4a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e15c      	b.n	800411a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x36>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e154      	b.n	800411a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Transmit+0x48>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e14d      	b.n	800411a <HAL_SPI_Transmit+0x2e4>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ef0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b40      	cmp	r3, #64	@ 0x40
 8003efe:	d007      	beq.n	8003f10 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f18:	d952      	bls.n	8003fc0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_Transmit+0xf2>
 8003f22:	8b7b      	ldrh	r3, [r7, #26]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d145      	bne.n	8003fb4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f4c:	e032      	b.n	8003fb4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d112      	bne.n	8003f82 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	1c9a      	adds	r2, r3, #2
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f80:	e018      	b.n	8003fb4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f82:	f7fc feed 	bl	8000d60 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d803      	bhi.n	8003f9a <HAL_SPI_Transmit+0x164>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f98:	d102      	bne.n	8003fa0 <HAL_SPI_Transmit+0x16a>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0b2      	b.n	800411a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1c7      	bne.n	8003f4e <HAL_SPI_Transmit+0x118>
 8003fbe:	e083      	b.n	80040c8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x198>
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d177      	bne.n	80040be <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d912      	bls.n	8003ffe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b02      	subs	r3, #2
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ffc:	e05f      	b.n	80040be <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004024:	e04b      	b.n	80040be <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d12b      	bne.n	800408c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d912      	bls.n	8004064 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404e:	1c9a      	adds	r2, r3, #2
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b02      	subs	r3, #2
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004062:	e02c      	b.n	80040be <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800408a:	e018      	b.n	80040be <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800408c:	f7fc fe68 	bl	8000d60 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d803      	bhi.n	80040a4 <HAL_SPI_Transmit+0x26e>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040a2:	d102      	bne.n	80040aa <HAL_SPI_Transmit+0x274>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e02d      	b.n	800411a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ae      	bne.n	8004026 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fcf5 	bl	8004abc <SPI_EndRxTxTransaction>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004118:	2300      	movs	r3, #0
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	e123      	b.n	800438a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414a:	d112      	bne.n	8004172 <HAL_SPI_Receive+0x50>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10e      	bne.n	8004172 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2204      	movs	r2, #4
 8004158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800415c:	88fa      	ldrh	r2, [r7, #6]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f912 	bl	8004392 <HAL_SPI_TransmitReceive>
 800416e:	4603      	mov	r3, r0
 8004170:	e10b      	b.n	800438a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004172:	f7fc fdf5 	bl	8000d60 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Receive+0x62>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e100      	b.n	800438a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_SPI_Receive+0x74>
 8004192:	2302      	movs	r3, #2
 8004194:	e0f9      	b.n	800438a <HAL_SPI_Receive+0x268>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2204      	movs	r2, #4
 80041a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e8:	d908      	bls.n	80041fc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e007      	b.n	800420c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004214:	d10f      	bne.n	8004236 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004234:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004240:	2b40      	cmp	r3, #64	@ 0x40
 8004242:	d007      	beq.n	8004254 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800425c:	d875      	bhi.n	800434a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800425e:	e037      	b.n	80042d0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d117      	bne.n	800429e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f103 020c 	add.w	r2, r3, #12
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800429c:	e018      	b.n	80042d0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800429e:	f7fc fd5f 	bl	8000d60 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d803      	bhi.n	80042b6 <HAL_SPI_Receive+0x194>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042b4:	d102      	bne.n	80042bc <HAL_SPI_Receive+0x19a>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e05c      	b.n	800438a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1c1      	bne.n	8004260 <HAL_SPI_Receive+0x13e>
 80042dc:	e03b      	b.n	8004356 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d115      	bne.n	8004318 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	b292      	uxth	r2, r2
 80042f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	1c9a      	adds	r2, r3, #2
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004316:	e018      	b.n	800434a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004318:	f7fc fd22 	bl	8000d60 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d803      	bhi.n	8004330 <HAL_SPI_Receive+0x20e>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800432e:	d102      	bne.n	8004336 <HAL_SPI_Receive+0x214>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e01f      	b.n	800438a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1c3      	bne.n	80042de <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fb56 	bl	8004a0c <SPI_EndRxTransaction>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004388:	2300      	movs	r3, #0
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b08a      	sub	sp, #40	@ 0x28
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a4:	f7fc fcdc 	bl	8000d60 <HAL_GetTick>
 80043a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80043b8:	887b      	ldrh	r3, [r7, #2]
 80043ba:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d00c      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x4e>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043cc:	d106      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x4a>
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d001      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
 80043de:	e1f3      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x60>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x60>
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1e8      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x72>
 8004400:	2302      	movs	r3, #2
 8004402:	e1e1      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b04      	cmp	r3, #4
 8004416:	d003      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2205      	movs	r2, #5
 800441c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	887a      	ldrh	r2, [r7, #2]
 8004446:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004462:	d802      	bhi.n	800446a <HAL_SPI_TransmitReceive+0xd8>
 8004464:	8abb      	ldrh	r3, [r7, #20]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d908      	bls.n	800447c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	e007      	b.n	800448c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800448a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004496:	2b40      	cmp	r3, #64	@ 0x40
 8004498:	d007      	beq.n	80044aa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044b2:	f240 8083 	bls.w	80045bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x132>
 80044be:	8afb      	ldrh	r3, [r7, #22]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d16f      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c8:	881a      	ldrh	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e8:	e05c      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d11b      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x19e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d016      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x19e>
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	2b01      	cmp	r3, #1
 8004506:	d113      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	1c9a      	adds	r2, r3, #2
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d11c      	bne.n	8004578 <HAL_SPI_TransmitReceive+0x1e6>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	b292      	uxth	r2, r2
 8004556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	1c9a      	adds	r2, r3, #2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004578:	f7fc fbf2 	bl	8000d60 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004584:	429a      	cmp	r2, r3
 8004586:	d80d      	bhi.n	80045a4 <HAL_SPI_TransmitReceive+0x212>
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800458e:	d009      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e111      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d19d      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x158>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d197      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x158>
 80045ba:	e0e5      	b.n	8004788 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x23a>
 80045c4:	8afb      	ldrh	r3, [r7, #22]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	f040 80d1 	bne.w	800476e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d912      	bls.n	80045fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	881a      	ldrh	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b02      	subs	r3, #2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045fa:	e0b8      	b.n	800476e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004622:	e0a4      	b.n	800476e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d134      	bne.n	800469c <HAL_SPI_TransmitReceive+0x30a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02f      	beq.n	800469c <HAL_SPI_TransmitReceive+0x30a>
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	2b01      	cmp	r3, #1
 8004640:	d12c      	bne.n	800469c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d912      	bls.n	8004672 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	881a      	ldrh	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	1c9a      	adds	r2, r3, #2
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b02      	subs	r3, #2
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004670:	e012      	b.n	8004698 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d148      	bne.n	800473c <HAL_SPI_TransmitReceive+0x3aa>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d042      	beq.n	800473c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d923      	bls.n	800470a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	b292      	uxth	r2, r2
 80046ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b02      	subs	r3, #2
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d81f      	bhi.n	8004738 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	e016      	b.n	8004738 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f103 020c 	add.w	r2, r3, #12
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004738:	2301      	movs	r3, #1
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800473c:	f7fc fb10 	bl	8000d60 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004748:	429a      	cmp	r2, r3
 800474a:	d803      	bhi.n	8004754 <HAL_SPI_TransmitReceive+0x3c2>
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004752:	d102      	bne.n	800475a <HAL_SPI_TransmitReceive+0x3c8>
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e02c      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	f47f af55 	bne.w	8004624 <HAL_SPI_TransmitReceive+0x292>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	f47f af4e 	bne.w	8004624 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f995 	bl	8004abc <SPI_EndRxTxTransaction>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e00e      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3728      	adds	r7, #40	@ 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047e0:	f7fc fabe 	bl	8000d60 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047f0:	f7fc fab6 	bl	8000d60 <HAL_GetTick>
 80047f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047f6:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	015b      	lsls	r3, r3, #5
 80047fc:	0d1b      	lsrs	r3, r3, #20
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004806:	e054      	b.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800480e:	d050      	beq.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004810:	f7fc faa6 	bl	8000d60 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	429a      	cmp	r2, r3
 800481e:	d902      	bls.n	8004826 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d13d      	bne.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800483e:	d111      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004848:	d004      	beq.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d107      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800486c:	d10f      	bne.n	800488e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800488c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e017      	b.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d19b      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	@ 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048f2:	f7fc fa35 	bl	8000d60 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004902:	f7fc fa2d 	bl	8000d60 <HAL_GetTick>
 8004906:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004910:	4b3d      	ldr	r3, [pc, #244]	@ (8004a08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	00da      	lsls	r2, r3, #3
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	0d1b      	lsrs	r3, r3, #20
 8004920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004928:	e060      	b.n	80049ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004930:	d107      	bne.n	8004942 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004940:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004948:	d050      	beq.n	80049ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800494a:	f7fc fa09 	bl	8000d60 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004956:	429a      	cmp	r2, r3
 8004958:	d902      	bls.n	8004960 <SPI_WaitFifoStateUntilTimeout+0x80>
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d13d      	bne.n	80049dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800496e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004978:	d111      	bne.n	800499e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004982:	d004      	beq.n	800498e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498c:	d107      	bne.n	800499e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800499c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a6:	d10f      	bne.n	80049c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e010      	b.n	80049fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d196      	bne.n	800492a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3728      	adds	r7, #40	@ 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a20:	d111      	bne.n	8004a46 <SPI_EndRxTransaction+0x3a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2a:	d004      	beq.n	8004a36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a34:	d107      	bne.n	8004a46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	@ 0x80
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff febd 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e023      	b.n	8004ab4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a74:	d11d      	bne.n	8004ab2 <SPI_EndRxTransaction+0xa6>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7e:	d004      	beq.n	8004a8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a88:	d113      	bne.n	8004ab2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff ff22 	bl	80048e0 <SPI_WaitFifoStateUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e000      	b.n	8004ab4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff03 	bl	80048e0 <SPI_WaitFifoStateUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e027      	b.n	8004b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2180      	movs	r1, #128	@ 0x80
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fe68 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e014      	b.n	8004b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff fedc 	bl	80048e0 <SPI_WaitFifoStateUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e000      	b.n	8004b40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e040      	b.n	8004bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fb ffbc 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	@ 0x24
 8004b74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fae0 	bl	8005154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f825 	bl	8004be4 <UART_SetConfig>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e01b      	b.n	8004bdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fb5f 	bl	8005298 <UART_CheckIdleState>
 8004bda:	4603      	mov	r3, r0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b08a      	sub	sp, #40	@ 0x28
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4ba4      	ldr	r3, [pc, #656]	@ (8004ea4 <UART_SetConfig+0x2c0>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a99      	ldr	r2, [pc, #612]	@ (8004ea8 <UART_SetConfig+0x2c4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a90      	ldr	r2, [pc, #576]	@ (8004eac <UART_SetConfig+0x2c8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d126      	bne.n	8004cbc <UART_SetConfig+0xd8>
 8004c6e:	4b90      	ldr	r3, [pc, #576]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d81b      	bhi.n	8004cb4 <UART_SetConfig+0xd0>
 8004c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c84 <UART_SetConfig+0xa0>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004cad 	.word	0x08004cad
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e116      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e112      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e10e      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004cac:	2308      	movs	r3, #8
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e10a      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e106      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb4 <UART_SetConfig+0x2d0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d138      	bne.n	8004d38 <UART_SetConfig+0x154>
 8004cc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	f003 030c 	and.w	r3, r3, #12
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d82d      	bhi.n	8004d30 <UART_SetConfig+0x14c>
 8004cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <UART_SetConfig+0xf8>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004d31 	.word	0x08004d31
 8004ce8:	08004d31 	.word	0x08004d31
 8004cec:	08004d21 	.word	0x08004d21
 8004cf0:	08004d31 	.word	0x08004d31
 8004cf4:	08004d31 	.word	0x08004d31
 8004cf8:	08004d31 	.word	0x08004d31
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	08004d31 	.word	0x08004d31
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d29 	.word	0x08004d29
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e0d8      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1e:	e0d4      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d26:	e0d0      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2e:	e0cc      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d36:	e0c8      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb8 <UART_SetConfig+0x2d4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d125      	bne.n	8004d8e <UART_SetConfig+0x1aa>
 8004d42:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d4c:	2b30      	cmp	r3, #48	@ 0x30
 8004d4e:	d016      	beq.n	8004d7e <UART_SetConfig+0x19a>
 8004d50:	2b30      	cmp	r3, #48	@ 0x30
 8004d52:	d818      	bhi.n	8004d86 <UART_SetConfig+0x1a2>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d00a      	beq.n	8004d6e <UART_SetConfig+0x18a>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d814      	bhi.n	8004d86 <UART_SetConfig+0x1a2>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <UART_SetConfig+0x182>
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d008      	beq.n	8004d76 <UART_SetConfig+0x192>
 8004d64:	e00f      	b.n	8004d86 <UART_SetConfig+0x1a2>
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6c:	e0ad      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d74:	e0a9      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d76:	2304      	movs	r3, #4
 8004d78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7c:	e0a5      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d7e:	2308      	movs	r3, #8
 8004d80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d84:	e0a1      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d86:	2310      	movs	r3, #16
 8004d88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d8c:	e09d      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a4a      	ldr	r2, [pc, #296]	@ (8004ebc <UART_SetConfig+0x2d8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d125      	bne.n	8004de4 <UART_SetConfig+0x200>
 8004d98:	4b45      	ldr	r3, [pc, #276]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da4:	d016      	beq.n	8004dd4 <UART_SetConfig+0x1f0>
 8004da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da8:	d818      	bhi.n	8004ddc <UART_SetConfig+0x1f8>
 8004daa:	2b80      	cmp	r3, #128	@ 0x80
 8004dac:	d00a      	beq.n	8004dc4 <UART_SetConfig+0x1e0>
 8004dae:	2b80      	cmp	r3, #128	@ 0x80
 8004db0:	d814      	bhi.n	8004ddc <UART_SetConfig+0x1f8>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <UART_SetConfig+0x1d8>
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d008      	beq.n	8004dcc <UART_SetConfig+0x1e8>
 8004dba:	e00f      	b.n	8004ddc <UART_SetConfig+0x1f8>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc2:	e082      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dca:	e07e      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd2:	e07a      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dda:	e076      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de2:	e072      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a35      	ldr	r2, [pc, #212]	@ (8004ec0 <UART_SetConfig+0x2dc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d12a      	bne.n	8004e44 <UART_SetConfig+0x260>
 8004dee:	4b30      	ldr	r3, [pc, #192]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfc:	d01a      	beq.n	8004e34 <UART_SetConfig+0x250>
 8004dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e02:	d81b      	bhi.n	8004e3c <UART_SetConfig+0x258>
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e08:	d00c      	beq.n	8004e24 <UART_SetConfig+0x240>
 8004e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0e:	d815      	bhi.n	8004e3c <UART_SetConfig+0x258>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <UART_SetConfig+0x238>
 8004e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e18:	d008      	beq.n	8004e2c <UART_SetConfig+0x248>
 8004e1a:	e00f      	b.n	8004e3c <UART_SetConfig+0x258>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e22:	e052      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e24:	2302      	movs	r3, #2
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2a:	e04e      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e32:	e04a      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e34:	2308      	movs	r3, #8
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3a:	e046      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e42:	e042      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a17      	ldr	r2, [pc, #92]	@ (8004ea8 <UART_SetConfig+0x2c4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d13a      	bne.n	8004ec4 <UART_SetConfig+0x2e0>
 8004e4e:	4b18      	ldr	r3, [pc, #96]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e5c:	d01a      	beq.n	8004e94 <UART_SetConfig+0x2b0>
 8004e5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e62:	d81b      	bhi.n	8004e9c <UART_SetConfig+0x2b8>
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e68:	d00c      	beq.n	8004e84 <UART_SetConfig+0x2a0>
 8004e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e6e:	d815      	bhi.n	8004e9c <UART_SetConfig+0x2b8>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <UART_SetConfig+0x298>
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e78:	d008      	beq.n	8004e8c <UART_SetConfig+0x2a8>
 8004e7a:	e00f      	b.n	8004e9c <UART_SetConfig+0x2b8>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e022      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e01e      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e01a      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e016      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e012      	b.n	8004eca <UART_SetConfig+0x2e6>
 8004ea4:	efff69f3 	.word	0xefff69f3
 8004ea8:	40008000 	.word	0x40008000
 8004eac:	40013800 	.word	0x40013800
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40004400 	.word	0x40004400
 8004eb8:	40004800 	.word	0x40004800
 8004ebc:	40004c00 	.word	0x40004c00
 8004ec0:	40005000 	.word	0x40005000
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a9f      	ldr	r2, [pc, #636]	@ (800514c <UART_SetConfig+0x568>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d17a      	bne.n	8004fca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d824      	bhi.n	8004f26 <UART_SetConfig+0x342>
 8004edc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <UART_SetConfig+0x300>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f17 	.word	0x08004f17
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f27 	.word	0x08004f27
 8004f04:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7fe f9aa 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	61f8      	str	r0, [r7, #28]
        break;
 8004f0e:	e010      	b.n	8004f32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b8f      	ldr	r3, [pc, #572]	@ (8005150 <UART_SetConfig+0x56c>)
 8004f12:	61fb      	str	r3, [r7, #28]
        break;
 8004f14:	e00d      	b.n	8004f32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe f90d 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61f8      	str	r0, [r7, #28]
        break;
 8004f1c:	e009      	b.n	8004f32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61fb      	str	r3, [r7, #28]
        break;
 8004f24:	e005      	b.n	8004f32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80fb 	beq.w	8005130 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d305      	bcc.n	8004f56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d903      	bls.n	8004f5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f5c:	e0e8      	b.n	8005130 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2200      	movs	r2, #0
 8004f62:	461c      	mov	r4, r3
 8004f64:	4615      	mov	r5, r2
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	022b      	lsls	r3, r5, #8
 8004f70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f74:	0222      	lsls	r2, r4, #8
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6849      	ldr	r1, [r1, #4]
 8004f7a:	0849      	lsrs	r1, r1, #1
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	4688      	mov	r8, r1
 8004f80:	4681      	mov	r9, r0
 8004f82:	eb12 0a08 	adds.w	sl, r2, r8
 8004f86:	eb43 0b09 	adc.w	fp, r3, r9
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f98:	4650      	mov	r0, sl
 8004f9a:	4659      	mov	r1, fp
 8004f9c:	f7fb f914 	bl	80001c8 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fae:	d308      	bcc.n	8004fc2 <UART_SetConfig+0x3de>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb6:	d204      	bcs.n	8004fc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	e0b6      	b.n	8005130 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fc8:	e0b2      	b.n	8005130 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd2:	d15e      	bne.n	8005092 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d828      	bhi.n	800502e <UART_SetConfig+0x44a>
 8004fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe4 <UART_SetConfig+0x400>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	0800502f 	.word	0x0800502f
 8004ff4:	0800501f 	.word	0x0800501f
 8004ff8:	0800502f 	.word	0x0800502f
 8004ffc:	0800502f 	.word	0x0800502f
 8005000:	0800502f 	.word	0x0800502f
 8005004:	08005027 	.word	0x08005027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005008:	f7fe f92a 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 800500c:	61f8      	str	r0, [r7, #28]
        break;
 800500e:	e014      	b.n	800503a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fe f93c 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8005014:	61f8      	str	r0, [r7, #28]
        break;
 8005016:	e010      	b.n	800503a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005018:	4b4d      	ldr	r3, [pc, #308]	@ (8005150 <UART_SetConfig+0x56c>)
 800501a:	61fb      	str	r3, [r7, #28]
        break;
 800501c:	e00d      	b.n	800503a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501e:	f7fe f889 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8005022:	61f8      	str	r0, [r7, #28]
        break;
 8005024:	e009      	b.n	800503a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800502a:	61fb      	str	r3, [r7, #28]
        break;
 800502c:	e005      	b.n	800503a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005038:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d077      	beq.n	8005130 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	005a      	lsls	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b0f      	cmp	r3, #15
 800505a:	d916      	bls.n	800508a <UART_SetConfig+0x4a6>
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005062:	d212      	bcs.n	800508a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f023 030f 	bic.w	r3, r3, #15
 800506c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	b29b      	uxth	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	b29a      	uxth	r2, r3
 800507a:	8afb      	ldrh	r3, [r7, #22]
 800507c:	4313      	orrs	r3, r2
 800507e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	8afa      	ldrh	r2, [r7, #22]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	e052      	b.n	8005130 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005090:	e04e      	b.n	8005130 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005092:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005096:	2b08      	cmp	r3, #8
 8005098:	d827      	bhi.n	80050ea <UART_SetConfig+0x506>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <UART_SetConfig+0x4bc>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	080050eb 	.word	0x080050eb
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050eb 	.word	0x080050eb
 80050bc:	080050eb 	.word	0x080050eb
 80050c0:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c4:	f7fe f8cc 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 80050c8:	61f8      	str	r0, [r7, #28]
        break;
 80050ca:	e014      	b.n	80050f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7fe f8de 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 80050d0:	61f8      	str	r0, [r7, #28]
        break;
 80050d2:	e010      	b.n	80050f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005150 <UART_SetConfig+0x56c>)
 80050d6:	61fb      	str	r3, [r7, #28]
        break;
 80050d8:	e00d      	b.n	80050f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7fe f82b 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80050de:	61f8      	str	r0, [r7, #28]
        break;
 80050e0:	e009      	b.n	80050f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e6:	61fb      	str	r3, [r7, #28]
        break;
 80050e8:	e005      	b.n	80050f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f4:	bf00      	nop
    }

    if (pclk != 0U)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d019      	beq.n	8005130 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	085a      	lsrs	r2, r3, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b0f      	cmp	r3, #15
 8005114:	d909      	bls.n	800512a <UART_SetConfig+0x546>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511c:	d205      	bcs.n	800512a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	e002      	b.n	8005130 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800513c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	@ 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800514a:	bf00      	nop
 800514c:	40008000 	.word	0x40008000
 8005150:	00f42400 	.word	0x00f42400

08005154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005252:	d10a      	bne.n	800526a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b098      	sub	sp, #96	@ 0x60
 800529c:	af02      	add	r7, sp, #8
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a8:	f7fb fd5a 	bl	8000d60 <HAL_GetTick>
 80052ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d12e      	bne.n	800531a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f88c 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d021      	beq.n	800531a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e062      	b.n	80053e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b04      	cmp	r3, #4
 8005326:	d149      	bne.n	80053bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005330:	2200      	movs	r2, #0
 8005332:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f856 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d03c      	beq.n	80053bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	623b      	str	r3, [r7, #32]
   return(result);
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005360:	633b      	str	r3, [r7, #48]	@ 0x30
 8005362:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e6      	bne.n	8005342 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	60fb      	str	r3, [r7, #12]
   return(result);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005394:	61fa      	str	r2, [r7, #28]
 8005396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	617b      	str	r3, [r7, #20]
   return(result);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e011      	b.n	80053e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3758      	adds	r7, #88	@ 0x58
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	e04f      	b.n	800549a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005400:	d04b      	beq.n	800549a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005402:	f7fb fcad 	bl	8000d60 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <UART_WaitOnFlagUntilTimeout+0x30>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e04e      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d037      	beq.n	800549a <UART_WaitOnFlagUntilTimeout+0xb2>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b80      	cmp	r3, #128	@ 0x80
 800542e:	d034      	beq.n	800549a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b40      	cmp	r3, #64	@ 0x40
 8005434:	d031      	beq.n	800549a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d110      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2208      	movs	r2, #8
 800544a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f838 	bl	80054c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2208      	movs	r2, #8
 8005456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e029      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005474:	d111      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800547e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f81e 	bl	80054c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e00f      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d0a0      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b095      	sub	sp, #84	@ 0x54
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	61fb      	str	r3, [r7, #28]
   return(result);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3308      	adds	r3, #8
 800551a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800551c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800551e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e5      	bne.n	80054fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005534:	2b01      	cmp	r3, #1
 8005536:	d118      	bne.n	800556a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	60bb      	str	r3, [r7, #8]
   return(result);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 0310 	bic.w	r3, r3, #16
 800554c:	647b      	str	r3, [r7, #68]	@ 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6979      	ldr	r1, [r7, #20]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	613b      	str	r3, [r7, #16]
   return(result);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e6      	bne.n	8005538 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800557e:	bf00      	nop
 8005580:	3754      	adds	r7, #84	@ 0x54
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800558a:	b084      	sub	sp, #16
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	f107 001c 	add.w	r0, r7, #28
 8005598:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 fa25 	bl	80069f8 <USB_CoreReset>
 80055ae:	4603      	mov	r3, r0
 80055b0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80055b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80055c6:	e005      	b.n	80055d4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055e0:	b004      	add	sp, #16
 80055e2:	4770      	bx	lr

080055e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d165      	bne.n	80056c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	@ (80056f4 <USB_SetTurnaroundTime+0x110>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d906      	bls.n	800560e <USB_SetTurnaroundTime+0x2a>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a3d      	ldr	r2, [pc, #244]	@ (80056f8 <USB_SetTurnaroundTime+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d202      	bcs.n	800560e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005608:	230f      	movs	r3, #15
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e05c      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a39      	ldr	r2, [pc, #228]	@ (80056f8 <USB_SetTurnaroundTime+0x114>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d306      	bcc.n	8005624 <USB_SetTurnaroundTime+0x40>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a38      	ldr	r2, [pc, #224]	@ (80056fc <USB_SetTurnaroundTime+0x118>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d202      	bcs.n	8005624 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800561e:	230e      	movs	r3, #14
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e051      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a35      	ldr	r2, [pc, #212]	@ (80056fc <USB_SetTurnaroundTime+0x118>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d306      	bcc.n	800563a <USB_SetTurnaroundTime+0x56>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a34      	ldr	r2, [pc, #208]	@ (8005700 <USB_SetTurnaroundTime+0x11c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d202      	bcs.n	800563a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005634:	230d      	movs	r3, #13
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e046      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4a30      	ldr	r2, [pc, #192]	@ (8005700 <USB_SetTurnaroundTime+0x11c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d306      	bcc.n	8005650 <USB_SetTurnaroundTime+0x6c>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a2f      	ldr	r2, [pc, #188]	@ (8005704 <USB_SetTurnaroundTime+0x120>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d802      	bhi.n	8005650 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800564a:	230c      	movs	r3, #12
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e03b      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <USB_SetTurnaroundTime+0x120>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d906      	bls.n	8005666 <USB_SetTurnaroundTime+0x82>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a2b      	ldr	r2, [pc, #172]	@ (8005708 <USB_SetTurnaroundTime+0x124>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d802      	bhi.n	8005666 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005660:	230b      	movs	r3, #11
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e030      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4a27      	ldr	r2, [pc, #156]	@ (8005708 <USB_SetTurnaroundTime+0x124>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d906      	bls.n	800567c <USB_SetTurnaroundTime+0x98>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4a26      	ldr	r2, [pc, #152]	@ (800570c <USB_SetTurnaroundTime+0x128>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d802      	bhi.n	800567c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005676:	230a      	movs	r3, #10
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e025      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a23      	ldr	r2, [pc, #140]	@ (800570c <USB_SetTurnaroundTime+0x128>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d906      	bls.n	8005692 <USB_SetTurnaroundTime+0xae>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a22      	ldr	r2, [pc, #136]	@ (8005710 <USB_SetTurnaroundTime+0x12c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d202      	bcs.n	8005692 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800568c:	2309      	movs	r3, #9
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e01a      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4a1e      	ldr	r2, [pc, #120]	@ (8005710 <USB_SetTurnaroundTime+0x12c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d306      	bcc.n	80056a8 <USB_SetTurnaroundTime+0xc4>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <USB_SetTurnaroundTime+0x130>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d802      	bhi.n	80056a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056a2:	2308      	movs	r3, #8
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e00f      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005714 <USB_SetTurnaroundTime+0x130>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d906      	bls.n	80056be <USB_SetTurnaroundTime+0xda>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <USB_SetTurnaroundTime+0x134>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d202      	bcs.n	80056be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056b8:	2307      	movs	r3, #7
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e004      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056be:	2306      	movs	r3, #6
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e001      	b.n	80056c8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056c4:	2309      	movs	r3, #9
 80056c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	00d8acbf 	.word	0x00d8acbf
 80056f8:	00e4e1c0 	.word	0x00e4e1c0
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	01067380 	.word	0x01067380
 8005704:	011a499f 	.word	0x011a499f
 8005708:	01312cff 	.word	0x01312cff
 800570c:	014ca43f 	.word	0x014ca43f
 8005710:	016e3600 	.word	0x016e3600
 8005714:	01a6ab1f 	.word	0x01a6ab1f
 8005718:	01e84800 	.word	0x01e84800

0800571c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d115      	bne.n	80057ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800578e:	200a      	movs	r0, #10
 8005790:	f7fb faf2 	bl	8000d78 <HAL_Delay>
      ms += 10U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	330a      	adds	r3, #10
 8005798:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f8b3 	bl	8006906 <USB_GetMode>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d01e      	beq.n	80057e4 <USB_SetCurrentMode+0x84>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80057aa:	d9f0      	bls.n	800578e <USB_SetCurrentMode+0x2e>
 80057ac:	e01a      	b.n	80057e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d115      	bne.n	80057e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057c0:	200a      	movs	r0, #10
 80057c2:	f7fb fad9 	bl	8000d78 <HAL_Delay>
      ms += 10U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	330a      	adds	r3, #10
 80057ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 f89a 	bl	8006906 <USB_GetMode>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <USB_SetCurrentMode+0x84>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2bc7      	cmp	r3, #199	@ 0xc7
 80057dc:	d9f0      	bls.n	80057c0 <USB_SetCurrentMode+0x60>
 80057de:	e001      	b.n	80057e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e005      	b.n	80057f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80057e8:	d101      	bne.n	80057ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f8:	b084      	sub	sp, #16
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e009      	b.n	800582c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	3340      	adds	r3, #64	@ 0x40
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3301      	adds	r3, #1
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b0e      	cmp	r3, #14
 8005830:	d9f2      	bls.n	8005818 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005832:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11c      	bne.n	8005874 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e005      	b.n	8005880 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005886:	461a      	mov	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800588c:	2103      	movs	r1, #3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f95a 	bl	8005b48 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005894:	2110      	movs	r1, #16
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8f6 	bl	8005a88 <USB_FlushTxFifo>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f920 	bl	8005aec <USB_FlushRxFifo>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	e043      	b.n	8005968 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f6:	d118      	bne.n	800592a <USB_DevInit+0x132>
    {
      if (i == 0U)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590a:	461a      	mov	r2, r3
 800590c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e013      	b.n	800593c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e008      	b.n	800593c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595a:	461a      	mov	r2, r3
 800595c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800596c:	461a      	mov	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4293      	cmp	r3, r2
 8005972:	d3b5      	bcc.n	80058e0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e043      	b.n	8005a02 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005990:	d118      	bne.n	80059c4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a4:	461a      	mov	r2, r3
 80059a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e013      	b.n	80059d6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e008      	b.n	80059d6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	461a      	mov	r2, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	461a      	mov	r2, r3
 80059e4:	2300      	movs	r3, #0
 80059e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	461a      	mov	r2, r3
 80059f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3301      	adds	r3, #1
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a06:	461a      	mov	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d3b5      	bcc.n	800597a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f043 0210 	orr.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <USB_DevInit+0x28c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f043 0208 	orr.w	r2, r3, #8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d107      	bne.n	8005a74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a6c:	f043 0304 	orr.w	r3, r3, #4
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a80:	b004      	add	sp, #16
 8005a82:	4770      	bx	lr
 8005a84:	803c3800 	.word	0x803c3800

08005a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aa2:	d901      	bls.n	8005aa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e01b      	b.n	8005ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	daf2      	bge.n	8005a96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	019b      	lsls	r3, r3, #6
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e006      	b.n	8005ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d0f0      	beq.n	8005ac0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b04:	d901      	bls.n	8005b0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e018      	b.n	8005b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	daf2      	bge.n	8005af8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e006      	b.n	8005b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d0f0      	beq.n	8005b1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d002      	beq.n	8005ba0 <USB_GetDevSpeed+0x26>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b06      	cmp	r3, #6
 8005b9e:	d102      	bne.n	8005ba6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	75fb      	strb	r3, [r7, #23]
 8005ba4:	e001      	b.n	8005baa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005ba6:	230f      	movs	r3, #15
 8005ba8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d13a      	bne.n	8005c4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	2101      	movs	r1, #1
 8005be6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d155      	bne.n	8005cb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	791b      	ldrb	r3, [r3, #4]
 8005c26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	059b      	lsls	r3, r3, #22
 8005c2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c30:	4313      	orrs	r3, r2
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	e036      	b.n	8005cb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d11a      	bne.n	8005cb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d161      	bne.n	8005da8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cfa:	d11f      	bne.n	8005d3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f303 	lsl.w	r3, r1, r3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d80:	4013      	ands	r3, r2
 8005d82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	0159      	lsls	r1, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	440b      	add	r3, r1
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4b35      	ldr	r3, [pc, #212]	@ (8005e78 <USB_DeactivateEndpoint+0x1b0>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]
 8005da6:	e060      	b.n	8005e6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dbe:	d11f      	bne.n	8005e00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f303 	lsl.w	r3, r1, r3
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e20:	4013      	ands	r3, r2
 8005e22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	041b      	lsls	r3, r3, #16
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e44:	4013      	ands	r3, r2
 8005e46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0159      	lsls	r1, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	440b      	add	r3, r1
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e62:	4619      	mov	r1, r3
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <USB_DeactivateEndpoint+0x1b4>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	ec337800 	.word	0xec337800
 8005e7c:	eff37800 	.word	0xeff37800

08005e80 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 812d 	bne.w	80060f8 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d132      	bne.n	8005f0c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ec4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f04:	0cdb      	lsrs	r3, r3, #19
 8005f06:	04db      	lsls	r3, r3, #19
 8005f08:	6113      	str	r3, [r2, #16]
 8005f0a:	e097      	b.n	800603c <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f26:	0cdb      	lsrs	r3, r3, #19
 8005f28:	04db      	lsls	r3, r3, #19
 8005f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11a      	bne.n	8005f8c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d903      	bls.n	8005f6a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f88:	6113      	str	r3, [r2, #16]
 8005f8a:	e044      	b.n	8006016 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4413      	add	r3, r2
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	04d9      	lsls	r1, r3, #19
 8005fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80061f4 <USB_EPStartXfer+0x374>)
 8005fb6:	400b      	ands	r3, r1
 8005fb8:	6939      	ldr	r1, [r7, #16]
 8005fba:	0148      	lsls	r0, r1, #5
 8005fbc:	6979      	ldr	r1, [r7, #20]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d122      	bne.n	8006016 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005fee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	89fb      	ldrh	r3, [r7, #14]
 8006000:	075b      	lsls	r3, r3, #29
 8006002:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	0148      	lsls	r0, r1, #5
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	4401      	add	r1, r0
 800600e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006012:	4313      	orrs	r3, r2
 8006014:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602c:	6939      	ldr	r1, [r7, #16]
 800602e:	0148      	lsls	r0, r1, #5
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	4401      	add	r1, r0
 8006034:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006038:	4313      	orrs	r3, r2
 800603a:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006056:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800605a:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d015      	beq.n	8006090 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 813a 	beq.w	80062e2 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	2101      	movs	r1, #1
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800608a:	4313      	orrs	r3, r2
 800608c:	634b      	str	r3, [r1, #52]	@ 0x34
 800608e:	e128      	b.n	80062e2 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d110      	bne.n	80060c2 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	e00f      	b.n	80060e2 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060e0:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68d9      	ldr	r1, [r3, #12]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9a7 	bl	8006444 <USB_WritePacket>
 80060f6:	e0f4      	b.n	80062e2 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006112:	0cdb      	lsrs	r3, r3, #19
 8006114:	04db      	lsls	r3, r3, #19
 8006116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006132:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006136:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800613a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d12f      	bne.n	80061a2 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006170:	6939      	ldr	r1, [r7, #16]
 8006172:	0148      	lsls	r0, r1, #5
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	4401      	add	r1, r0
 8006178:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800619e:	6113      	str	r3, [r2, #16]
 80061a0:	e062      	b.n	8006268 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d126      	bne.n	80061f8 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c0:	6939      	ldr	r1, [r7, #16]
 80061c2:	0148      	lsls	r0, r1, #5
 80061c4:	6979      	ldr	r1, [r7, #20]
 80061c6:	4401      	add	r1, r0
 80061c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061cc:	4313      	orrs	r3, r2
 80061ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061ee:	6113      	str	r3, [r2, #16]
 80061f0:	e03a      	b.n	8006268 <USB_EPStartXfer+0x3e8>
 80061f2:	bf00      	nop
 80061f4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4413      	add	r3, r2
 8006202:	1e5a      	subs	r2, r3, #1
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	89fa      	ldrh	r2, [r7, #14]
 8006214:	fb03 f202 	mul.w	r2, r3, r2
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	89fb      	ldrh	r3, [r7, #14]
 800622c:	04d9      	lsls	r1, r3, #19
 800622e:	4b2f      	ldr	r3, [pc, #188]	@ (80062ec <USB_EPStartXfer+0x46c>)
 8006230:	400b      	ands	r3, r1
 8006232:	6939      	ldr	r1, [r7, #16]
 8006234:	0148      	lsls	r0, r1, #5
 8006236:	6979      	ldr	r1, [r7, #20]
 8006238:	4401      	add	r1, r0
 800623a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006258:	6939      	ldr	r1, [r7, #16]
 800625a:	0148      	lsls	r0, r1, #5
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	4401      	add	r1, r0
 8006260:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d128      	bne.n	80062c2 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d110      	bne.n	80062a2 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800629a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e00f      	b.n	80062c2 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	1ff80000 	.word	0x1ff80000

080062f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d14a      	bne.n	80063a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006322:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006326:	f040 8086 	bne.w	8006436 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006348:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800634c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800636c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006370:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800637e:	4293      	cmp	r3, r2
 8006380:	d902      	bls.n	8006388 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
          break;
 8006386:	e056      	b.n	8006436 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800639c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063a0:	d0e7      	beq.n	8006372 <USB_EPStopXfer+0x82>
 80063a2:	e048      	b.n	8006436 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063bc:	d13b      	bne.n	8006436 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	7812      	ldrb	r2, [r2, #0]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006400:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006404:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006412:	4293      	cmp	r3, r2
 8006414:	d902      	bls.n	800641c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
          break;
 800641a:	e00c      	b.n	8006436 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006434:	d0e7      	beq.n	8006406 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
}
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	@ 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	460b      	mov	r3, r1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	4613      	mov	r3, r2
 8006458:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006462:	88bb      	ldrh	r3, [r7, #4]
 8006464:	3303      	adds	r3, #3
 8006466:	089b      	lsrs	r3, r3, #2
 8006468:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800646a:	2300      	movs	r3, #0
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e018      	b.n	80064a2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	031a      	lsls	r2, r3, #12
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800647c:	461a      	mov	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3301      	adds	r3, #1
 800648e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3301      	adds	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3301      	adds	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3301      	adds	r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d3e2      	bcc.n	8006470 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3724      	adds	r7, #36	@ 0x24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b08b      	sub	sp, #44	@ 0x2c
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	089b      	lsrs	r3, r3, #2
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064de:	2300      	movs	r3, #0
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	e014      	b.n	800650e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	3301      	adds	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	3301      	adds	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	3301      	adds	r3, #1
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	3301      	adds	r3, #1
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	3301      	adds	r3, #1
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	6a3a      	ldr	r2, [r7, #32]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	429a      	cmp	r2, r3
 8006514:	d3e6      	bcc.n	80064e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006516:	8bfb      	ldrh	r3, [r7, #30]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01e      	beq.n	800655a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006526:	461a      	mov	r2, r3
 8006528:	f107 0310 	add.w	r3, r7, #16
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	fa22 f303 	lsr.w	r3, r2, r3
 800653c:	b2da      	uxtb	r2, r3
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	701a      	strb	r2, [r3, #0]
      i++;
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	3301      	adds	r3, #1
 8006546:	623b      	str	r3, [r7, #32]
      pDest++;
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	3301      	adds	r3, #1
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800654e:	8bfb      	ldrh	r3, [r7, #30]
 8006550:	3b01      	subs	r3, #1
 8006552:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006554:	8bfb      	ldrh	r3, [r7, #30]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1ea      	bne.n	8006530 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800655c:	4618      	mov	r0, r3
 800655e:	372c      	adds	r7, #44	@ 0x2c
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d12c      	bne.n	80065de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	db12      	blt.n	80065bc <USB_EPSetStall+0x54>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00f      	beq.n	80065bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e02b      	b.n	8006636 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db12      	blt.n	8006616 <USB_EPSetStall+0xae>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006610:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006614:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006630:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006634:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d128      	bne.n	80066b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800667a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800667e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d003      	beq.n	8006690 <USB_EPClearStall+0x4c>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	791b      	ldrb	r3, [r3, #4]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d138      	bne.n	8006702 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e027      	b.n	8006702 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d003      	beq.n	80066e2 <USB_EPClearStall+0x9e>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d10f      	bne.n	8006702 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	0151      	lsls	r1, r2, #5
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	440a      	add	r2, r1
 80066f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006700:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800672e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006732:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800674a:	4313      	orrs	r3, r2
 800674c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800678a:	f023 0302 	bic.w	r3, r3, #2
 800678e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067b8:	f023 0303 	bic.w	r3, r3, #3
 80067bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4013      	ands	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067f8:	68fb      	ldr	r3, [r7, #12]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	0c1b      	lsrs	r3, r3, #16
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	b29b      	uxth	r3, r3
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800689c:	68bb      	ldr	r3, [r7, #8]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	fa22 f303 	lsr.w	r3, r2, r3
 80068da:	01db      	lsls	r3, r3, #7
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4013      	ands	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068f8:	68bb      	ldr	r3, [r7, #8]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f003 0301 	and.w	r3, r3, #1
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	333c      	adds	r3, #60	@ 0x3c
 800697a:	3304      	adds	r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <USB_EP0_OutStart+0x8c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d90a      	bls.n	800699e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006998:	d101      	bne.n	800699e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e024      	b.n	80069e8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	461a      	mov	r2, r3
 80069a6:	2300      	movs	r3, #0
 80069a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069cc:	f043 0318 	orr.w	r3, r3, #24
 80069d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80069e4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	4f54300a 	.word	0x4f54300a

080069f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a10:	d901      	bls.n	8006a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e01b      	b.n	8006a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	daf2      	bge.n	8006a04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f043 0201 	orr.w	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a3a:	d901      	bls.n	8006a40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d0f0      	beq.n	8006a2e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a68:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a6c:	f002 fdca 	bl	8009604 <USBD_static_malloc>
 8006a70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	32b0      	adds	r2, #176	@ 0xb0
 8006a82:	2100      	movs	r1, #0
 8006a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e0d4      	b.n	8006c36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a8c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006a90:	2100      	movs	r1, #0
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f002 fdd4 	bl	8009640 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	32b0      	adds	r2, #176	@ 0xb0
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32b0      	adds	r2, #176	@ 0xb0
 8006ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7c1b      	ldrb	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d138      	bne.n	8006b36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8006c40 <USBD_CDC_Init+0x1e4>)
 8006ac6:	7819      	ldrb	r1, [r3, #0]
 8006ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006acc:	2202      	movs	r2, #2
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f002 fb84 	bl	80091dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8006c40 <USBD_CDC_Init+0x1e4>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 020f 	and.w	r2, r3, #15
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3324      	adds	r3, #36	@ 0x24
 8006aea:	2201      	movs	r2, #1
 8006aec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aee:	4b55      	ldr	r3, [pc, #340]	@ (8006c44 <USBD_CDC_Init+0x1e8>)
 8006af0:	7819      	ldrb	r1, [r3, #0]
 8006af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006af6:	2202      	movs	r2, #2
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 fb6f 	bl	80091dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006afe:	4b51      	ldr	r3, [pc, #324]	@ (8006c44 <USBD_CDC_Init+0x1e8>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b16:	2201      	movs	r2, #1
 8006b18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c48 <USBD_CDC_Init+0x1ec>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3326      	adds	r3, #38	@ 0x26
 8006b30:	2210      	movs	r2, #16
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	e035      	b.n	8006ba2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b36:	4b42      	ldr	r3, [pc, #264]	@ (8006c40 <USBD_CDC_Init+0x1e4>)
 8006b38:	7819      	ldrb	r1, [r3, #0]
 8006b3a:	2340      	movs	r3, #64	@ 0x40
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f002 fb4c 	bl	80091dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b44:	4b3e      	ldr	r3, [pc, #248]	@ (8006c40 <USBD_CDC_Init+0x1e4>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 020f 	and.w	r2, r3, #15
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	3324      	adds	r3, #36	@ 0x24
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b5e:	4b39      	ldr	r3, [pc, #228]	@ (8006c44 <USBD_CDC_Init+0x1e8>)
 8006b60:	7819      	ldrb	r1, [r3, #0]
 8006b62:	2340      	movs	r3, #64	@ 0x40
 8006b64:	2202      	movs	r2, #2
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f002 fb38 	bl	80091dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b6c:	4b35      	ldr	r3, [pc, #212]	@ (8006c44 <USBD_CDC_Init+0x1e8>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b84:	2201      	movs	r2, #1
 8006b86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b88:	4b2f      	ldr	r3, [pc, #188]	@ (8006c48 <USBD_CDC_Init+0x1ec>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	f003 020f 	and.w	r2, r3, #15
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	3326      	adds	r3, #38	@ 0x26
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ba2:	4b29      	ldr	r3, [pc, #164]	@ (8006c48 <USBD_CDC_Init+0x1ec>)
 8006ba4:	7819      	ldrb	r1, [r3, #0]
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	2203      	movs	r2, #3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f002 fb16 	bl	80091dc <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006bb0:	4b25      	ldr	r3, [pc, #148]	@ (8006c48 <USBD_CDC_Init+0x1ec>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3324      	adds	r3, #36	@ 0x24
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	33b0      	adds	r3, #176	@ 0xb0
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e018      	b.n	8006c36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <USBD_CDC_Init+0x1e8>)
 8006c0e:	7819      	ldrb	r1, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f002 fc58 	bl	80094d0 <USBD_LL_PrepareReceive>
 8006c20:	e008      	b.n	8006c34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c22:	4b08      	ldr	r3, [pc, #32]	@ (8006c44 <USBD_CDC_Init+0x1e8>)
 8006c24:	7819      	ldrb	r1, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c2c:	2340      	movs	r3, #64	@ 0x40
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f002 fc4e 	bl	80094d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000093 	.word	0x20000093
 8006c44:	20000094 	.word	0x20000094
 8006c48:	20000095 	.word	0x20000095

08006c4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c58:	4b3a      	ldr	r3, [pc, #232]	@ (8006d44 <USBD_CDC_DeInit+0xf8>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f002 fafa 	bl	8009258 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c64:	4b37      	ldr	r3, [pc, #220]	@ (8006d44 <USBD_CDC_DeInit+0xf8>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	3324      	adds	r3, #36	@ 0x24
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c7e:	4b32      	ldr	r3, [pc, #200]	@ (8006d48 <USBD_CDC_DeInit+0xfc>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f002 fae7 	bl	8009258 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d48 <USBD_CDC_DeInit+0xfc>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 020f 	and.w	r2, r3, #15
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ca6:	4b29      	ldr	r3, [pc, #164]	@ (8006d4c <USBD_CDC_DeInit+0x100>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f002 fad3 	bl	8009258 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006cb2:	4b26      	ldr	r3, [pc, #152]	@ (8006d4c <USBD_CDC_DeInit+0x100>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 020f 	and.w	r2, r3, #15
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3324      	adds	r3, #36	@ 0x24
 8006cc8:	2200      	movs	r2, #0
 8006cca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d4c <USBD_CDC_DeInit+0x100>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	3326      	adds	r3, #38	@ 0x26
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	32b0      	adds	r2, #176	@ 0xb0
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01f      	beq.n	8006d38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	33b0      	adds	r3, #176	@ 0xb0
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32b0      	adds	r2, #176	@ 0xb0
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 fc80 	bl	8009620 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32b0      	adds	r2, #176	@ 0xb0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000093 	.word	0x20000093
 8006d48:	20000094 	.word	0x20000094
 8006d4c:	20000095 	.word	0x20000095

08006d50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	32b0      	adds	r2, #176	@ 0xb0
 8006d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e0bf      	b.n	8006f00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d050      	beq.n	8006e2e <USBD_CDC_Setup+0xde>
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	f040 80af 	bne.w	8006ef0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d03a      	beq.n	8006e10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da1b      	bge.n	8006ddc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	33b0      	adds	r3, #176	@ 0xb0
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006dba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	88d2      	ldrh	r2, [r2, #6]
 8006dc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	2b07      	cmp	r3, #7
 8006dc8:	bf28      	it	cs
 8006dca:	2307      	movcs	r3, #7
 8006dcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	89fa      	ldrh	r2, [r7, #14]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fd7d 	bl	80088d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dda:	e090      	b.n	8006efe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785a      	ldrb	r2, [r3, #1]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	88db      	ldrh	r3, [r3, #6]
 8006dea:	2b3f      	cmp	r3, #63	@ 0x3f
 8006dec:	d803      	bhi.n	8006df6 <USBD_CDC_Setup+0xa6>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	88db      	ldrh	r3, [r3, #6]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	e000      	b.n	8006df8 <USBD_CDC_Setup+0xa8>
 8006df6:	2240      	movs	r2, #64	@ 0x40
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dfe:	6939      	ldr	r1, [r7, #16]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006e06:	461a      	mov	r2, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fd8f 	bl	800892c <USBD_CtlPrepareRx>
      break;
 8006e0e:	e076      	b.n	8006efe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	33b0      	adds	r3, #176	@ 0xb0
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	7850      	ldrb	r0, [r2, #1]
 8006e26:	2200      	movs	r2, #0
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	4798      	blx	r3
      break;
 8006e2c:	e067      	b.n	8006efe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b0b      	cmp	r3, #11
 8006e34:	d851      	bhi.n	8006eda <USBD_CDC_Setup+0x18a>
 8006e36:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <USBD_CDC_Setup+0xec>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006edb 	.word	0x08006edb
 8006e48:	08006edb 	.word	0x08006edb
 8006e4c:	08006edb 	.word	0x08006edb
 8006e50:	08006edb 	.word	0x08006edb
 8006e54:	08006edb 	.word	0x08006edb
 8006e58:	08006edb 	.word	0x08006edb
 8006e5c:	08006edb 	.word	0x08006edb
 8006e60:	08006edb 	.word	0x08006edb
 8006e64:	08006e97 	.word	0x08006e97
 8006e68:	08006ec1 	.word	0x08006ec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d107      	bne.n	8006e88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e78:	f107 030a 	add.w	r3, r7, #10
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fd27 	bl	80088d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e86:	e032      	b.n	8006eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fca5 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	75fb      	strb	r3, [r7, #23]
          break;
 8006e94:	e02b      	b.n	8006eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ea2:	f107 030d 	add.w	r3, r7, #13
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fd12 	bl	80088d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb0:	e01d      	b.n	8006eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fc90 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e016      	b.n	8006eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d00f      	beq.n	8006eec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fc83 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ed8:	e008      	b.n	8006eec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fc7c 	bl	80087da <USBD_CtlError>
          ret = USBD_FAIL;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee6:	e002      	b.n	8006eee <USBD_CDC_Setup+0x19e>
          break;
 8006ee8:	bf00      	nop
 8006eea:	e008      	b.n	8006efe <USBD_CDC_Setup+0x1ae>
          break;
 8006eec:	bf00      	nop
      }
      break;
 8006eee:	e006      	b.n	8006efe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fc71 	bl	80087da <USBD_CtlError>
      ret = USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	75fb      	strb	r3, [r7, #23]
      break;
 8006efc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32b0      	adds	r2, #176	@ 0xb0
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e065      	b.n	8006ffe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	32b0      	adds	r2, #176	@ 0xb0
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 020f 	and.w	r2, r3, #15
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	3318      	adds	r3, #24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d02f      	beq.n	8006fbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	f003 020f 	and.w	r2, r3, #15
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	3318      	adds	r3, #24
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	f003 010f 	and.w	r1, r3, #15
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	440b      	add	r3, r1
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4403      	add	r3, r0
 8006f84:	331c      	adds	r3, #28
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d112      	bne.n	8006fbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3318      	adds	r3, #24
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fae:	78f9      	ldrb	r1, [r7, #3]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f002 fa53 	bl	8009460 <USBD_LL_Transmit>
 8006fba:	e01f      	b.n	8006ffc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	33b0      	adds	r3, #176	@ 0xb0
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d010      	beq.n	8006ffc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	33b0      	adds	r3, #176	@ 0xb0
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	32b0      	adds	r2, #176	@ 0xb0
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32b0      	adds	r2, #176	@ 0xb0
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007034:	2303      	movs	r3, #3
 8007036:	e01a      	b.n	800706e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f002 fa7f 	bl	8009540 <USBD_LL_GetRxDataSize>
 8007042:	4602      	mov	r2, r0
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	33b0      	adds	r3, #176	@ 0xb0
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007068:	4611      	mov	r1, r2
 800706a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	32b0      	adds	r2, #176	@ 0xb0
 8007088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	e024      	b.n	80070e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	33b0      	adds	r3, #176	@ 0xb0
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d019      	beq.n	80070e0 <USBD_CDC_EP0_RxReady+0x6a>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80070b2:	2bff      	cmp	r3, #255	@ 0xff
 80070b4:	d014      	beq.n	80070e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	33b0      	adds	r3, #176	@ 0xb0
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80070ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	22ff      	movs	r2, #255	@ 0xff
 80070dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070f4:	2182      	movs	r1, #130	@ 0x82
 80070f6:	4818      	ldr	r0, [pc, #96]	@ (8007158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070f8:	f000 fd0f 	bl	8007b1a <USBD_GetEpDesc>
 80070fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070fe:	2101      	movs	r1, #1
 8007100:	4815      	ldr	r0, [pc, #84]	@ (8007158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007102:	f000 fd0a 	bl	8007b1a <USBD_GetEpDesc>
 8007106:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007108:	2181      	movs	r1, #129	@ 0x81
 800710a:	4813      	ldr	r0, [pc, #76]	@ (8007158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800710c:	f000 fd05 	bl	8007b1a <USBD_GetEpDesc>
 8007110:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2210      	movs	r2, #16
 800711c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d006      	beq.n	8007132 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2200      	movs	r2, #0
 8007128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800712c:	711a      	strb	r2, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007140:	711a      	strb	r2, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2243      	movs	r2, #67	@ 0x43
 800714a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800714c:	4b02      	ldr	r3, [pc, #8]	@ (8007158 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000050 	.word	0x20000050

0800715c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007164:	2182      	movs	r1, #130	@ 0x82
 8007166:	4818      	ldr	r0, [pc, #96]	@ (80071c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007168:	f000 fcd7 	bl	8007b1a <USBD_GetEpDesc>
 800716c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800716e:	2101      	movs	r1, #1
 8007170:	4815      	ldr	r0, [pc, #84]	@ (80071c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007172:	f000 fcd2 	bl	8007b1a <USBD_GetEpDesc>
 8007176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007178:	2181      	movs	r1, #129	@ 0x81
 800717a:	4813      	ldr	r0, [pc, #76]	@ (80071c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800717c:	f000 fccd 	bl	8007b1a <USBD_GetEpDesc>
 8007180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2210      	movs	r2, #16
 800718c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d006      	beq.n	80071a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2200      	movs	r2, #0
 8007198:	711a      	strb	r2, [r3, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f042 0202 	orr.w	r2, r2, #2
 80071a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	711a      	strb	r2, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f042 0202 	orr.w	r2, r2, #2
 80071b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2243      	movs	r2, #67	@ 0x43
 80071ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071bc:	4b02      	ldr	r3, [pc, #8]	@ (80071c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000050 	.word	0x20000050

080071cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071d4:	2182      	movs	r1, #130	@ 0x82
 80071d6:	4818      	ldr	r0, [pc, #96]	@ (8007238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071d8:	f000 fc9f 	bl	8007b1a <USBD_GetEpDesc>
 80071dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071de:	2101      	movs	r1, #1
 80071e0:	4815      	ldr	r0, [pc, #84]	@ (8007238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071e2:	f000 fc9a 	bl	8007b1a <USBD_GetEpDesc>
 80071e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071e8:	2181      	movs	r1, #129	@ 0x81
 80071ea:	4813      	ldr	r0, [pc, #76]	@ (8007238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071ec:	f000 fc95 	bl	8007b1a <USBD_GetEpDesc>
 80071f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2210      	movs	r2, #16
 80071fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d006      	beq.n	8007212 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2200      	movs	r2, #0
 8007208:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800720c:	711a      	strb	r2, [r3, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007220:	711a      	strb	r2, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2243      	movs	r2, #67	@ 0x43
 800722a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800722c:	4b02      	ldr	r3, [pc, #8]	@ (8007238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000050 	.word	0x20000050

0800723c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	220a      	movs	r2, #10
 8007248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800724a:	4b03      	ldr	r3, [pc, #12]	@ (8007258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	2000000c 	.word	0x2000000c

0800725c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	e009      	b.n	8007284 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	33b0      	adds	r3, #176	@ 0xb0
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	32b0      	adds	r2, #176	@ 0xb0
 80072a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e008      	b.n	80072c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	32b0      	adds	r2, #176	@ 0xb0
 80072e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e004      	b.n	8007302 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32b0      	adds	r2, #176	@ 0xb0
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	32b0      	adds	r2, #176	@ 0xb0
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800733a:	2303      	movs	r3, #3
 800733c:	e018      	b.n	8007370 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	7c1b      	ldrb	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007346:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <USBD_CDC_ReceivePacket+0x68>)
 8007348:	7819      	ldrb	r1, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f002 f8bb 	bl	80094d0 <USBD_LL_PrepareReceive>
 800735a:	e008      	b.n	800736e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <USBD_CDC_ReceivePacket+0x68>)
 800735e:	7819      	ldrb	r1, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007366:	2340      	movs	r3, #64	@ 0x40
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f002 f8b1 	bl	80094d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000094 	.word	0x20000094

0800737c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e01f      	b.n	80073d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	79fa      	ldrb	r2, [r7, #7]
 80073c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 fe89 	bl	80090e0 <USBD_LL_Init>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e025      	b.n	8007440 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	32ae      	adds	r2, #174	@ 0xae
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00f      	beq.n	8007430 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32ae      	adds	r2, #174	@ 0xae
 800741a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f107 020e 	add.w	r2, r7, #14
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
 8007428:	4602      	mov	r2, r0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 fe91 	bl	8009178 <USBD_LL_Start>
 8007456:	4603      	mov	r3, r0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	4611      	mov	r1, r2
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	4611      	mov	r1, r2
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 f936 	bl	8008766 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007508:	461a      	mov	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007516:	f003 031f 	and.w	r3, r3, #31
 800751a:	2b02      	cmp	r3, #2
 800751c:	d01a      	beq.n	8007554 <USBD_LL_SetupStage+0x72>
 800751e:	2b02      	cmp	r3, #2
 8007520:	d822      	bhi.n	8007568 <USBD_LL_SetupStage+0x86>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <USBD_LL_SetupStage+0x4a>
 8007526:	2b01      	cmp	r3, #1
 8007528:	d00a      	beq.n	8007540 <USBD_LL_SetupStage+0x5e>
 800752a:	e01d      	b.n	8007568 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fb63 	bl	8007c00 <USBD_StdDevReq>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
      break;
 800753e:	e020      	b.n	8007582 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fbcb 	bl	8007ce4 <USBD_StdItfReq>
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]
      break;
 8007552:	e016      	b.n	8007582 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fc2d 	bl	8007dbc <USBD_StdEPReq>
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]
      break;
 8007566:	e00c      	b.n	8007582 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800756e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007572:	b2db      	uxtb	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 fea4 	bl	80092c4 <USBD_LL_StallEP>
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
      break;
 8007580:	bf00      	nop
  }

  return ret;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	460b      	mov	r3, r1
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d16e      	bne.n	8007682 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80075aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	f040 8098 	bne.w	80076e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d913      	bls.n	80075ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	1ad2      	subs	r2, r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	4293      	cmp	r3, r2
 80075dc:	bf28      	it	cs
 80075de:	4613      	movcs	r3, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f001 f9be 	bl	8008966 <USBD_CtlContinueRx>
 80075ea:	e07d      	b.n	80076e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d014      	beq.n	8007624 <USBD_LL_DataOutStage+0x98>
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d81d      	bhi.n	800763a <USBD_LL_DataOutStage+0xae>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <USBD_LL_DataOutStage+0x7c>
 8007602:	2b01      	cmp	r3, #1
 8007604:	d003      	beq.n	800760e <USBD_LL_DataOutStage+0x82>
 8007606:	e018      	b.n	800763a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	75bb      	strb	r3, [r7, #22]
            break;
 800760c:	e018      	b.n	8007640 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4619      	mov	r1, r3
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fa64 	bl	8007ae6 <USBD_CoreFindIF>
 800761e:	4603      	mov	r3, r0
 8007620:	75bb      	strb	r3, [r7, #22]
            break;
 8007622:	e00d      	b.n	8007640 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800762a:	b2db      	uxtb	r3, r3
 800762c:	4619      	mov	r1, r3
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fa66 	bl	8007b00 <USBD_CoreFindEP>
 8007634:	4603      	mov	r3, r0
 8007636:	75bb      	strb	r3, [r7, #22]
            break;
 8007638:	e002      	b.n	8007640 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	75bb      	strb	r3, [r7, #22]
            break;
 800763e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007640:	7dbb      	ldrb	r3, [r7, #22]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d119      	bne.n	800767a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b03      	cmp	r3, #3
 8007650:	d113      	bne.n	800767a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007652:	7dba      	ldrb	r2, [r7, #22]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	32ae      	adds	r2, #174	@ 0xae
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007662:	7dba      	ldrb	r2, [r7, #22]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800766a:	7dba      	ldrb	r2, [r7, #22]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	32ae      	adds	r2, #174	@ 0xae
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f001 f984 	bl	8008988 <USBD_CtlSendStatus>
 8007680:	e032      	b.n	80076e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007688:	b2db      	uxtb	r3, r3
 800768a:	4619      	mov	r1, r3
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fa37 	bl	8007b00 <USBD_CoreFindEP>
 8007692:	4603      	mov	r3, r0
 8007694:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007696:	7dbb      	ldrb	r3, [r7, #22]
 8007698:	2bff      	cmp	r3, #255	@ 0xff
 800769a:	d025      	beq.n	80076e8 <USBD_LL_DataOutStage+0x15c>
 800769c:	7dbb      	ldrb	r3, [r7, #22]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d122      	bne.n	80076e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d117      	bne.n	80076de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076ae:	7dba      	ldrb	r2, [r7, #22]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	32ae      	adds	r2, #174	@ 0xae
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00f      	beq.n	80076de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80076be:	7dba      	ldrb	r2, [r7, #22]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80076c6:	7dba      	ldrb	r2, [r7, #22]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	32ae      	adds	r2, #174	@ 0xae
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	7afa      	ldrb	r2, [r7, #11]
 80076d4:	4611      	mov	r1, r2
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	4798      	blx	r3
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	e000      	b.n	80076ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b086      	sub	sp, #24
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	460b      	mov	r3, r1
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d16f      	bne.n	80077e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3314      	adds	r3, #20
 800770a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007712:	2b02      	cmp	r3, #2
 8007714:	d15a      	bne.n	80077cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	429a      	cmp	r2, r3
 8007720:	d914      	bls.n	800774c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	1ad2      	subs	r2, r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	461a      	mov	r2, r3
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f001 f8e6 	bl	800890a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800773e:	2300      	movs	r3, #0
 8007740:	2200      	movs	r2, #0
 8007742:	2100      	movs	r1, #0
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f001 fec3 	bl	80094d0 <USBD_LL_PrepareReceive>
 800774a:	e03f      	b.n	80077cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	429a      	cmp	r2, r3
 8007756:	d11c      	bne.n	8007792 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007760:	429a      	cmp	r2, r3
 8007762:	d316      	bcc.n	8007792 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800776e:	429a      	cmp	r2, r3
 8007770:	d20f      	bcs.n	8007792 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007772:	2200      	movs	r2, #0
 8007774:	2100      	movs	r1, #0
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f001 f8c7 	bl	800890a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007784:	2300      	movs	r3, #0
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f001 fea0 	bl	80094d0 <USBD_LL_PrepareReceive>
 8007790:	e01c      	b.n	80077cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d10f      	bne.n	80077be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077be:	2180      	movs	r1, #128	@ 0x80
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f001 fd7f 	bl	80092c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f001 f8f1 	bl	80089ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d03a      	beq.n	800784c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff fe42 	bl	8007460 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80077e4:	e032      	b.n	800784c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	4619      	mov	r1, r3
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f985 	bl	8007b00 <USBD_CoreFindEP>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2bff      	cmp	r3, #255	@ 0xff
 80077fe:	d025      	beq.n	800784c <USBD_LL_DataInStage+0x15a>
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d122      	bne.n	800784c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d11c      	bne.n	800784c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007812:	7dfa      	ldrb	r2, [r7, #23]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	32ae      	adds	r2, #174	@ 0xae
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d014      	beq.n	800784c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007822:	7dfa      	ldrb	r2, [r7, #23]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800782a:	7dfa      	ldrb	r2, [r7, #23]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	32ae      	adds	r2, #174	@ 0xae
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	7afa      	ldrb	r2, [r7, #11]
 8007838:	4611      	mov	r1, r2
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007842:	7dbb      	ldrb	r3, [r7, #22]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007848:	7dbb      	ldrb	r3, [r7, #22]
 800784a:	e000      	b.n	800784e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d014      	beq.n	80078bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00e      	beq.n	80078bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6852      	ldr	r2, [r2, #4]
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	4611      	mov	r1, r2
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078bc:	2340      	movs	r3, #64	@ 0x40
 80078be:	2200      	movs	r2, #0
 80078c0:	2100      	movs	r1, #0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fc8a 	bl	80091dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2240      	movs	r2, #64	@ 0x40
 80078d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078d8:	2340      	movs	r3, #64	@ 0x40
 80078da:	2200      	movs	r2, #0
 80078dc:	2180      	movs	r1, #128	@ 0x80
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fc7c 	bl	80091dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2240      	movs	r2, #64	@ 0x40
 80078ee:	621a      	str	r2, [r3, #32]

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b04      	cmp	r3, #4
 800792c:	d006      	beq.n	800793c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007934:	b2da      	uxtb	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2204      	movs	r2, #4
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b04      	cmp	r3, #4
 8007964:	d106      	bne.n	8007974 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800796c:	b2da      	uxtb	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b03      	cmp	r3, #3
 8007994:	d110      	bne.n	80079b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	32ae      	adds	r2, #174	@ 0xae
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e01c      	b.n	8007a1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d115      	bne.n	8007a1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	32ae      	adds	r2, #174	@ 0xae
 80079fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32ae      	adds	r2, #174	@ 0xae
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	4611      	mov	r1, r2
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	32ae      	adds	r2, #174	@ 0xae
 8007a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e01c      	b.n	8007a82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d115      	bne.n	8007a80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32ae      	adds	r2, #174	@ 0xae
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	32ae      	adds	r2, #174	@ 0xae
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00e      	beq.n	8007adc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6852      	ldr	r2, [r2, #4]
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	4611      	mov	r1, r2
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007af2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d91f      	bls.n	8007b80 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b46:	e013      	b.n	8007b70 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b48:	f107 030a 	add.w	r3, r7, #10
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6978      	ldr	r0, [r7, #20]
 8007b50:	f000 f81b 	bl	8007b8a <USBD_GetNextDesc>
 8007b54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d108      	bne.n	8007b70 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	789b      	ldrb	r3, [r3, #2]
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d008      	beq.n	8007b7e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	885b      	ldrh	r3, [r3, #2]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	897b      	ldrh	r3, [r7, #10]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d8e5      	bhi.n	8007b48 <USBD_GetEpDesc+0x2e>
 8007b7c:	e000      	b.n	8007b80 <USBD_GetEpDesc+0x66>
          break;
 8007b7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b80:	693b      	ldr	r3, [r7, #16]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007be0:	8a3b      	ldrh	r3, [r7, #16]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	b21a      	sxth	r2, r3
 8007be6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	b21b      	sxth	r3, r3
 8007bee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
	...

08007c00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c16:	2b40      	cmp	r3, #64	@ 0x40
 8007c18:	d005      	beq.n	8007c26 <USBD_StdDevReq+0x26>
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d857      	bhi.n	8007cce <USBD_StdDevReq+0xce>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00f      	beq.n	8007c42 <USBD_StdDevReq+0x42>
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d153      	bne.n	8007cce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	32ae      	adds	r2, #174	@ 0xae
 8007c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	4798      	blx	r3
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c40:	e04a      	b.n	8007cd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b09      	cmp	r3, #9
 8007c48:	d83b      	bhi.n	8007cc2 <USBD_StdDevReq+0xc2>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <USBD_StdDevReq+0x50>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007ca5 	.word	0x08007ca5
 8007c54:	08007cb9 	.word	0x08007cb9
 8007c58:	08007cc3 	.word	0x08007cc3
 8007c5c:	08007caf 	.word	0x08007caf
 8007c60:	08007cc3 	.word	0x08007cc3
 8007c64:	08007c83 	.word	0x08007c83
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007cc3 	.word	0x08007cc3
 8007c70:	08007c9b 	.word	0x08007c9b
 8007c74:	08007c8d 	.word	0x08007c8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa3c 	bl	80080f8 <USBD_GetDescriptor>
          break;
 8007c80:	e024      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fbcb 	bl	8008420 <USBD_SetAddress>
          break;
 8007c8a:	e01f      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fc0a 	bl	80084a8 <USBD_SetConfig>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
          break;
 8007c98:	e018      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fcad 	bl	80085fc <USBD_GetConfig>
          break;
 8007ca2:	e013      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fcde 	bl	8008668 <USBD_GetStatus>
          break;
 8007cac:	e00e      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fd0d 	bl	80086d0 <USBD_SetFeature>
          break;
 8007cb6:	e009      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fd31 	bl	8008722 <USBD_ClrFeature>
          break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fd88 	bl	80087da <USBD_CtlError>
          break;
 8007cca:	bf00      	nop
      }
      break;
 8007ccc:	e004      	b.n	8007cd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fd82 	bl	80087da <USBD_CtlError>
      break;
 8007cd6:	bf00      	nop
  }

  return ret;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop

08007ce4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cfa:	2b40      	cmp	r3, #64	@ 0x40
 8007cfc:	d005      	beq.n	8007d0a <USBD_StdItfReq+0x26>
 8007cfe:	2b40      	cmp	r3, #64	@ 0x40
 8007d00:	d852      	bhi.n	8007da8 <USBD_StdItfReq+0xc4>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <USBD_StdItfReq+0x26>
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d14e      	bne.n	8007da8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d840      	bhi.n	8007d9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	889b      	ldrh	r3, [r3, #4]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d836      	bhi.n	8007d90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	889b      	ldrh	r3, [r3, #4]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff fedb 	bl	8007ae6 <USBD_CoreFindIF>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	2bff      	cmp	r3, #255	@ 0xff
 8007d38:	d01d      	beq.n	8007d76 <USBD_StdItfReq+0x92>
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11a      	bne.n	8007d76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d40:	7bba      	ldrb	r2, [r7, #14]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	32ae      	adds	r2, #174	@ 0xae
 8007d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00f      	beq.n	8007d70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d50:	7bba      	ldrb	r2, [r7, #14]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d58:	7bba      	ldrb	r2, [r7, #14]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	32ae      	adds	r2, #174	@ 0xae
 8007d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d6e:	e004      	b.n	8007d7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d74:	e001      	b.n	8007d7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d76:	2303      	movs	r3, #3
 8007d78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	88db      	ldrh	r3, [r3, #6]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d110      	bne.n	8007da4 <USBD_StdItfReq+0xc0>
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10d      	bne.n	8007da4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fdfd 	bl	8008988 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d8e:	e009      	b.n	8007da4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fd21 	bl	80087da <USBD_CtlError>
          break;
 8007d98:	e004      	b.n	8007da4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fd1c 	bl	80087da <USBD_CtlError>
          break;
 8007da2:	e000      	b.n	8007da6 <USBD_StdItfReq+0xc2>
          break;
 8007da4:	bf00      	nop
      }
      break;
 8007da6:	e004      	b.n	8007db2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fd15 	bl	80087da <USBD_CtlError>
      break;
 8007db0:	bf00      	nop
  }

  return ret;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	889b      	ldrh	r3, [r3, #4]
 8007dce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d007      	beq.n	8007dec <USBD_StdEPReq+0x30>
 8007ddc:	2b40      	cmp	r3, #64	@ 0x40
 8007dde:	f200 817f 	bhi.w	80080e0 <USBD_StdEPReq+0x324>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02a      	beq.n	8007e3c <USBD_StdEPReq+0x80>
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	f040 817a 	bne.w	80080e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fe85 	bl	8007b00 <USBD_CoreFindEP>
 8007df6:	4603      	mov	r3, r0
 8007df8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dfa:	7b7b      	ldrb	r3, [r7, #13]
 8007dfc:	2bff      	cmp	r3, #255	@ 0xff
 8007dfe:	f000 8174 	beq.w	80080ea <USBD_StdEPReq+0x32e>
 8007e02:	7b7b      	ldrb	r3, [r7, #13]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 8170 	bne.w	80080ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e0a:	7b7a      	ldrb	r2, [r7, #13]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e12:	7b7a      	ldrb	r2, [r7, #13]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32ae      	adds	r2, #174	@ 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8163 	beq.w	80080ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e24:	7b7a      	ldrb	r2, [r7, #13]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	32ae      	adds	r2, #174	@ 0xae
 8007e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e3a:	e156      	b.n	80080ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d008      	beq.n	8007e56 <USBD_StdEPReq+0x9a>
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	f300 8145 	bgt.w	80080d4 <USBD_StdEPReq+0x318>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 809b 	beq.w	8007f86 <USBD_StdEPReq+0x1ca>
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d03c      	beq.n	8007ece <USBD_StdEPReq+0x112>
 8007e54:	e13e      	b.n	80080d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d002      	beq.n	8007e68 <USBD_StdEPReq+0xac>
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d016      	beq.n	8007e94 <USBD_StdEPReq+0xd8>
 8007e66:	e02c      	b.n	8007ec2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <USBD_StdEPReq+0xce>
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b80      	cmp	r3, #128	@ 0x80
 8007e72:	d00a      	beq.n	8007e8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fa23 	bl	80092c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e7e:	2180      	movs	r1, #128	@ 0x80
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fa1f 	bl	80092c4 <USBD_LL_StallEP>
 8007e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e88:	e020      	b.n	8007ecc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fca4 	bl	80087da <USBD_CtlError>
              break;
 8007e92:	e01b      	b.n	8007ecc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	885b      	ldrh	r3, [r3, #2]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10e      	bne.n	8007eba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <USBD_StdEPReq+0xfe>
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b80      	cmp	r3, #128	@ 0x80
 8007ea6:	d008      	beq.n	8007eba <USBD_StdEPReq+0xfe>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	88db      	ldrh	r3, [r3, #6]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fa05 	bl	80092c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fd64 	bl	8008988 <USBD_CtlSendStatus>

              break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fc88 	bl	80087da <USBD_CtlError>
              break;
 8007eca:	bf00      	nop
          }
          break;
 8007ecc:	e107      	b.n	80080de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d002      	beq.n	8007ee0 <USBD_StdEPReq+0x124>
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d016      	beq.n	8007f0c <USBD_StdEPReq+0x150>
 8007ede:	e04b      	b.n	8007f78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00d      	beq.n	8007f02 <USBD_StdEPReq+0x146>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	@ 0x80
 8007eea:	d00a      	beq.n	8007f02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 f9e7 	bl	80092c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ef6:	2180      	movs	r1, #128	@ 0x80
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f9e3 	bl	80092c4 <USBD_LL_StallEP>
 8007efe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f00:	e040      	b.n	8007f84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc68 	bl	80087da <USBD_CtlError>
              break;
 8007f0a:	e03b      	b.n	8007f84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	885b      	ldrh	r3, [r3, #2]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d136      	bne.n	8007f82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 fa04 	bl	8009330 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fd2d 	bl	8008988 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fde4 	bl	8007b00 <USBD_CoreFindEP>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f3c:	7b7b      	ldrb	r3, [r7, #13]
 8007f3e:	2bff      	cmp	r3, #255	@ 0xff
 8007f40:	d01f      	beq.n	8007f82 <USBD_StdEPReq+0x1c6>
 8007f42:	7b7b      	ldrb	r3, [r7, #13]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11c      	bne.n	8007f82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f48:	7b7a      	ldrb	r2, [r7, #13]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f50:	7b7a      	ldrb	r2, [r7, #13]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32ae      	adds	r2, #174	@ 0xae
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f60:	7b7a      	ldrb	r2, [r7, #13]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	32ae      	adds	r2, #174	@ 0xae
 8007f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f76:	e004      	b.n	8007f82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fc2d 	bl	80087da <USBD_CtlError>
              break;
 8007f80:	e000      	b.n	8007f84 <USBD_StdEPReq+0x1c8>
              break;
 8007f82:	bf00      	nop
          }
          break;
 8007f84:	e0ab      	b.n	80080de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d002      	beq.n	8007f98 <USBD_StdEPReq+0x1dc>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d032      	beq.n	8007ffc <USBD_StdEPReq+0x240>
 8007f96:	e097      	b.n	80080c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <USBD_StdEPReq+0x1f2>
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b80      	cmp	r3, #128	@ 0x80
 8007fa2:	d004      	beq.n	8007fae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fc17 	bl	80087da <USBD_CtlError>
                break;
 8007fac:	e091      	b.n	80080d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da0b      	bge.n	8007fce <USBD_StdEPReq+0x212>
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	3310      	adds	r3, #16
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	4413      	add	r3, r2
 8007fca:	3304      	adds	r3, #4
 8007fcc:	e00b      	b.n	8007fe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fc6d 	bl	80088d4 <USBD_CtlSendData>
              break;
 8007ffa:	e06a      	b.n	80080d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da11      	bge.n	8008028 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	3324      	adds	r3, #36	@ 0x24
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d117      	bne.n	800804e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fbda 	bl	80087da <USBD_CtlError>
                  break;
 8008026:	e054      	b.n	80080d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	f003 020f 	and.w	r2, r3, #15
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fbc7 	bl	80087da <USBD_CtlError>
                  break;
 800804c:	e041      	b.n	80080d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800804e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	da0b      	bge.n	800806e <USBD_StdEPReq+0x2b2>
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	3310      	adds	r3, #16
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	4413      	add	r3, r2
 800806a:	3304      	adds	r3, #4
 800806c:	e00b      	b.n	8008086 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	3304      	adds	r3, #4
 8008086:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <USBD_StdEPReq+0x2d8>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b80      	cmp	r3, #128	@ 0x80
 8008092:	d103      	bne.n	800809c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e00e      	b.n	80080ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f97b 	bl	800939c <USBD_LL_IsStallEP>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2201      	movs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e002      	b.n	80080ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2202      	movs	r2, #2
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc07 	bl	80088d4 <USBD_CtlSendData>
              break;
 80080c6:	e004      	b.n	80080d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fb85 	bl	80087da <USBD_CtlError>
              break;
 80080d0:	bf00      	nop
          }
          break;
 80080d2:	e004      	b.n	80080de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fb7f 	bl	80087da <USBD_CtlError>
          break;
 80080dc:	bf00      	nop
      }
      break;
 80080de:	e005      	b.n	80080ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fb79 	bl	80087da <USBD_CtlError>
      break;
 80080e8:	e000      	b.n	80080ec <USBD_StdEPReq+0x330>
      break;
 80080ea:	bf00      	nop
  }

  return ret;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	885b      	ldrh	r3, [r3, #2]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	2b0e      	cmp	r3, #14
 800811a:	f200 8152 	bhi.w	80083c2 <USBD_GetDescriptor+0x2ca>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <USBD_GetDescriptor+0x2c>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008195 	.word	0x08008195
 8008128:	080081ad 	.word	0x080081ad
 800812c:	080081ed 	.word	0x080081ed
 8008130:	080083c3 	.word	0x080083c3
 8008134:	080083c3 	.word	0x080083c3
 8008138:	08008363 	.word	0x08008363
 800813c:	0800838f 	.word	0x0800838f
 8008140:	080083c3 	.word	0x080083c3
 8008144:	080083c3 	.word	0x080083c3
 8008148:	080083c3 	.word	0x080083c3
 800814c:	080083c3 	.word	0x080083c3
 8008150:	080083c3 	.word	0x080083c3
 8008154:	080083c3 	.word	0x080083c3
 8008158:	080083c3 	.word	0x080083c3
 800815c:	08008161 	.word	0x08008161
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	7c12      	ldrb	r2, [r2, #16]
 8008178:	f107 0108 	add.w	r1, r7, #8
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
 8008180:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008182:	e126      	b.n	80083d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fb27 	bl	80087da <USBD_CtlError>
        err++;
 800818c:	7afb      	ldrb	r3, [r7, #11]
 800818e:	3301      	adds	r3, #1
 8008190:	72fb      	strb	r3, [r7, #11]
      break;
 8008192:	e11e      	b.n	80083d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
      break;
 80081aa:	e112      	b.n	80083d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	7c1b      	ldrb	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10d      	bne.n	80081d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081bc:	f107 0208 	add.w	r2, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3301      	adds	r3, #1
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081ce:	e100      	b.n	80083d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	f107 0208 	add.w	r2, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	2202      	movs	r2, #2
 80081e8:	701a      	strb	r2, [r3, #0]
      break;
 80081ea:	e0f2      	b.n	80083d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	885b      	ldrh	r3, [r3, #2]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	f200 80ac 	bhi.w	8008350 <USBD_GetDescriptor+0x258>
 80081f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <USBD_GetDescriptor+0x108>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008219 	.word	0x08008219
 8008204:	0800824d 	.word	0x0800824d
 8008208:	08008281 	.word	0x08008281
 800820c:	080082b5 	.word	0x080082b5
 8008210:	080082e9 	.word	0x080082e9
 8008214:	0800831d 	.word	0x0800831d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823a:	e091      	b.n	8008360 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 facb 	bl	80087da <USBD_CtlError>
            err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
          break;
 800824a:	e089      	b.n	8008360 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826e:	e077      	b.n	8008360 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fab1 	bl	80087da <USBD_CtlError>
            err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
          break;
 800827e:	e06f      	b.n	8008360 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a2:	e05d      	b.n	8008360 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa97 	bl	80087da <USBD_CtlError>
            err++;
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	3301      	adds	r3, #1
 80082b0:	72fb      	strb	r3, [r7, #11]
          break;
 80082b2:	e055      	b.n	8008360 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d6:	e043      	b.n	8008360 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa7d 	bl	80087da <USBD_CtlError>
            err++;
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	3301      	adds	r3, #1
 80082e4:	72fb      	strb	r3, [r7, #11]
          break;
 80082e6:	e03b      	b.n	8008360 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830a:	e029      	b.n	8008360 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa63 	bl	80087da <USBD_CtlError>
            err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
          break;
 800831a:	e021      	b.n	8008360 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	7c12      	ldrb	r2, [r2, #16]
 8008334:	f107 0108 	add.w	r1, r7, #8
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833e:	e00f      	b.n	8008360 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa49 	bl	80087da <USBD_CtlError>
            err++;
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	3301      	adds	r3, #1
 800834c:	72fb      	strb	r3, [r7, #11]
          break;
 800834e:	e007      	b.n	8008360 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa41 	bl	80087da <USBD_CtlError>
          err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800835e:	bf00      	nop
      }
      break;
 8008360:	e037      	b.n	80083d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7c1b      	ldrb	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008372:	f107 0208 	add.w	r2, r7, #8
 8008376:	4610      	mov	r0, r2
 8008378:	4798      	blx	r3
 800837a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800837c:	e029      	b.n	80083d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fa2a 	bl	80087da <USBD_CtlError>
        err++;
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	3301      	adds	r3, #1
 800838a:	72fb      	strb	r3, [r7, #11]
      break;
 800838c:	e021      	b.n	80083d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7c1b      	ldrb	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10d      	bne.n	80083b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	f107 0208 	add.w	r2, r7, #8
 80083a2:	4610      	mov	r0, r2
 80083a4:	4798      	blx	r3
 80083a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	2207      	movs	r2, #7
 80083ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083b0:	e00f      	b.n	80083d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa10 	bl	80087da <USBD_CtlError>
        err++;
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	3301      	adds	r3, #1
 80083be:	72fb      	strb	r3, [r7, #11]
      break;
 80083c0:	e007      	b.n	80083d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa08 	bl	80087da <USBD_CtlError>
      err++;
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	3301      	adds	r3, #1
 80083ce:	72fb      	strb	r3, [r7, #11]
      break;
 80083d0:	bf00      	nop
  }

  if (err != 0U)
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11e      	bne.n	8008416 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	88db      	ldrh	r3, [r3, #6]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d016      	beq.n	800840e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80083e0:	893b      	ldrh	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00e      	beq.n	8008404 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	88da      	ldrh	r2, [r3, #6]
 80083ea:	893b      	ldrh	r3, [r7, #8]
 80083ec:	4293      	cmp	r3, r2
 80083ee:	bf28      	it	cs
 80083f0:	4613      	movcs	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083f6:	893b      	ldrh	r3, [r7, #8]
 80083f8:	461a      	mov	r2, r3
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa69 	bl	80088d4 <USBD_CtlSendData>
 8008402:	e009      	b.n	8008418 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f9e7 	bl	80087da <USBD_CtlError>
 800840c:	e004      	b.n	8008418 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 faba 	bl	8008988 <USBD_CtlSendStatus>
 8008414:	e000      	b.n	8008418 <USBD_GetDescriptor+0x320>
    return;
 8008416:	bf00      	nop
  }
}
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	889b      	ldrh	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d131      	bne.n	8008496 <USBD_SetAddress+0x76>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	88db      	ldrh	r3, [r3, #6]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d12d      	bne.n	8008496 <USBD_SetAddress+0x76>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	885b      	ldrh	r3, [r3, #2]
 800843e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008440:	d829      	bhi.n	8008496 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b03      	cmp	r3, #3
 8008458:	d104      	bne.n	8008464 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f9bc 	bl	80087da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	e01d      	b.n	80084a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 ffbf 	bl	80093f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa86 	bl	8008988 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848a:	e009      	b.n	80084a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008494:	e004      	b.n	80084a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f99e 	bl	80087da <USBD_CtlError>
  }
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	885b      	ldrh	r3, [r3, #2]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	4b4e      	ldr	r3, [pc, #312]	@ (80085f8 <USBD_SetConfig+0x150>)
 80084be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084c0:	4b4d      	ldr	r3, [pc, #308]	@ (80085f8 <USBD_SetConfig+0x150>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d905      	bls.n	80084d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f985 	bl	80087da <USBD_CtlError>
    return USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e08c      	b.n	80085ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d002      	beq.n	80084e6 <USBD_SetConfig+0x3e>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d029      	beq.n	8008538 <USBD_SetConfig+0x90>
 80084e4:	e075      	b.n	80085d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084e6:	4b44      	ldr	r3, [pc, #272]	@ (80085f8 <USBD_SetConfig+0x150>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d020      	beq.n	8008530 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084ee:	4b42      	ldr	r3, [pc, #264]	@ (80085f8 <USBD_SetConfig+0x150>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084f8:	4b3f      	ldr	r3, [pc, #252]	@ (80085f8 <USBD_SetConfig+0x150>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fe ffb9 	bl	8007476 <USBD_SetClassConfig>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f962 	bl	80087da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800851e:	e065      	b.n	80085ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fa31 	bl	8008988 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2203      	movs	r2, #3
 800852a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800852e:	e05d      	b.n	80085ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fa29 	bl	8008988 <USBD_CtlSendStatus>
      break;
 8008536:	e059      	b.n	80085ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008538:	4b2f      	ldr	r3, [pc, #188]	@ (80085f8 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d112      	bne.n	8008566 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008548:	4b2b      	ldr	r3, [pc, #172]	@ (80085f8 <USBD_SetConfig+0x150>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008552:	4b29      	ldr	r3, [pc, #164]	@ (80085f8 <USBD_SetConfig+0x150>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fe ffa8 	bl	80074ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa12 	bl	8008988 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008564:	e042      	b.n	80085ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008566:	4b24      	ldr	r3, [pc, #144]	@ (80085f8 <USBD_SetConfig+0x150>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d02a      	beq.n	80085ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe ff96 	bl	80074ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008582:	4b1d      	ldr	r3, [pc, #116]	@ (80085f8 <USBD_SetConfig+0x150>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800858c:	4b1a      	ldr	r3, [pc, #104]	@ (80085f8 <USBD_SetConfig+0x150>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fe ff6f 	bl	8007476 <USBD_SetClassConfig>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f918 	bl	80087da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe ff7b 	bl	80074ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80085c0:	e014      	b.n	80085ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f9e0 	bl	8008988 <USBD_CtlSendStatus>
      break;
 80085c8:	e010      	b.n	80085ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f9dc 	bl	8008988 <USBD_CtlSendStatus>
      break;
 80085d0:	e00c      	b.n	80085ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f900 	bl	80087da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085da:	4b07      	ldr	r3, [pc, #28]	@ (80085f8 <USBD_SetConfig+0x150>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fe ff64 	bl	80074ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ea:	bf00      	nop
  }

  return ret;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000218 	.word	0x20000218

080085fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	88db      	ldrh	r3, [r3, #6]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d004      	beq.n	8008618 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f8e2 	bl	80087da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008616:	e023      	b.n	8008660 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	dc02      	bgt.n	800862a <USBD_GetConfig+0x2e>
 8008624:	2b00      	cmp	r3, #0
 8008626:	dc03      	bgt.n	8008630 <USBD_GetConfig+0x34>
 8008628:	e015      	b.n	8008656 <USBD_GetConfig+0x5a>
 800862a:	2b03      	cmp	r3, #3
 800862c:	d00b      	beq.n	8008646 <USBD_GetConfig+0x4a>
 800862e:	e012      	b.n	8008656 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3308      	adds	r3, #8
 800863a:	2201      	movs	r2, #1
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f948 	bl	80088d4 <USBD_CtlSendData>
        break;
 8008644:	e00c      	b.n	8008660 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3304      	adds	r3, #4
 800864a:	2201      	movs	r2, #1
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f940 	bl	80088d4 <USBD_CtlSendData>
        break;
 8008654:	e004      	b.n	8008660 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f8be 	bl	80087da <USBD_CtlError>
        break;
 800865e:	bf00      	nop
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	2b02      	cmp	r3, #2
 800867e:	d81e      	bhi.n	80086be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d004      	beq.n	8008692 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8a5 	bl	80087da <USBD_CtlError>
        break;
 8008690:	e01a      	b.n	80086c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f043 0202 	orr.w	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	330c      	adds	r3, #12
 80086b2:	2202      	movs	r2, #2
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f90c 	bl	80088d4 <USBD_CtlSendData>
      break;
 80086bc:	e004      	b.n	80086c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f88a 	bl	80087da <USBD_CtlError>
      break;
 80086c6:	bf00      	nop
  }
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d107      	bne.n	80086f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f94c 	bl	8008988 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086f0:	e013      	b.n	800871a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d10b      	bne.n	8008712 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	889b      	ldrh	r3, [r3, #4]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	b29b      	uxth	r3, r3
 8008702:	b2da      	uxtb	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f93c 	bl	8008988 <USBD_CtlSendStatus>
}
 8008710:	e003      	b.n	800871a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f860 	bl	80087da <USBD_CtlError>
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008732:	b2db      	uxtb	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	2b02      	cmp	r3, #2
 8008738:	d80b      	bhi.n	8008752 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10c      	bne.n	800875c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f91c 	bl	8008988 <USBD_CtlSendStatus>
      }
      break;
 8008750:	e004      	b.n	800875c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f840 	bl	80087da <USBD_CtlError>
      break;
 800875a:	e000      	b.n	800875e <USBD_ClrFeature+0x3c>
      break;
 800875c:	bf00      	nop
  }
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff fa16 	bl	8007bc2 <SWAPBYTE>
 8008796:	4603      	mov	r3, r0
 8008798:	461a      	mov	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff fa09 	bl	8007bc2 <SWAPBYTE>
 80087b0:	4603      	mov	r3, r0
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff f9fc 	bl	8007bc2 <SWAPBYTE>
 80087ca:	4603      	mov	r3, r0
 80087cc:	461a      	mov	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	80da      	strh	r2, [r3, #6]
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087e4:	2180      	movs	r1, #128	@ 0x80
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fd6c 	bl	80092c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fd68 	bl	80092c4 <USBD_LL_StallEP>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d042      	beq.n	8008898 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008816:	6938      	ldr	r0, [r7, #16]
 8008818:	f000 f842 	bl	80088a0 <USBD_GetLen>
 800881c:	4603      	mov	r3, r0
 800881e:	3301      	adds	r3, #1
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008826:	d808      	bhi.n	800883a <USBD_GetString+0x3e>
 8008828:	6938      	ldr	r0, [r7, #16]
 800882a:	f000 f839 	bl	80088a0 <USBD_GetLen>
 800882e:	4603      	mov	r3, r0
 8008830:	3301      	adds	r3, #1
 8008832:	b29b      	uxth	r3, r3
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	e001      	b.n	800883e <USBD_GetString+0x42>
 800883a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	4413      	add	r3, r2
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
  idx++;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	3301      	adds	r3, #1
 8008852:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4413      	add	r3, r2
 800885a:	2203      	movs	r2, #3
 800885c:	701a      	strb	r2, [r3, #0]
  idx++;
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	3301      	adds	r3, #1
 8008862:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008864:	e013      	b.n	800888e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	4413      	add	r3, r2
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	3301      	adds	r3, #1
 8008876:	613b      	str	r3, [r7, #16]
    idx++;
 8008878:	7dfb      	ldrb	r3, [r7, #23]
 800887a:	3301      	adds	r3, #1
 800887c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	4413      	add	r3, r2
 8008884:	2200      	movs	r2, #0
 8008886:	701a      	strb	r2, [r3, #0]
    idx++;
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	3301      	adds	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e7      	bne.n	8008866 <USBD_GetString+0x6a>
 8008896:	e000      	b.n	800889a <USBD_GetString+0x9e>
    return;
 8008898:	bf00      	nop
  }
}
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088b0:	e005      	b.n	80088be <USBD_GetLen+0x1e>
  {
    len++;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	3301      	adds	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3301      	adds	r3, #1
 80088bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1f5      	bne.n	80088b2 <USBD_GetLen+0x12>
  }

  return len;
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	2100      	movs	r1, #0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fdb0 	bl	8009460 <USBD_LL_Transmit>

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 fd9f 	bl	8009460 <USBD_LL_Transmit>

  return USBD_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2203      	movs	r2, #3
 800893c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	2100      	movs	r1, #0
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fdba 	bl	80094d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	2100      	movs	r1, #0
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 fda9 	bl	80094d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2204      	movs	r2, #4
 8008994:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008998:	2300      	movs	r3, #0
 800899a:	2200      	movs	r2, #0
 800899c:	2100      	movs	r1, #0
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fd5e 	bl	8009460 <USBD_LL_Transmit>

  return USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2205      	movs	r2, #5
 80089ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089be:	2300      	movs	r3, #0
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fd83 	bl	80094d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089d8:	2200      	movs	r2, #0
 80089da:	4912      	ldr	r1, [pc, #72]	@ (8008a24 <MX_USB_DEVICE_Init+0x50>)
 80089dc:	4812      	ldr	r0, [pc, #72]	@ (8008a28 <MX_USB_DEVICE_Init+0x54>)
 80089de:	f7fe fccd 	bl	800737c <USBD_Init>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089e8:	f7f8 f812 	bl	8000a10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089ec:	490f      	ldr	r1, [pc, #60]	@ (8008a2c <MX_USB_DEVICE_Init+0x58>)
 80089ee:	480e      	ldr	r0, [pc, #56]	@ (8008a28 <MX_USB_DEVICE_Init+0x54>)
 80089f0:	f7fe fcf4 	bl	80073dc <USBD_RegisterClass>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089fa:	f7f8 f809 	bl	8000a10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089fe:	490c      	ldr	r1, [pc, #48]	@ (8008a30 <MX_USB_DEVICE_Init+0x5c>)
 8008a00:	4809      	ldr	r0, [pc, #36]	@ (8008a28 <MX_USB_DEVICE_Init+0x54>)
 8008a02:	f7fe fc2b 	bl	800725c <USBD_CDC_RegisterInterface>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a0c:	f7f8 f800 	bl	8000a10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a10:	4805      	ldr	r0, [pc, #20]	@ (8008a28 <MX_USB_DEVICE_Init+0x54>)
 8008a12:	f7fe fd19 	bl	8007448 <USBD_Start>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a1c:	f7f7 fff8 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a20:	bf00      	nop
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200000ac 	.word	0x200000ac
 8008a28:	2000021c 	.word	0x2000021c
 8008a2c:	20000018 	.word	0x20000018
 8008a30:	20000098 	.word	0x20000098

08008a34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4905      	ldr	r1, [pc, #20]	@ (8008a50 <CDC_Init_FS+0x1c>)
 8008a3c:	4805      	ldr	r0, [pc, #20]	@ (8008a54 <CDC_Init_FS+0x20>)
 8008a3e:	f7fe fc27 	bl	8007290 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a42:	4905      	ldr	r1, [pc, #20]	@ (8008a58 <CDC_Init_FS+0x24>)
 8008a44:	4803      	ldr	r0, [pc, #12]	@ (8008a54 <CDC_Init_FS+0x20>)
 8008a46:	f7fe fc45 	bl	80072d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000cf8 	.word	0x20000cf8
 8008a54:	2000021c 	.word	0x2000021c
 8008a58:	200004f8 	.word	0x200004f8

08008a5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	6039      	str	r1, [r7, #0]
 8008a76:	71fb      	strb	r3, [r7, #7]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	2b23      	cmp	r3, #35	@ 0x23
 8008a80:	d84a      	bhi.n	8008b18 <CDC_Control_FS+0xac>
 8008a82:	a201      	add	r2, pc, #4	@ (adr r2, 8008a88 <CDC_Control_FS+0x1c>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008b19 	.word	0x08008b19
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b19 	.word	0x08008b19
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008b19 	.word	0x08008b19
 8008a9c:	08008b19 	.word	0x08008b19
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b19 	.word	0x08008b19
 8008aa8:	08008b19 	.word	0x08008b19
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	08008b19 	.word	0x08008b19
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008b19 	.word	0x08008b19
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b19 	.word	0x08008b19
 8008ac8:	08008b19 	.word	0x08008b19
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b19 	.word	0x08008b19
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b19 	.word	0x08008b19
 8008adc:	08008b19 	.word	0x08008b19
 8008ae0:	08008b19 	.word	0x08008b19
 8008ae4:	08008b19 	.word	0x08008b19
 8008ae8:	08008b19 	.word	0x08008b19
 8008aec:	08008b19 	.word	0x08008b19
 8008af0:	08008b19 	.word	0x08008b19
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b19 	.word	0x08008b19
 8008afc:	08008b19 	.word	0x08008b19
 8008b00:	08008b19 	.word	0x08008b19
 8008b04:	08008b19 	.word	0x08008b19
 8008b08:	08008b19 	.word	0x08008b19
 8008b0c:	08008b19 	.word	0x08008b19
 8008b10:	08008b19 	.word	0x08008b19
 8008b14:	08008b19 	.word	0x08008b19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b18:	bf00      	nop
  }

  return (USBD_OK);
 8008b1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4805      	ldr	r0, [pc, #20]	@ (8008b4c <CDC_Receive_FS+0x24>)
 8008b36:	f7fe fbcd 	bl	80072d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b3a:	4804      	ldr	r0, [pc, #16]	@ (8008b4c <CDC_Receive_FS+0x24>)
 8008b3c:	f7fe fbe8 	bl	8007310 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	2000021c 	.word	0x2000021c

08008b50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2212      	movs	r2, #18
 8008b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b86:	4b03      	ldr	r3, [pc, #12]	@ (8008b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	200000cc 	.word	0x200000cc

08008b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008baa:	4b03      	ldr	r3, [pc, #12]	@ (8008bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	200000ec 	.word	0x200000ec

08008bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d105      	bne.n	8008bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4907      	ldr	r1, [pc, #28]	@ (8008bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bd2:	4808      	ldr	r0, [pc, #32]	@ (8008bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bd4:	f7ff fe12 	bl	80087fc <USBD_GetString>
 8008bd8:	e004      	b.n	8008be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4904      	ldr	r1, [pc, #16]	@ (8008bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bde:	4805      	ldr	r0, [pc, #20]	@ (8008bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008be0:	f7ff fe0c 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be4:	4b02      	ldr	r3, [pc, #8]	@ (8008bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200014f8 	.word	0x200014f8
 8008bf4:	080096b0 	.word	0x080096b0

08008bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6039      	str	r1, [r7, #0]
 8008c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	4904      	ldr	r1, [pc, #16]	@ (8008c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c08:	4804      	ldr	r0, [pc, #16]	@ (8008c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c0a:	f7ff fdf7 	bl	80087fc <USBD_GetString>
  return USBD_StrDesc;
 8008c0e:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	200014f8 	.word	0x200014f8
 8008c1c:	080096c4 	.word	0x080096c4

08008c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	221a      	movs	r2, #26
 8008c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c32:	f000 f855 	bl	8008ce0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c36:	4b02      	ldr	r3, [pc, #8]	@ (8008c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	200000f0 	.word	0x200000f0

08008c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4907      	ldr	r1, [pc, #28]	@ (8008c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c5a:	4808      	ldr	r0, [pc, #32]	@ (8008c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c5c:	f7ff fdce 	bl	80087fc <USBD_GetString>
 8008c60:	e004      	b.n	8008c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4904      	ldr	r1, [pc, #16]	@ (8008c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c66:	4805      	ldr	r0, [pc, #20]	@ (8008c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c68:	f7ff fdc8 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c6c:	4b02      	ldr	r3, [pc, #8]	@ (8008c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	200014f8 	.word	0x200014f8
 8008c7c:	080096d8 	.word	0x080096d8

08008c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	6039      	str	r1, [r7, #0]
 8008c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d105      	bne.n	8008c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	4907      	ldr	r1, [pc, #28]	@ (8008cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c96:	4808      	ldr	r0, [pc, #32]	@ (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c98:	f7ff fdb0 	bl	80087fc <USBD_GetString>
 8008c9c:	e004      	b.n	8008ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4904      	ldr	r1, [pc, #16]	@ (8008cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ca2:	4805      	ldr	r0, [pc, #20]	@ (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ca4:	f7ff fdaa 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ca8:	4b02      	ldr	r3, [pc, #8]	@ (8008cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	200014f8 	.word	0x200014f8
 8008cb8:	080096e4 	.word	0x080096e4

08008cbc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	6039      	str	r1, [r7, #0]
 8008cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	220c      	movs	r2, #12
 8008ccc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008cce:	4b03      	ldr	r3, [pc, #12]	@ (8008cdc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	200000e0 	.word	0x200000e0

08008ce0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d24 <Get_SerialNum+0x44>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cec:	4b0e      	ldr	r3, [pc, #56]	@ (8008d28 <Get_SerialNum+0x48>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <Get_SerialNum+0x4c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d06:	2208      	movs	r2, #8
 8008d08:	4909      	ldr	r1, [pc, #36]	@ (8008d30 <Get_SerialNum+0x50>)
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f814 	bl	8008d38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d10:	2204      	movs	r2, #4
 8008d12:	4908      	ldr	r1, [pc, #32]	@ (8008d34 <Get_SerialNum+0x54>)
 8008d14:	68b8      	ldr	r0, [r7, #8]
 8008d16:	f000 f80f 	bl	8008d38 <IntToUnicode>
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	1fff7590 	.word	0x1fff7590
 8008d28:	1fff7594 	.word	0x1fff7594
 8008d2c:	1fff7598 	.word	0x1fff7598
 8008d30:	200000f2 	.word	0x200000f2
 8008d34:	20000102 	.word	0x20000102

08008d38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]
 8008d4e:	e027      	b.n	8008da0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	0f1b      	lsrs	r3, r3, #28
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d80b      	bhi.n	8008d70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0f1b      	lsrs	r3, r3, #28
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4619      	mov	r1, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	440b      	add	r3, r1
 8008d68:	3230      	adds	r2, #48	@ 0x30
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	e00a      	b.n	8008d86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	0f1b      	lsrs	r3, r3, #28
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	440b      	add	r3, r1
 8008d80:	3237      	adds	r2, #55	@ 0x37
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	3301      	adds	r3, #1
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	4413      	add	r3, r2
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	75fb      	strb	r3, [r7, #23]
 8008da0:	7dfa      	ldrb	r2, [r7, #23]
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3d3      	bcc.n	8008d50 <IntToUnicode+0x18>
  }
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
	...

08008db8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b0ac      	sub	sp, #176	@ 0xb0
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008dd0:	f107 0314 	add.w	r3, r7, #20
 8008dd4:	2288      	movs	r2, #136	@ 0x88
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fc31 	bl	8009640 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008de6:	d173      	bne.n	8008ed0 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008dec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008dee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008df2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008df6:	2301      	movs	r3, #1
 8008df8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008dfe:	2318      	movs	r3, #24
 8008e00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008e02:	2307      	movs	r3, #7
 8008e04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008e06:	2302      	movs	r3, #2
 8008e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008e0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008e12:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e14:	f107 0314 	add.w	r3, r7, #20
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fa faad 	bl	8003378 <HAL_RCCEx_PeriphCLKConfig>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008e24:	f7f7 fdf4 	bl	8000a10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e28:	4b2b      	ldr	r3, [pc, #172]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e34:	4b28      	ldr	r3, [pc, #160]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e40:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e54:	2303      	movs	r3, #3
 8008e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008e64:	4619      	mov	r1, r3
 8008e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e6a:	f7f8 f8bb 	bl	8000fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e72:	4a19      	ldr	r2, [pc, #100]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e7a:	4b17      	ldr	r3, [pc, #92]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e86:	4b14      	ldr	r3, [pc, #80]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d114      	bne.n	8008ebc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e92:	4b11      	ldr	r3, [pc, #68]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e96:	4a10      	ldr	r2, [pc, #64]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ea6:	60bb      	str	r3, [r7, #8]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008eaa:	f7f9 fc57 	bl	800275c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb2:	4a09      	ldr	r2, [pc, #36]	@ (8008ed8 <HAL_PCD_MspInit+0x120>)
 8008eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008eba:	e001      	b.n	8008ec0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008ebc:	f7f9 fc4e 	bl	800275c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	2043      	movs	r0, #67	@ 0x43
 8008ec6:	f7f8 f856 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008eca:	2043      	movs	r0, #67	@ 0x43
 8008ecc:	f7f8 f86f 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ed0:	bf00      	nop
 8008ed2:	37b0      	adds	r7, #176	@ 0xb0
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40021000 	.word	0x40021000

08008edc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fe faf5 	bl	80074e2 <USBD_LL_SetupStage>
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	440b      	add	r3, r1
 8008f20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f7fe fb2f 	bl	800758c <USBD_LL_DataOutStage>
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	440b      	add	r3, r1
 8008f56:	3320      	adds	r3, #32
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	f7fe fbc8 	bl	80076f2 <USBD_LL_DataInStage>
}
 8008f62:	bf00      	nop
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe fd02 	bl	8007982 <USBD_LL_SOF>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	79db      	ldrb	r3, [r3, #7]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d001      	beq.n	8008f9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f9a:	f7f7 fd39 	bl	8000a10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fa4:	7bfa      	ldrb	r2, [r7, #15]
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fca6 	bl	80078fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fc4e 	bl	8007856 <USBD_LL_Reset>
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	6812      	ldr	r2, [r2, #0]
 8008fda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fc95 	bl	800791a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	7adb      	ldrb	r3, [r3, #11]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ff8:	4b04      	ldr	r3, [pc, #16]	@ (800900c <HAL_PCD_SuspendCallback+0x48>)
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	4a03      	ldr	r2, [pc, #12]	@ (800900c <HAL_PCD_SuspendCallback+0x48>)
 8008ffe:	f043 0306 	orr.w	r3, r3, #6
 8009002:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	e000ed00 	.word	0xe000ed00

08009010 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7adb      	ldrb	r3, [r3, #11]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d007      	beq.n	8009048 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009038:	4b08      	ldr	r3, [pc, #32]	@ (800905c <HAL_PCD_ResumeCallback+0x4c>)
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	4a07      	ldr	r2, [pc, #28]	@ (800905c <HAL_PCD_ResumeCallback+0x4c>)
 800903e:	f023 0306 	bic.w	r3, r3, #6
 8009042:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009044:	f000 faf6 	bl	8009634 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fc7f 	bl	8007952 <USBD_LL_Resume>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	e000ed00 	.word	0xe000ed00

08009060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fcd5 	bl	8007a26 <USBD_LL_IsoOUTIncomplete>
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fc91 	bl	80079c2 <USBD_LL_IsoINIncomplete>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fce7 	bl	8007a8a <USBD_LL_DevConnected>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fce4 	bl	8007aa0 <USBD_LL_DevDisconnected>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d13c      	bne.n	800916a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090f0:	4a20      	ldr	r2, [pc, #128]	@ (8009174 <USBD_LL_Init+0x94>)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009174 <USBD_LL_Init+0x94>)
 80090fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009100:	4b1c      	ldr	r3, [pc, #112]	@ (8009174 <USBD_LL_Init+0x94>)
 8009102:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009108:	4b1a      	ldr	r3, [pc, #104]	@ (8009174 <USBD_LL_Init+0x94>)
 800910a:	2206      	movs	r2, #6
 800910c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800910e:	4b19      	ldr	r3, [pc, #100]	@ (8009174 <USBD_LL_Init+0x94>)
 8009110:	2202      	movs	r2, #2
 8009112:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009114:	4b17      	ldr	r3, [pc, #92]	@ (8009174 <USBD_LL_Init+0x94>)
 8009116:	2202      	movs	r2, #2
 8009118:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800911a:	4b16      	ldr	r3, [pc, #88]	@ (8009174 <USBD_LL_Init+0x94>)
 800911c:	2200      	movs	r2, #0
 800911e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009120:	4b14      	ldr	r3, [pc, #80]	@ (8009174 <USBD_LL_Init+0x94>)
 8009122:	2200      	movs	r2, #0
 8009124:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009126:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <USBD_LL_Init+0x94>)
 8009128:	2200      	movs	r2, #0
 800912a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800912c:	4b11      	ldr	r3, [pc, #68]	@ (8009174 <USBD_LL_Init+0x94>)
 800912e:	2200      	movs	r2, #0
 8009130:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009132:	4b10      	ldr	r3, [pc, #64]	@ (8009174 <USBD_LL_Init+0x94>)
 8009134:	2200      	movs	r2, #0
 8009136:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009138:	4b0e      	ldr	r3, [pc, #56]	@ (8009174 <USBD_LL_Init+0x94>)
 800913a:	2200      	movs	r2, #0
 800913c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800913e:	480d      	ldr	r0, [pc, #52]	@ (8009174 <USBD_LL_Init+0x94>)
 8009140:	f7f8 f912 	bl	8001368 <HAL_PCD_Init>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800914a:	f7f7 fc61 	bl	8000a10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800914e:	2180      	movs	r1, #128	@ 0x80
 8009150:	4808      	ldr	r0, [pc, #32]	@ (8009174 <USBD_LL_Init+0x94>)
 8009152:	f7f9 fa6a 	bl	800262a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009156:	2240      	movs	r2, #64	@ 0x40
 8009158:	2100      	movs	r1, #0
 800915a:	4806      	ldr	r0, [pc, #24]	@ (8009174 <USBD_LL_Init+0x94>)
 800915c:	f7f9 fa1e 	bl	800259c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009160:	2280      	movs	r2, #128	@ 0x80
 8009162:	2101      	movs	r1, #1
 8009164:	4803      	ldr	r0, [pc, #12]	@ (8009174 <USBD_LL_Init+0x94>)
 8009166:	f7f9 fa19 	bl	800259c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200016f8 	.word	0x200016f8

08009178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800918e:	4618      	mov	r0, r3
 8009190:	f7f8 f9f9 	bl	8001586 <HAL_PCD_Start>
 8009194:	4603      	mov	r3, r0
 8009196:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b03      	cmp	r3, #3
 800919c:	d816      	bhi.n	80091cc <USBD_LL_Start+0x54>
 800919e:	a201      	add	r2, pc, #4	@ (adr r2, 80091a4 <USBD_LL_Start+0x2c>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091b5 	.word	0x080091b5
 80091a8:	080091bb 	.word	0x080091bb
 80091ac:	080091c1 	.word	0x080091c1
 80091b0:	080091c7 	.word	0x080091c7
    case HAL_OK :
      usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
    break;
 80091b8:	e00b      	b.n	80091d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ba:	2303      	movs	r3, #3
 80091bc:	73fb      	strb	r3, [r7, #15]
    break;
 80091be:	e008      	b.n	80091d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091c0:	2301      	movs	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
    break;
 80091c4:	e005      	b.n	80091d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ca:	e002      	b.n	80091d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	bf00      	nop
  }
  return usb_status;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	461a      	mov	r2, r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	70fb      	strb	r3, [r7, #3]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70bb      	strb	r3, [r7, #2]
 80091f2:	4613      	mov	r3, r2
 80091f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009204:	78bb      	ldrb	r3, [r7, #2]
 8009206:	883a      	ldrh	r2, [r7, #0]
 8009208:	78f9      	ldrb	r1, [r7, #3]
 800920a:	f7f8 fea5 	bl	8001f58 <HAL_PCD_EP_Open>
 800920e:	4603      	mov	r3, r0
 8009210:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d817      	bhi.n	8009248 <USBD_LL_OpenEP+0x6c>
 8009218:	a201      	add	r2, pc, #4	@ (adr r2, 8009220 <USBD_LL_OpenEP+0x44>)
 800921a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921e:	bf00      	nop
 8009220:	08009231 	.word	0x08009231
 8009224:	08009237 	.word	0x08009237
 8009228:	0800923d 	.word	0x0800923d
 800922c:	08009243 	.word	0x08009243
    case HAL_OK :
      usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73fb      	strb	r3, [r7, #15]
    break;
 8009234:	e00b      	b.n	800924e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009236:	2303      	movs	r3, #3
 8009238:	73fb      	strb	r3, [r7, #15]
    break;
 800923a:	e008      	b.n	800924e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800923c:	2301      	movs	r3, #1
 800923e:	73fb      	strb	r3, [r7, #15]
    break;
 8009240:	e005      	b.n	800924e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009242:	2303      	movs	r3, #3
 8009244:	73fb      	strb	r3, [r7, #15]
    break;
 8009246:	e002      	b.n	800924e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009248:	2303      	movs	r3, #3
 800924a:	73fb      	strb	r3, [r7, #15]
    break;
 800924c:	bf00      	nop
  }
  return usb_status;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f7f8 fed8 	bl	800202c <HAL_PCD_EP_Close>
 800927c:	4603      	mov	r3, r0
 800927e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	2b03      	cmp	r3, #3
 8009284:	d816      	bhi.n	80092b4 <USBD_LL_CloseEP+0x5c>
 8009286:	a201      	add	r2, pc, #4	@ (adr r2, 800928c <USBD_LL_CloseEP+0x34>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	0800929d 	.word	0x0800929d
 8009290:	080092a3 	.word	0x080092a3
 8009294:	080092a9 	.word	0x080092a9
 8009298:	080092af 	.word	0x080092af
    case HAL_OK :
      usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
    break;
 80092a0:	e00b      	b.n	80092ba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092a2:	2303      	movs	r3, #3
 80092a4:	73fb      	strb	r3, [r7, #15]
    break;
 80092a6:	e008      	b.n	80092ba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092a8:	2301      	movs	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]
    break;
 80092ac:	e005      	b.n	80092ba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092ae:	2303      	movs	r3, #3
 80092b0:	73fb      	strb	r3, [r7, #15]
    break;
 80092b2:	e002      	b.n	80092ba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	73fb      	strb	r3, [r7, #15]
    break;
 80092b8:	bf00      	nop
  }
  return usb_status;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092de:	78fa      	ldrb	r2, [r7, #3]
 80092e0:	4611      	mov	r1, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7f8 ff67 	bl	80021b6 <HAL_PCD_EP_SetStall>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d816      	bhi.n	8009320 <USBD_LL_StallEP+0x5c>
 80092f2:	a201      	add	r2, pc, #4	@ (adr r2, 80092f8 <USBD_LL_StallEP+0x34>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009309 	.word	0x08009309
 80092fc:	0800930f 	.word	0x0800930f
 8009300:	08009315 	.word	0x08009315
 8009304:	0800931b 	.word	0x0800931b
    case HAL_OK :
      usb_status = USBD_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
    break;
 800930c:	e00b      	b.n	8009326 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800930e:	2303      	movs	r3, #3
 8009310:	73fb      	strb	r3, [r7, #15]
    break;
 8009312:	e008      	b.n	8009326 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009314:	2301      	movs	r3, #1
 8009316:	73fb      	strb	r3, [r7, #15]
    break;
 8009318:	e005      	b.n	8009326 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800931a:	2303      	movs	r3, #3
 800931c:	73fb      	strb	r3, [r7, #15]
    break;
 800931e:	e002      	b.n	8009326 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	73fb      	strb	r3, [r7, #15]
    break;
 8009324:	bf00      	nop
  }
  return usb_status;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7f8 ff93 	bl	800227a <HAL_PCD_EP_ClrStall>
 8009354:	4603      	mov	r3, r0
 8009356:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b03      	cmp	r3, #3
 800935c:	d816      	bhi.n	800938c <USBD_LL_ClearStallEP+0x5c>
 800935e:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <USBD_LL_ClearStallEP+0x34>)
 8009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009364:	08009375 	.word	0x08009375
 8009368:	0800937b 	.word	0x0800937b
 800936c:	08009381 	.word	0x08009381
 8009370:	08009387 	.word	0x08009387
    case HAL_OK :
      usb_status = USBD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
    break;
 8009378:	e00b      	b.n	8009392 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800937a:	2303      	movs	r3, #3
 800937c:	73fb      	strb	r3, [r7, #15]
    break;
 800937e:	e008      	b.n	8009392 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
    break;
 8009384:	e005      	b.n	8009392 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
    break;
 800938a:	e002      	b.n	8009392 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	bf00      	nop
  }
  return usb_status;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da0b      	bge.n	80093d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	3316      	adds	r3, #22
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	e00b      	b.n	80093e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80093e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7f8 fd7c 	bl	8001f10 <HAL_PCD_SetAddress>
 8009418:	4603      	mov	r3, r0
 800941a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b03      	cmp	r3, #3
 8009420:	d816      	bhi.n	8009450 <USBD_LL_SetUSBAddress+0x5c>
 8009422:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <USBD_LL_SetUSBAddress+0x34>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009439 	.word	0x08009439
 800942c:	0800943f 	.word	0x0800943f
 8009430:	08009445 	.word	0x08009445
 8009434:	0800944b 	.word	0x0800944b
    case HAL_OK :
      usb_status = USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
    break;
 800943c:	e00b      	b.n	8009456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800943e:	2303      	movs	r3, #3
 8009440:	73fb      	strb	r3, [r7, #15]
    break;
 8009442:	e008      	b.n	8009456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009444:	2301      	movs	r3, #1
 8009446:	73fb      	strb	r3, [r7, #15]
    break;
 8009448:	e005      	b.n	8009456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800944a:	2303      	movs	r3, #3
 800944c:	73fb      	strb	r3, [r7, #15]
    break;
 800944e:	e002      	b.n	8009456 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009450:	2303      	movs	r3, #3
 8009452:	73fb      	strb	r3, [r7, #15]
    break;
 8009454:	bf00      	nop
  }
  return usb_status;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	607a      	str	r2, [r7, #4]
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	460b      	mov	r3, r1
 800946e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800947e:	7af9      	ldrb	r1, [r7, #11]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	f7f8 fe66 	bl	8002154 <HAL_PCD_EP_Transmit>
 8009488:	4603      	mov	r3, r0
 800948a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800948c:	7dbb      	ldrb	r3, [r7, #22]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d816      	bhi.n	80094c0 <USBD_LL_Transmit+0x60>
 8009492:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <USBD_LL_Transmit+0x38>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094a9 	.word	0x080094a9
 800949c:	080094af 	.word	0x080094af
 80094a0:	080094b5 	.word	0x080094b5
 80094a4:	080094bb 	.word	0x080094bb
    case HAL_OK :
      usb_status = USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]
    break;
 80094ac:	e00b      	b.n	80094c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094ae:	2303      	movs	r3, #3
 80094b0:	75fb      	strb	r3, [r7, #23]
    break;
 80094b2:	e008      	b.n	80094c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094b4:	2301      	movs	r3, #1
 80094b6:	75fb      	strb	r3, [r7, #23]
    break;
 80094b8:	e005      	b.n	80094c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	75fb      	strb	r3, [r7, #23]
    break;
 80094be:	e002      	b.n	80094c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	75fb      	strb	r3, [r7, #23]
    break;
 80094c4:	bf00      	nop
  }
  return usb_status;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	460b      	mov	r3, r1
 80094de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094ee:	7af9      	ldrb	r1, [r7, #11]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	f7f8 fde4 	bl	80020c0 <HAL_PCD_EP_Receive>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80094fc:	7dbb      	ldrb	r3, [r7, #22]
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d816      	bhi.n	8009530 <USBD_LL_PrepareReceive+0x60>
 8009502:	a201      	add	r2, pc, #4	@ (adr r2, 8009508 <USBD_LL_PrepareReceive+0x38>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	08009519 	.word	0x08009519
 800950c:	0800951f 	.word	0x0800951f
 8009510:	08009525 	.word	0x08009525
 8009514:	0800952b 	.word	0x0800952b
    case HAL_OK :
      usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	75fb      	strb	r3, [r7, #23]
    break;
 800951c:	e00b      	b.n	8009536 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800951e:	2303      	movs	r3, #3
 8009520:	75fb      	strb	r3, [r7, #23]
    break;
 8009522:	e008      	b.n	8009536 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009524:	2301      	movs	r3, #1
 8009526:	75fb      	strb	r3, [r7, #23]
    break;
 8009528:	e005      	b.n	8009536 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800952a:	2303      	movs	r3, #3
 800952c:	75fb      	strb	r3, [r7, #23]
    break;
 800952e:	e002      	b.n	8009536 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009530:	2303      	movs	r3, #3
 8009532:	75fb      	strb	r3, [r7, #23]
    break;
 8009534:	bf00      	nop
  }
  return usb_status;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7f8 fde4 	bl	8002124 <HAL_PCD_EP_GetRxCount>
 800955c:	4603      	mov	r3, r0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_PCDEx_LPM_Callback+0x18>
 800957a:	2b01      	cmp	r3, #1
 800957c:	d01f      	beq.n	80095be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800957e:	e03b      	b.n	80095f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7adb      	ldrb	r3, [r3, #11]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009588:	f000 f854 	bl	8009634 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800958c:	4b1c      	ldr	r3, [pc, #112]	@ (8009600 <HAL_PCDEx_LPM_Callback+0x98>)
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	4a1b      	ldr	r2, [pc, #108]	@ (8009600 <HAL_PCDEx_LPM_Callback+0x98>)
 8009592:	f023 0306 	bic.w	r3, r3, #6
 8009596:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095aa:	f023 0301 	bic.w	r3, r3, #1
 80095ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe f9cb 	bl	8007952 <USBD_LL_Resume>
    break;
 80095bc:	e01c      	b.n	80095f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095d0:	f043 0301 	orr.w	r3, r3, #1
 80095d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe f99c 	bl	800791a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7adb      	ldrb	r3, [r3, #11]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095ea:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <HAL_PCDEx_LPM_Callback+0x98>)
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	4a04      	ldr	r2, [pc, #16]	@ (8009600 <HAL_PCDEx_LPM_Callback+0x98>)
 80095f0:	f043 0306 	orr.w	r3, r3, #6
 80095f4:	6113      	str	r3, [r2, #16]
    break;
 80095f6:	bf00      	nop
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	e000ed00 	.word	0xe000ed00

08009604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800960c:	4b03      	ldr	r3, [pc, #12]	@ (800961c <USBD_static_malloc+0x18>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	20001bdc 	.word	0x20001bdc

08009620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]

}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009638:	f7f7 f8be 	bl	80007b8 <SystemClock_Config>
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}

08009640 <memset>:
 8009640:	4402      	add	r2, r0
 8009642:	4603      	mov	r3, r0
 8009644:	4293      	cmp	r3, r2
 8009646:	d100      	bne.n	800964a <memset+0xa>
 8009648:	4770      	bx	lr
 800964a:	f803 1b01 	strb.w	r1, [r3], #1
 800964e:	e7f9      	b.n	8009644 <memset+0x4>

08009650 <__libc_init_array>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	4d0d      	ldr	r5, [pc, #52]	@ (8009688 <__libc_init_array+0x38>)
 8009654:	4c0d      	ldr	r4, [pc, #52]	@ (800968c <__libc_init_array+0x3c>)
 8009656:	1b64      	subs	r4, r4, r5
 8009658:	10a4      	asrs	r4, r4, #2
 800965a:	2600      	movs	r6, #0
 800965c:	42a6      	cmp	r6, r4
 800965e:	d109      	bne.n	8009674 <__libc_init_array+0x24>
 8009660:	4d0b      	ldr	r5, [pc, #44]	@ (8009690 <__libc_init_array+0x40>)
 8009662:	4c0c      	ldr	r4, [pc, #48]	@ (8009694 <__libc_init_array+0x44>)
 8009664:	f000 f818 	bl	8009698 <_init>
 8009668:	1b64      	subs	r4, r4, r5
 800966a:	10a4      	asrs	r4, r4, #2
 800966c:	2600      	movs	r6, #0
 800966e:	42a6      	cmp	r6, r4
 8009670:	d105      	bne.n	800967e <__libc_init_array+0x2e>
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	f855 3b04 	ldr.w	r3, [r5], #4
 8009678:	4798      	blx	r3
 800967a:	3601      	adds	r6, #1
 800967c:	e7ee      	b.n	800965c <__libc_init_array+0xc>
 800967e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009682:	4798      	blx	r3
 8009684:	3601      	adds	r6, #1
 8009686:	e7f2      	b.n	800966e <__libc_init_array+0x1e>
 8009688:	08009744 	.word	0x08009744
 800968c:	08009744 	.word	0x08009744
 8009690:	08009744 	.word	0x08009744
 8009694:	08009748 	.word	0x08009748

08009698 <_init>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr

080096a4 <_fini>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr
