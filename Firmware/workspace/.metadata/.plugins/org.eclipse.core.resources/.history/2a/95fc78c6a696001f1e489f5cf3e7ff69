
kingfisher-DAC16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009b70  08009b70  0000ab70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c00  08009c00  0000b110  2**0
                  CONTENTS
  4 .ARM          00000008  08009c00  08009c00  0000ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c08  08009c08  0000b110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c08  08009c08  0000ac08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08009c10  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d14  20000110  08009d20  0000b110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e24  08009d20  0000be24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196e6  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5b  00000000  00000000  00024826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00028588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f60  00000000  00000000  000299a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029464  00000000  00000000  0002a900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199a4  00000000  00000000  00053d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee600  00000000  00000000  0006d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bd08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005318  00000000  00000000  0015bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00161064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b58 	.word	0x08009b58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08009b58 	.word	0x08009b58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <DACx1416_nCS>:


extern SPI_HandleTypeDef hspi1;
extern volatile uint8_t dacTransferComplete;

void DACx1416_nCS(bool value){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	if(value){
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d006      	beq.n	80004d6 <DACx1416_nCS+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d0:	f001 fa50 	bl	8001974 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
	}
}
 80004d4:	e005      	b.n	80004e2 <DACx1416_nCS+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set CS low
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f001 fa49 	bl	8001974 <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <DACx1416_nLDAC>:

void DACx1416_nLDAC(bool value){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	if(value){
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d005      	beq.n	8000508 <DACx1416_nLDAC+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // Set CS high
 80004fc:	2201      	movs	r2, #1
 80004fe:	2120      	movs	r1, #32
 8000500:	4806      	ldr	r0, [pc, #24]	@ (800051c <DACx1416_nLDAC+0x30>)
 8000502:	f001 fa37 	bl	8001974 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set CS low
	}
}
 8000506:	e004      	b.n	8000512 <DACx1416_nLDAC+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set CS low
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <DACx1416_nLDAC+0x30>)
 800050e:	f001 fa31 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400

08000520 <DACx1416_nRESET>:
void DACx1416_nRESET(bool value){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	if(value){
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d005      	beq.n	800053c <DACx1416_nRESET+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // Set CS high
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	@ 0x40
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <DACx1416_nRESET+0x30>)
 8000536:	f001 fa1d 	bl	8001974 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set CS low
	}
}
 800053a:	e004      	b.n	8000546 <DACx1416_nRESET+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Set CS low
 800053c:	2200      	movs	r2, #0
 800053e:	2140      	movs	r1, #64	@ 0x40
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <DACx1416_nRESET+0x30>)
 8000542:	f001 fa17 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	48000400 	.word	0x48000400

08000554 <DACx1416_nCLR>:
void DACx1416_nCLR(bool value){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	if(value){
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <DACx1416_nCLR+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // Set CS high
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <DACx1416_nCLR+0x30>)
 800056a:	f001 fa03 	bl	8001974 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set CS low
	}
}
 800056e:	e004      	b.n	800057a <DACx1416_nCLR+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set CS low
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <DACx1416_nCLR+0x30>)
 8000576:	f001 f9fd 	bl	8001974 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <DACx1416_tgl>:

void DACx1416_tgl(uint8_t value){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (value>>2) & 0x01);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	2104      	movs	r1, #4
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <DACx1416_tgl+0x50>)
 80005a4:	f001 f9e6 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, (value>>1) & 0x01);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	085b      	lsrs	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	2102      	movs	r1, #2
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <DACx1416_tgl+0x50>)
 80005ba:	f001 f9db 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (value) & 0x01);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	2101      	movs	r1, #1
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <DACx1416_tgl+0x50>)
 80005cc:	f001 f9d2 	bl	8001974 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000400 	.word	0x48000400

080005dc <DACx1416_SPI_transmit>:
    // Pull CS high to end the transmission
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Set CS high (adjust GPIO pin as needed)
}


void DACx1416_SPI_transmit(uint8_t *txBuffer, uint16_t size) {
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	807b      	strh	r3, [r7, #2]
 80005ea:	466b      	mov	r3, sp
 80005ec:	461e      	mov	r6, r3
    uint8_t rxBuffer[size];  // Dummy receive buffer (must be static if used in interrupt)
 80005ee:	8879      	ldrh	r1, [r7, #2]
 80005f0:	460b      	mov	r3, r1
 80005f2:	3b01      	subs	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	b28b      	uxth	r3, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	4698      	mov	r8, r3
 80005fc:	4691      	mov	r9, r2
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800060a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800060e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000612:	b28b      	uxth	r3, r1
 8000614:	2200      	movs	r2, #0
 8000616:	461c      	mov	r4, r3
 8000618:	4615      	mov	r5, r2
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	00eb      	lsls	r3, r5, #3
 8000624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000628:	00e2      	lsls	r2, r4, #3
 800062a:	460b      	mov	r3, r1
 800062c:	3307      	adds	r3, #7
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	ebad 0d03 	sub.w	sp, sp, r3
 8000636:	466b      	mov	r3, sp
 8000638:	3300      	adds	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]

    // Initiate interrupt-based transmit-receive (full-duplex)
    if(dacTransferComplete){
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <DACx1416_SPI_transmit+0x94>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00e      	beq.n	8000664 <DACx1416_SPI_transmit+0x88>
    	dacTransferComplete = 0;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <DACx1416_SPI_transmit+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
    	if (HAL_SPI_TransmitReceive_IT(&hspi1, txBuffer, rxBuffer, size) != HAL_OK)
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	4808      	ldr	r0, [pc, #32]	@ (8000674 <DACx1416_SPI_transmit+0x98>)
 8000654:	f003 ff36 	bl	80044c4 <HAL_SPI_TransmitReceive_IT>
		{
			// Communication error
			//Error_Handler();
		}
    	while (!dacTransferComplete)
 8000658:	bf00      	nop
 800065a:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <DACx1416_SPI_transmit+0x94>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0fa      	beq.n	800065a <DACx1416_SPI_transmit+0x7e>
 8000664:	46b5      	mov	sp, r6
		{
			// Optional: You could add a timeout check here if needed
		}
    }
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	2000012c 	.word	0x2000012c

08000678 <DACx1416_SPI_receive>:


void DACx1416_SPI_receive(uint8_t *rxBuffer, uint16_t size) {
 8000678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	466b      	mov	r3, sp
 8000688:	461e      	mov	r6, r3
    uint8_t txBuffer[size];  // Dummy transmit buffer (must be static if used in interrupt)
 800068a:	8879      	ldrh	r1, [r7, #2]
 800068c:	460b      	mov	r3, r1
 800068e:	3b01      	subs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	b28b      	uxth	r3, r1
 8000694:	2200      	movs	r2, #0
 8000696:	4698      	mov	r8, r3
 8000698:	4691      	mov	r9, r2
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006ae:	b28b      	uxth	r3, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	461c      	mov	r4, r3
 80006b4:	4615      	mov	r5, r2
 80006b6:	f04f 0200 	mov.w	r2, #0
 80006ba:	f04f 0300 	mov.w	r3, #0
 80006be:	00eb      	lsls	r3, r5, #3
 80006c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006c4:	00e2      	lsls	r2, r4, #3
 80006c6:	460b      	mov	r3, r1
 80006c8:	3307      	adds	r3, #7
 80006ca:	08db      	lsrs	r3, r3, #3
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	ebad 0d03 	sub.w	sp, sp, r3
 80006d2:	466b      	mov	r3, sp
 80006d4:	3300      	adds	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
    memset(txBuffer, 0x00, size);  // Fill with dummy bytes (0x00 or 0xFF)
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	461a      	mov	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	68b8      	ldr	r0, [r7, #8]
 80006e0:	f009 fa0e 	bl	8009b00 <memset>

    // Initiate interrupt-based receive (full-duplex)
    if(dacTransferComplete){
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <DACx1416_SPI_receive+0xa0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00e      	beq.n	800070c <DACx1416_SPI_receive+0x94>
    	dacTransferComplete = 0;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <DACx1416_SPI_receive+0xa0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
    	if (HAL_SPI_TransmitReceive_IT(&hspi1, txBuffer, rxBuffer, size) != HAL_OK)
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	4808      	ldr	r0, [pc, #32]	@ (800071c <DACx1416_SPI_receive+0xa4>)
 80006fc:	f003 fee2 	bl	80044c4 <HAL_SPI_TransmitReceive_IT>
		{
			// Communication error
			//Error_Handler();
		}

    	while (!dacTransferComplete)
 8000700:	bf00      	nop
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <DACx1416_SPI_receive+0xa0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0fa      	beq.n	8000702 <DACx1416_SPI_receive+0x8a>
 800070c:	46b5      	mov	sp, r6
		{
			// Optional: You could add a timeout check here if needed
		}
    }
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000718:	20000000 	.word	0x20000000
 800071c:	2000012c 	.word	0x2000012c

08000720 <DACx1416_SPI_transmitReceive>:

void DACx1416_SPI_transmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	4613      	mov	r3, r2
 800072c:	80fb      	strh	r3, [r7, #6]
    // Initiate interrupt-based transmit-receive (full-duplex)
    if(dacTransferComplete){
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <DACx1416_SPI_transmitReceive+0x40>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00e      	beq.n	8000756 <DACx1416_SPI_transmitReceive+0x36>
    	dacTransferComplete = 0;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <DACx1416_SPI_transmitReceive+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
    	if (HAL_SPI_TransmitReceive_IT(&hspi1, txBuffer, rxBuffer, size) != HAL_OK)
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	68f9      	ldr	r1, [r7, #12]
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <DACx1416_SPI_transmitReceive+0x44>)
 8000746:	f003 febd 	bl	80044c4 <HAL_SPI_TransmitReceive_IT>
		{
			// Communication error
			//Error_Handler();
		}
    	while (!dacTransferComplete)
 800074a:	bf00      	nop
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <DACx1416_SPI_transmitReceive+0x40>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0fa      	beq.n	800074c <DACx1416_SPI_transmitReceive+0x2c>
		{
			// Optional: You could add a timeout check here if needed
		}
    }
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	2000012c 	.word	0x2000012c

08000768 <DACx1416_write_register>:
}




void DACx1416_write_register(DACx1416_HandleTypeDef *dac, DACx1416_register_t reg, uint16_t data){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
 8000774:	4613      	mov	r3, r2
 8000776:	803b      	strh	r3, [r7, #0]
	uint8_t txBuffer[3] = {reg & ~(1<<7) , (data >> 8) & 0xFF, data & 0xFF};
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800077e:	b2db      	uxtb	r3, r3
 8000780:	733b      	strb	r3, [r7, #12]
 8000782:	883b      	ldrh	r3, [r7, #0]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2db      	uxtb	r3, r3
 800078a:	737b      	strb	r3, [r7, #13]
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3];
	dac->nCS(0);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	2000      	movs	r0, #0
 8000798:	4798      	blx	r3
	dac->SPI_transmitReceive(txBuffer, rxBuffer, 3);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	f107 0108 	add.w	r1, r7, #8
 80007a2:	f107 000c 	add.w	r0, r7, #12
 80007a6:	2203      	movs	r2, #3
 80007a8:	4798      	blx	r3
	dac->nCS(1);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	2001      	movs	r0, #1
 80007b0:	4798      	blx	r3

}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <DACx1416_read_register>:
uint16_t DACx1416_read_register(DACx1416_HandleTypeDef *dac, DACx1416_register_t reg){
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	70fb      	strb	r3, [r7, #3]
	uint8_t txBuffer[3] = {reg | (1<<7) , 0xFF, 0xFF};
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	733b      	strb	r3, [r7, #12]
 80007d0:	23ff      	movs	r3, #255	@ 0xff
 80007d2:	737b      	strb	r3, [r7, #13]
 80007d4:	23ff      	movs	r3, #255	@ 0xff
 80007d6:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[3];
	dac->nCS(0);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	2000      	movs	r0, #0
 80007de:	4798      	blx	r3
	dac->SPI_transmitReceive(txBuffer, rxBuffer, 3);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	f107 0108 	add.w	r1, r7, #8
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	2203      	movs	r2, #3
 80007ee:	4798      	blx	r3
	dac->nCS(1);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	2001      	movs	r0, #1
 80007f6:	4798      	blx	r3
	dac->nCS(0);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	2000      	movs	r0, #0
 80007fe:	4798      	blx	r3
	dac->SPI_receive(rxBuffer, 3);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f107 0208 	add.w	r2, r7, #8
 8000808:	2103      	movs	r1, #3
 800080a:	4610      	mov	r0, r2
 800080c:	4798      	blx	r3
	dac->nCS(1);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	2001      	movs	r0, #1
 8000814:	4798      	blx	r3
	return rxBuffer[1]<<8 | rxBuffer[2];
 8000816:	7a7b      	ldrb	r3, [r7, #9]
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	b29b      	uxth	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <DACx1416_get_device_id>:


DACx1416_deviceID_t DACx1416_get_device_id(DACx1416_HandleTypeDef *dac){
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	DACx1416_deviceID_t deviceID;
	uint16_t deviceIdVal = DACx1416_read_register(dac,DACx1416_REG_DEVICEID);
 8000836:	2101      	movs	r1, #1
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ffbe 	bl	80007ba <DACx1416_read_register>
 800083e:	4603      	mov	r3, r0
 8000840:	82fb      	strh	r3, [r7, #22]
	deviceID.deviceId = (deviceIdVal>>2) & 0x3FFF;
 8000842:	8afb      	ldrh	r3, [r7, #22]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	b29b      	uxth	r3, r3
 8000848:	81bb      	strh	r3, [r7, #12]
	deviceID.versionId = deviceIdVal & 0x0003;
 800084a:	8afb      	ldrh	r3, [r7, #22]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0303 	and.w	r3, r3, #3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73bb      	strb	r3, [r7, #14]
	return deviceID;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	2300      	movs	r3, #0
 800085c:	8a3a      	ldrh	r2, [r7, #16]
 800085e:	f362 030f 	bfi	r3, r2, #0, #16
 8000862:	8a7a      	ldrh	r2, [r7, #18]
 8000864:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <DACx1416_get_spiConfig>:
	return status;
}



DACx1416_spiconfig_t DACx1416_get_spiConfig(DACx1416_HandleTypeDef *dac){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	DACx1416_spiconfig_t spiConfig;
	uint16_t regVal = DACx1416_read_register(dac, DACx1416_REG_SPICONFIG);
 800087a:	2103      	movs	r1, #3
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	f7ff ff9c 	bl	80007ba <DACx1416_read_register>
 8000882:	4603      	mov	r3, r0
 8000884:	82fb      	strh	r3, [r7, #22]

	spiConfig.tempalm_en = (regVal >> 11) & 0x01;
 8000886:	8afb      	ldrh	r3, [r7, #22]
 8000888:	0adb      	lsrs	r3, r3, #11
 800088a:	b29b      	uxth	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	spiConfig.dacbusy_en = (regVal >> 10) & 0x01;
 800089c:	8afb      	ldrh	r3, [r7, #22]
 800089e:	0a9b      	lsrs	r3, r3, #10
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	737b      	strb	r3, [r7, #13]
	spiConfig.crcalm_en = (regVal >> 9) & 0x01;
 80008b2:	8afb      	ldrh	r3, [r7, #22]
 80008b4:	0a5b      	lsrs	r3, r3, #9
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf14      	ite	ne
 80008c0:	2301      	movne	r3, #1
 80008c2:	2300      	moveq	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	73bb      	strb	r3, [r7, #14]
	spiConfig.softtoggle_en = (regVal >> 6) & 0x01;
 80008c8:	8afb      	ldrh	r3, [r7, #22]
 80008ca:	099b      	lsrs	r3, r3, #6
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73fb      	strb	r3, [r7, #15]
	spiConfig.dev_pwdwn = (regVal >> 5) & 0x01;
 80008de:	8afb      	ldrh	r3, [r7, #22]
 80008e0:	095b      	lsrs	r3, r3, #5
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	743b      	strb	r3, [r7, #16]
	spiConfig.crc_en = (regVal >> 4) & 0x01;
 80008f4:	8afb      	ldrh	r3, [r7, #22]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	747b      	strb	r3, [r7, #17]
	spiConfig.str_en = (regVal >> 3) & 0x01;
 800090a:	8afb      	ldrh	r3, [r7, #22]
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	b29b      	uxth	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	74bb      	strb	r3, [r7, #18]
	spiConfig.sdo_en = (regVal >> 2) & 0x01;
 8000920:	8afb      	ldrh	r3, [r7, #22]
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	b29b      	uxth	r3, r3
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	74fb      	strb	r3, [r7, #19]
	spiConfig.fsdo = (regVal >> 1) & 0x01;
 8000936:	8afb      	ldrh	r3, [r7, #22]
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	b29b      	uxth	r3, r3
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	bf14      	ite	ne
 8000944:	2301      	movne	r3, #1
 8000946:	2300      	moveq	r3, #0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	753b      	strb	r3, [r7, #20]


	return spiConfig;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	461a      	mov	r2, r3
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	cb03      	ldmia	r3!, {r0, r1}
 8000956:	6010      	str	r0, [r2, #0]
 8000958:	6051      	str	r1, [r2, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	7213      	strb	r3, [r2, #8]
}
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <parseExtendedCmd>:





void parseExtendedCmd(uint8_t *data, uint32_t len){
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	uint8_t extCmd = data[0] & 0x3F;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800097a:	73fb      	strb	r3, [r7, #15]

	switch(extCmd){
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <parseExtendedCmd+0x20>
 8000982:	2b01      	cmp	r3, #1
 8000984:	d037      	beq.n	80009f6 <parseExtendedCmd+0x8e>

		break;
	}
	default:
		// Handle unexpected commands, if necessary
		break;
 8000986:	e06f      	b.n	8000a68 <parseExtendedCmd+0x100>
		  hspi1.Instance = SPI1;
 8000988:	4b39      	ldr	r3, [pc, #228]	@ (8000a70 <parseExtendedCmd+0x108>)
 800098a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a74 <parseExtendedCmd+0x10c>)
 800098c:	601a      	str	r2, [r3, #0]
		  hspi1.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b38      	ldr	r3, [pc, #224]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000994:	605a      	str	r2, [r3, #4]
		  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000996:	4b36      	ldr	r3, [pc, #216]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
		  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <parseExtendedCmd+0x108>)
 800099e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009a2:	60da      	str	r2, [r3, #12]
		  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a4:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
		  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	615a      	str	r2, [r3, #20]
		  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b6:	619a      	str	r2, [r3, #24]
		  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	61da      	str	r2, [r3, #28]
		  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
		  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
		  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
		  hspi1.Init.CRCPolynomial = 7;
 80009d2:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009da:	2200      	movs	r2, #0
 80009dc:	631a      	str	r2, [r3, #48]	@ 0x30
		  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009de:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	635a      	str	r2, [r3, #52]	@ 0x34
		  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e4:	4822      	ldr	r0, [pc, #136]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009e6:	f003 fca1 	bl	800432c <HAL_SPI_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d038      	beq.n	8000a62 <parseExtendedCmd+0xfa>
		    Error_Handler();
 80009f0:	f000 fada 	bl	8000fa8 <Error_Handler>
		break;
 80009f4:	e035      	b.n	8000a62 <parseExtendedCmd+0xfa>
		  hspi1.Instance = SPI1;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <parseExtendedCmd+0x10c>)
 80009fa:	601a      	str	r2, [r3, #0]
		  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <parseExtendedCmd+0x108>)
 80009fe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a02:	605a      	str	r2, [r3, #4]
		  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
		  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a0c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a10:	60da      	str	r2, [r3, #12]
		  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
		  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	615a      	str	r2, [r3, #20]
		  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a24:	619a      	str	r2, [r3, #24]
		  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	61da      	str	r2, [r3, #28]
		  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
		  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
		  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
		  hspi1.Init.CRCPolynomial = 7;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
		  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	@ 0x30
		  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	635a      	str	r2, [r3, #52]	@ 0x34
		  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a50:	4807      	ldr	r0, [pc, #28]	@ (8000a70 <parseExtendedCmd+0x108>)
 8000a52:	f003 fc6b 	bl	800432c <HAL_SPI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d004      	beq.n	8000a66 <parseExtendedCmd+0xfe>
		    Error_Handler();
 8000a5c:	f000 faa4 	bl	8000fa8 <Error_Handler>
		break;
 8000a60:	e001      	b.n	8000a66 <parseExtendedCmd+0xfe>
		break;
 8000a62:	bf00      	nop
 8000a64:	e000      	b.n	8000a68 <parseExtendedCmd+0x100>
		break;
 8000a66:	bf00      	nop
	}


}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000012c 	.word	0x2000012c
 8000a74:	40013000 	.word	0x40013000

08000a78 <parseCmd>:




void parseCmd(uint8_t *data, uint32_t len) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]

	uint8_t cmd = (data[0]>>6) & 0x3;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	099b      	lsrs	r3, r3, #6
 8000a88:	75fb      	strb	r3, [r7, #23]

	switch(cmd){
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d84d      	bhi.n	8000b2c <parseCmd+0xb4>
 8000a90:	a201      	add	r2, pc, #4	@ (adr r2, 8000a98 <parseCmd+0x20>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000af3 	.word	0x08000af3
 8000aa0:	08000b2d 	.word	0x08000b2d
 8000aa4:	08000b23 	.word	0x08000b23
	case CMD_READ_DAC_REGISTER: {//read register
		DACx1416_deviceID_t devID = DACx1416_get_device_id(&dac);
 8000aa8:	4824      	ldr	r0, [pc, #144]	@ (8000b3c <parseCmd+0xc4>)
 8000aaa:	f7ff fec0 	bl	800082e <DACx1416_get_device_id>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	60fb      	str	r3, [r7, #12]


		uint8_t address = data[0] & 0x3F;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000aba:	74fb      	strb	r3, [r7, #19]
		uint16_t regVal = DACx1416_read_register(&dac,address);
 8000abc:	7cfb      	ldrb	r3, [r7, #19]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481e      	ldr	r0, [pc, #120]	@ (8000b3c <parseCmd+0xc4>)
 8000ac2:	f7ff fe7a 	bl	80007ba <DACx1416_read_register>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	823b      	strh	r3, [r7, #16]
		uint8_t response[2];
		response[0] = regVal >> 8;
 8000aca:	8a3b      	ldrh	r3, [r7, #16]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	723b      	strb	r3, [r7, #8]
		response[1] = regVal & 0xFF;
 8000ad4:	8a3b      	ldrh	r3, [r7, #16]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	727b      	strb	r3, [r7, #9]
		if (CDC_Transmit_FS(response, 2) != USBD_OK) {
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 fa6f 	bl	8008fc4 <CDC_Transmit_FS>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <parseCmd+0xb8>
					Error_Handler();
 8000aec:	f000 fa5c 	bl	8000fa8 <Error_Handler>
		}
		break;
 8000af0:	e01e      	b.n	8000b30 <parseCmd+0xb8>
	}
	case CMD_WRITE_DAC_REGISTER: { //write register

		uint8_t address = data[0] & 0x3F;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000afa:	75bb      	strb	r3, [r7, #22]
		uint16_t value = data[1]<<8 | data[2];
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3301      	adds	r3, #1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3302      	adds	r3, #2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	82bb      	strh	r3, [r7, #20]
		DACx1416_write_register(&dac, address, value);
 8000b14:	8aba      	ldrh	r2, [r7, #20]
 8000b16:	7dbb      	ldrb	r3, [r7, #22]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <parseCmd+0xc4>)
 8000b1c:	f7ff fe24 	bl	8000768 <DACx1416_write_register>



		break;
 8000b20:	e007      	b.n	8000b32 <parseCmd+0xba>

		break;
	}

	case CMD_EXTENDED_COMMANDS: { //parse extended commands
		parseExtendedCmd(data,  len);
 8000b22:	6839      	ldr	r1, [r7, #0]
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff1f 	bl	8000968 <parseExtendedCmd>
		break;
 8000b2a:	e002      	b.n	8000b32 <parseCmd+0xba>
	}
	default:
		// Handle unexpected commands, if necessary
		break;
 8000b2c:	bf00      	nop
 8000b2e:	e000      	b.n	8000b32 <parseCmd+0xba>
		break;
 8000b30:	bf00      	nop
	}


}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000218 	.word	0x20000218

08000b40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b46:	f000 fb80 	bl	800124a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b4a:	f000 f897 	bl	8000c7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b4e:	f000 f98b 	bl	8000e68 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000b52:	f000 f8e5 	bl	8000d20 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000b56:	f000 f957 	bl	8000e08 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 8000b5a:	f008 f96f 	bl	8008e3c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2101      	movs	r1, #1
 8000b62:	2023      	movs	r0, #35	@ 0x23
 8000b64:	f000 fce5 	bl	8001532 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b68:	2023      	movs	r0, #35	@ 0x23
 8000b6a:	f000 fcfe 	bl	800156a <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2110      	movs	r1, #16
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f000 fefd 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4835      	ldr	r0, [pc, #212]	@ (8000c54 <main+0x114>)
 8000b80:	f000 fef8 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2140      	movs	r1, #64	@ 0x40
 8000b88:	4832      	ldr	r0, [pc, #200]	@ (8000c54 <main+0x114>)
 8000b8a:	f000 fef3 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2180      	movs	r1, #128	@ 0x80
 8000b92:	4830      	ldr	r0, [pc, #192]	@ (8000c54 <main+0x114>)
 8000b94:	f000 feee 	bl	8001974 <HAL_GPIO_WritePin>
//  DACx1416_write_register_old(0x10, 56000); // 4.2778V
//  DACx1416_write_register_old(0x10, 60000); // 4.5841V   --> 4.37V
//  DACx1416_write_register_old(0x10, 64000); // 4.8904V --> 4.497V
//  DACx1416_write_register_old(0x10, 65535); //5V --> 3.5V

	dac.SPI_transmit = DACx1416_SPI_transmit;
 8000b98:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <main+0x118>)
 8000b9a:	4a30      	ldr	r2, [pc, #192]	@ (8000c5c <main+0x11c>)
 8000b9c:	601a      	str	r2, [r3, #0]
	dac.SPI_receive = DACx1416_SPI_receive;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <main+0x118>)
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <main+0x120>)
 8000ba2:	605a      	str	r2, [r3, #4]
	dac.SPI_transmitReceive = DACx1416_SPI_transmitReceive;
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <main+0x118>)
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c64 <main+0x124>)
 8000ba8:	609a      	str	r2, [r3, #8]
	dac.nCS = DACx1416_nCS;
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <main+0x118>)
 8000bac:	4a2e      	ldr	r2, [pc, #184]	@ (8000c68 <main+0x128>)
 8000bae:	60da      	str	r2, [r3, #12]
	dac.nLDAC = DACx1416_nLDAC;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <main+0x118>)
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c6c <main+0x12c>)
 8000bb4:	611a      	str	r2, [r3, #16]
	dac.nRESET = DACx1416_nRESET;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <main+0x118>)
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c70 <main+0x130>)
 8000bba:	615a      	str	r2, [r3, #20]
	dac.nCLR = DACx1416_nCLR;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <main+0x118>)
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000c74 <main+0x134>)
 8000bc0:	619a      	str	r2, [r3, #24]
	dac.TGL = DACx1416_tgl;
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <main+0x118>)
 8000bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c78 <main+0x138>)
 8000bc6:	61da      	str	r2, [r3, #28]

	volatile DACx1416_deviceID_t devID = DACx1416_get_device_id(&dac);
 8000bc8:	4823      	ldr	r0, [pc, #140]	@ (8000c58 <main+0x118>)
 8000bca:	f7ff fe30 	bl	800082e <DACx1416_get_device_id>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	61fb      	str	r3, [r7, #28]
	volatile DACx1416_spiconfig_t spiConfig = DACx1416_get_spiConfig(&dac);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4920      	ldr	r1, [pc, #128]	@ (8000c58 <main+0x118>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fe49 	bl	8000870 <DACx1416_get_spiConfig>
	devID = DACx1416_get_device_id(&dac);
 8000bde:	481e      	ldr	r0, [pc, #120]	@ (8000c58 <main+0x118>)
 8000be0:	f7ff fe25 	bl	800082e <DACx1416_get_device_id>
 8000be4:	4603      	mov	r3, r0
 8000be6:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000be8:	463b      	mov	r3, r7
 8000bea:	491b      	ldr	r1, [pc, #108]	@ (8000c58 <main+0x118>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe3f 	bl	8000870 <DACx1416_get_spiConfig>
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	463a      	mov	r2, r7
 8000bf8:	6810      	ldr	r0, [r2, #0]
 8000bfa:	6851      	ldr	r1, [r2, #4]
 8000bfc:	c303      	stmia	r3!, {r0, r1}
 8000bfe:	7a12      	ldrb	r2, [r2, #8]
 8000c00:	701a      	strb	r2, [r3, #0]
	devID = DACx1416_get_device_id(&dac);
 8000c02:	4815      	ldr	r0, [pc, #84]	@ (8000c58 <main+0x118>)
 8000c04:	f7ff fe13 	bl	800082e <DACx1416_get_device_id>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4912      	ldr	r1, [pc, #72]	@ (8000c58 <main+0x118>)
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe2d 	bl	8000870 <DACx1416_get_spiConfig>
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	463a      	mov	r2, r7
 8000c1c:	6810      	ldr	r0, [r2, #0]
 8000c1e:	6851      	ldr	r1, [r2, #4]
 8000c20:	c303      	stmia	r3!, {r0, r1}
 8000c22:	7a12      	ldrb	r2, [r2, #8]
 8000c24:	701a      	strb	r2, [r3, #0]
	devID = DACx1416_get_device_id(&dac);
 8000c26:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <main+0x118>)
 8000c28:	f7ff fe01 	bl	800082e <DACx1416_get_device_id>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	61fb      	str	r3, [r7, #28]
	spiConfig = DACx1416_get_spiConfig(&dac);
 8000c30:	463b      	mov	r3, r7
 8000c32:	4909      	ldr	r1, [pc, #36]	@ (8000c58 <main+0x118>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe1b 	bl	8000870 <DACx1416_get_spiConfig>
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	463a      	mov	r2, r7
 8000c40:	6810      	ldr	r0, [r2, #0]
 8000c42:	6851      	ldr	r1, [r2, #4]
 8000c44:	c303      	stmia	r3!, {r0, r1}
 8000c46:	7a12      	ldrb	r2, [r2, #8]
 8000c48:	701a      	strb	r2, [r3, #0]
	asm("nop");
 8000c4a:	bf00      	nop
	asm("nop");
 8000c4c:	bf00      	nop
	asm("nop");
 8000c4e:	bf00      	nop

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <main+0x110>
 8000c54:	48000400 	.word	0x48000400
 8000c58:	20000218 	.word	0x20000218
 8000c5c:	080005dd 	.word	0x080005dd
 8000c60:	08000679 	.word	0x08000679
 8000c64:	08000721 	.word	0x08000721
 8000c68:	080004b9 	.word	0x080004b9
 8000c6c:	080004ed 	.word	0x080004ed
 8000c70:	08000521 	.word	0x08000521
 8000c74:	08000555 	.word	0x08000555
 8000c78:	08000589 	.word	0x08000589

08000c7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b096      	sub	sp, #88	@ 0x58
 8000c80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2244      	movs	r2, #68	@ 0x44
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 ff38 	bl	8009b00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ca2:	f002 f823 	bl	8002cec <HAL_PWREx_ControlVoltageScaling>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000cac:	f000 f97c 	bl	8000fa8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cbc:	2360      	movs	r3, #96	@ 0x60
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000ccc:	2328      	movs	r3, #40	@ 0x28
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 f869 	bl	8002db8 <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x74>
		Error_Handler();
 8000cec:	f000 f95c 	bl	8000fa8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000d04:	463b      	mov	r3, r7
 8000d06:	2104      	movs	r1, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fc31 	bl	8003570 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x9c>
		Error_Handler();
 8000d14:	f000 f948 	bl	8000fa8 <Error_Handler>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	3758      	adds	r7, #88	@ 0x58
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d26:	4a37      	ldr	r2, [pc, #220]	@ (8000e04 <MX_SPI1_Init+0xe4>)
 8000d28:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b35      	ldr	r3, [pc, #212]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d30:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d3a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d3e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d40:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d52:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5a:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000d66:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d74:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000d80:	481f      	ldr	r0, [pc, #124]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d82:	f003 fad3 	bl	800432c <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI1_Init+0x70>
		Error_Handler();
 8000d8c:	f000 f90c 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
	hspi1.Instance = SPI1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <MX_SPI1_Init+0xe4>)
 8000d94:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000d98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000da6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000daa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dbe:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_SPI1_Init+0xe0>)
 8000dec:	f003 fa9e 	bl	800432c <HAL_SPI_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_SPI1_Init+0xda>
		Error_Handler();
 8000df6:	f000 f8d7 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE END SPI1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000012c 	.word	0x2000012c
 8000e04:	40013000 	.word	0x40013000

08000e08 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e0e:	4a15      	ldr	r2, [pc, #84]	@ (8000e64 <MX_USART1_UART_Init+0x5c>)
 8000e10:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000e12:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_USART1_UART_Init+0x58>)
 8000e4c:	f004 f870 	bl	8004f30 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000e56:	f000 f8a7 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000190 	.word	0x20000190
 8000e64:	40013800 	.word	0x40013800

08000e68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a2e      	ldr	r2, [pc, #184]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <MX_GPIO_Init+0xd4>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DAC_nCS_GPIO_Port, DAC_nCS_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f000 fd51 	bl	8001974 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	21e7      	movs	r1, #231	@ 0xe7
 8000ed6:	481a      	ldr	r0, [pc, #104]	@ (8000f40 <MX_GPIO_Init+0xd8>)
 8000ed8:	f000 fd4c 	bl	8001974 <HAL_GPIO_WritePin>
			DAC_TOGGLE0_Pin | DAC_TOGGLE1_Pin | DAC_TOGGLE2_Pin | DAC_nLDAC_Pin
					| DAC_nRESET_Pin | DAC_nCLR_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : DAC_nCS_Pin */
	GPIO_InitStruct.Pin = DAC_nCS_Pin;
 8000edc:	2310      	movs	r3, #16
 8000ede:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef6:	f000 fb93 	bl	8001620 <HAL_GPIO_Init>

	/*Configure GPIO pins : DAC_TOGGLE0_Pin DAC_TOGGLE1_Pin DAC_TOGGLE2_Pin DAC_nLDAC_Pin
	 DAC_nRESET_Pin DAC_nCLR_Pin */
	GPIO_InitStruct.Pin = DAC_TOGGLE0_Pin | DAC_TOGGLE1_Pin | DAC_TOGGLE2_Pin
 8000efa:	23e7      	movs	r3, #231	@ 0xe7
 8000efc:	60fb      	str	r3, [r7, #12]
			| DAC_nLDAC_Pin | DAC_nRESET_Pin | DAC_nCLR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <MX_GPIO_Init+0xd8>)
 8000f12:	f000 fb85 	bl	8001620 <HAL_GPIO_Init>

	/*Configure GPIO pin : DAC_nALMOUT_Pin */
	GPIO_InitStruct.Pin = DAC_nALMOUT_Pin;
 8000f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DAC_nALMOUT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <MX_GPIO_Init+0xd8>)
 8000f2e:	f000 fb77 	bl	8001620 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000400 	.word	0x48000400

08000f44 <HAL_SPI_RxCpltCallback>:
	if (hspi->Instance == SPI1) {
		// Transmission completed, add your code here.
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
		// Reception completed, add your code here.
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <HAL_SPI_TxRxCpltCallback+0x24>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d102      	bne.n	8000f70 <HAL_SPI_TxRxCpltCallback+0x18>
		// Transmission completed, add your code here.
		dacTransferComplete = 1;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40013000 	.word	0x40013000
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_SPI_ErrorCallback>:

// Callback function for SPI errors
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_SPI_ErrorCallback+0x20>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_SPI_ErrorCallback+0x16>
		// Handle SPI communication error here
		Error_Handler();
 8000f96:	f000 f807 	bl	8000fa8 <Error_Handler>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40013000 	.word	0x40013000

08000fa8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <HAL_SPI_MspInit+0x8c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d130      	bne.n	8001080 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_SPI_MspInit+0x90>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001022:	4a1a      	ldr	r2, [pc, #104]	@ (800108c <HAL_SPI_MspInit+0x90>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001028:	6613      	str	r3, [r2, #96]	@ 0x60
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_SPI_MspInit+0x90>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_SPI_MspInit+0x90>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a14      	ldr	r2, [pc, #80]	@ (800108c <HAL_SPI_MspInit+0x90>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_SPI_MspInit+0x90>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800104e:	23e0      	movs	r3, #224	@ 0xe0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105e:	2305      	movs	r3, #5
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106c:	f000 fad8 	bl	8001620 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2023      	movs	r0, #35	@ 0x23
 8001076:	f000 fa5c 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800107a:	2023      	movs	r0, #35	@ 0x23
 800107c:	f000 fa75 	bl	800156a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	@ 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40013000 	.word	0x40013000
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ac      	sub	sp, #176	@ 0xb0
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2288      	movs	r2, #136	@ 0x88
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f008 fd25 	bl	8009b00 <memset>
  if(huart->Instance==USART1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <HAL_UART_MspInit+0xb4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d13c      	bne.n	800113a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010c4:	2300      	movs	r3, #0
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fc71 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f7ff ff66 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <HAL_UART_MspInit+0xb8>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e0:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <HAL_UART_MspInit+0xb8>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_UART_MspInit+0xb8>)
 80010ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_UART_MspInit+0xb8>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <HAL_UART_MspInit+0xb8>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_UART_MspInit+0xb8>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800110c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001126:	2307      	movs	r3, #7
 8001128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f000 fa73 	bl	8001620 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800113a:	bf00      	nop
 800113c:	37b0      	adds	r7, #176	@ 0xb0
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40013800 	.word	0x40013800
 8001148:	40021000 	.word	0x40021000

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <NMI_Handler+0x4>

08001154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <MemManage_Handler+0x4>

08001164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <UsageFault_Handler+0x4>

08001174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a2:	f000 f8a7 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <SPI1_IRQHandler+0x10>)
 80011b2:	f003 fa59 	bl	8004668 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000012c 	.word	0x2000012c

080011c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <OTG_FS_IRQHandler+0x10>)
 80011c6:	f000 fd2b 	bl	8001c20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20001720 	.word	0x20001720

080011d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff ffea 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f008 fc73 	bl	8009b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff fc89 	bl	8000b40 <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800123c:	08009c10 	.word	0x08009c10
  ldr r2, =_sbss
 8001240:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001244:	20001e24 	.word	0x20001e24

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>

0800124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f961 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f80e 	bl	800127c <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e001      	b.n	8001270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126c:	f7ff fea2 	bl	8000fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001270:	79fb      	ldrb	r3, [r7, #7]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <HAL_InitTick+0x6c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d023      	beq.n	80012d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <HAL_InitTick+0x70>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_InitTick+0x6c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f96d 	bl	8001586 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10f      	bne.n	80012d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d809      	bhi.n	80012cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c0:	f000 f937 	bl	8001532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_InitTick+0x74>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e007      	b.n	80012dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e004      	b.n	80012dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	e001      	b.n	80012dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000004 	.word	0x20000004
 80012f0:	20000008 	.word	0x20000008

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2000000c 	.word	0x2000000c
 8001318:	2000023c 	.word	0x2000023c

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000023c 	.word	0x2000023c

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000000c 	.word	0x2000000c

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	@ (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	@ (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	@ (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	@ 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d005      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e029      	b.n	8001616 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 020e 	bic.w	r2, r2, #14
 80015d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	f003 021c 	and.w	r2, r3, #28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
    }
  }
  return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e17f      	b.n	8001930 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8171 	beq.w	800192a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d005      	beq.n	8001660 <HAL_GPIO_Init+0x40>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d130      	bne.n	80016c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001696:	2201      	movs	r2, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 0201 	and.w	r2, r3, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d118      	bne.n	8001700 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016d4:	2201      	movs	r2, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	6939      	ldr	r1, [r7, #16]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80ac 	beq.w	800192a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001950 <HAL_GPIO_Init+0x330>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001950 <HAL_GPIO_Init+0x330>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017de:	4b5c      	ldr	r3, [pc, #368]	@ (8001950 <HAL_GPIO_Init+0x330>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001954 <HAL_GPIO_Init+0x334>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x242>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4f      	ldr	r2, [pc, #316]	@ (8001958 <HAL_GPIO_Init+0x338>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x23e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4e      	ldr	r2, [pc, #312]	@ (800195c <HAL_GPIO_Init+0x33c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x23a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4d      	ldr	r2, [pc, #308]	@ (8001960 <HAL_GPIO_Init+0x340>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x236>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4c      	ldr	r2, [pc, #304]	@ (8001964 <HAL_GPIO_Init+0x344>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x232>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4b      	ldr	r2, [pc, #300]	@ (8001968 <HAL_GPIO_Init+0x348>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x22e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4a      	ldr	r2, [pc, #296]	@ (800196c <HAL_GPIO_Init+0x34c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x22a>
 8001846:	2306      	movs	r3, #6
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800184a:	2307      	movs	r3, #7
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x244>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x244>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x244>
 8001862:	2300      	movs	r3, #0
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001874:	4937      	ldr	r1, [pc, #220]	@ (8001954 <HAL_GPIO_Init+0x334>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001882:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <HAL_GPIO_Init+0x350>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a6:	4a32      	ldr	r2, [pc, #200]	@ (8001970 <HAL_GPIO_Init+0x350>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ac:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_GPIO_Init+0x350>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d0:	4a27      	ldr	r2, [pc, #156]	@ (8001970 <HAL_GPIO_Init+0x350>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <HAL_GPIO_Init+0x350>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001970 <HAL_GPIO_Init+0x350>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_GPIO_Init+0x350>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001924:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <HAL_GPIO_Init+0x350>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	f47f ae78 	bne.w	8001630 <HAL_GPIO_Init+0x10>
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000800 	.word	0x48000800
 8001960:	48000c00 	.word	0x48000c00
 8001964:	48001000 	.word	0x48001000
 8001968:	48001400 	.word	0x48001400
 800196c:	48001800 	.word	0x48001800
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e002      	b.n	8001998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e101      	b.n	8001bba <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f007 fc54 	bl	8009278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 f89f 	bl	8005b26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7c1a      	ldrb	r2, [r3, #16]
 80019f0:	f88d 2000 	strb.w	r2, [sp]
 80019f4:	3304      	adds	r3, #4
 80019f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f8:	f003 ffbb 	bl	8005972 <USB_CoreInit>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0d5      	b.n	8001bba <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 f897 	bl	8005b48 <USB_SetCurrentMode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0c6      	b.n	8001bba <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e04a      	b.n	8001ac8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3315      	adds	r3, #21
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3314      	adds	r3, #20
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	b298      	uxth	r0, r3
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	332e      	adds	r3, #46	@ 0x2e
 8001a6e:	4602      	mov	r2, r0
 8001a70:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3318      	adds	r3, #24
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	331c      	adds	r3, #28
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3320      	adds	r3, #32
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	3324      	adds	r3, #36	@ 0x24
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	791b      	ldrb	r3, [r3, #4]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3af      	bcc.n	8001a32 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e044      	b.n	8001b62 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d3b5      	bcc.n	8001ad8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7c1a      	ldrb	r2, [r3, #16]
 8001b74:	f88d 2000 	strb.w	r2, [sp]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	f004 f830 	bl	8005be0 <USB_DevInit>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e013      	b.n	8001bba <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7b1b      	ldrb	r3, [r3, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d102      	bne.n	8001bae <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 f86d 	bl	8002c88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 ffe7 	bl	8006b86 <USB_DevDisconnect>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_PCD_Start+0x1c>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e01c      	b.n	8001c18 <HAL_PCD_Start+0x56>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7b5b      	ldrb	r3, [r3, #13]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 ff80 	bl	8005b04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 ff9b 	bl	8006b44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b08d      	sub	sp, #52	@ 0x34
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 f859 	bl	8006cee <USB_GetMode>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8481 	bne.w	8002546 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 ffbd 	bl	8006bc8 <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8477 	beq.w	8002544 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 ffaa 	bl	8006bc8 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f002 0202 	and.w	r2, r2, #2
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 ff98 	bl	8006bc8 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d161      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0210 	bic.w	r2, r2, #16
 8001cb0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	0c5b      	lsrs	r3, r3, #17
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d124      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d035      	beq.n	8001d56 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6a38      	ldr	r0, [r7, #32]
 8001cfe:	f004 fdcf 	bl	80068a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0e:	441a      	add	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d20:	441a      	add	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	615a      	str	r2, [r3, #20]
 8001d26:	e016      	b.n	8001d56 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	0c5b      	lsrs	r3, r3, #17
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d110      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6a38      	ldr	r0, [r7, #32]
 8001d40:	f004 fdae 	bl	80068a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d50:	441a      	add	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0210 	orr.w	r2, r2, #16
 8001d64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 ff2c 	bl	8006bc8 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d7a:	f040 80a7 	bne.w	8001ecc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f004 ff31 	bl	8006bee <USB_ReadDevAllOutEpInterrupt>
 8001d8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d8e:	e099      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 808e 	beq.w	8001eb8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 ff55 	bl	8006c56 <USB_ReadDevOutEPInterrupt>
 8001dac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fe81 	bl	8002ad4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001de8:	461a      	mov	r2, r3
 8001dea:	2308      	movs	r3, #8
 8001dec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 febd 	bl	8002b70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2310      	movs	r3, #16
 8001e10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d030      	beq.n	8001e7e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e24:	2b80      	cmp	r3, #128	@ 0x80
 8001e26:	d109      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e3a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3304      	adds	r3, #4
 8001e50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	78db      	ldrb	r3, [r3, #3]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 fb5a 	bl	8009520 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e94:	461a      	mov	r2, r3
 8001e96:	2320      	movs	r3, #32
 8001e98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	3301      	adds	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f af62 	bne.w	8001d90 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 fe79 	bl	8006bc8 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001edc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ee0:	f040 80a4 	bne.w	800202c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 fe9a 	bl	8006c22 <USB_ReadDevAllInEpInterrupt>
 8001eee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001ef4:	e096      	b.n	8002024 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 808b 	beq.w	8002018 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fec0 	bl	8006c92 <USB_ReadDevInEPInterrupt>
 8001f12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	2201      	movs	r2, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69f9      	ldr	r1, [r7, #28]
 8001f3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f3e:	4013      	ands	r3, r2
 8001f40:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2301      	movs	r3, #1
 8001f52:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f007 fa4b 	bl	80093f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f76:	461a      	mov	r2, r3
 8001f78:	2308      	movs	r3, #8
 8001f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f92:	461a      	mov	r2, r3
 8001f94:	2310      	movs	r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2340      	movs	r3, #64	@ 0x40
 8001fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d023      	beq.n	8002006 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001fbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f003 ff55 	bl	8005e70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	78db      	ldrb	r3, [r3, #3]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	4619      	mov	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f007 faa8 	bl	8009544 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002000:	461a      	mov	r2, r3
 8002002:	2302      	movs	r3, #2
 8002004:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002010:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fcd6 	bl	80029c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3301      	adds	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800201e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f af65 	bne.w	8001ef6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fdc9 	bl	8006bc8 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800203c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002040:	d122      	bne.n	8002088 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800205c:	2b01      	cmp	r3, #1
 800205e:	d108      	bne.n	8002072 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f007 fcdc 	bl	8009a28 <HAL_PCDEx_LPM_Callback>
 8002070:	e002      	b.n	8002078 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f007 fa2c 	bl	80094d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002086:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fd9b 	bl	8006bc8 <USB_ReadInterrupts>
 8002092:	4603      	mov	r3, r0
 8002094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800209c:	d112      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f007 f9e8 	bl	8009484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80020c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fd7d 	bl	8006bc8 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020d8:	d121      	bne.n	800211e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80020e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d111      	bne.n	8002118 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	f003 020f 	and.w	r2, r3, #15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800210e:	2101      	movs	r1, #1
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f007 fc89 	bl	8009a28 <HAL_PCDEx_LPM_Callback>
 8002116:	e002      	b.n	800211e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f007 f9b3 	bl	8009484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f004 fd50 	bl	8006bc8 <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002132:	f040 80b6 	bne.w	80022a2 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2110      	movs	r1, #16
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fe8d 	bl	8005e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800215a:	e046      	b.n	80021ea <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002168:	461a      	mov	r2, r3
 800216a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800216e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002180:	0151      	lsls	r1, r2, #5
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	440a      	add	r2, r1
 8002186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800218a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800218e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b4:	0151      	lsls	r1, r2, #5
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	440a      	add	r2, r1
 80021ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d4:	0151      	lsls	r1, r2, #5
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	440a      	add	r2, r1
 80021da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e6:	3301      	adds	r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d3b2      	bcc.n	800215c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002204:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002208:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7bdb      	ldrb	r3, [r3, #15]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002222:	f043 030b 	orr.w	r3, r3, #11
 8002226:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002238:	f043 030b 	orr.w	r3, r3, #11
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	e015      	b.n	800226c <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800224e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002252:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002256:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002266:	f043 030b 	orr.w	r3, r3, #11
 800226a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800227a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800227e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f004 fd5f 	bl	8006d50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 fc8e 	bl	8006bc8 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022b6:	d123      	bne.n	8002300 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fd24 	bl	8006d0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 fe4b 	bl	8005f62 <USB_GetDevSpeed>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681c      	ldr	r4, [r3, #0]
 80022d8:	f001 fad4 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80022dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022e2:	461a      	mov	r2, r3
 80022e4:	4620      	mov	r0, r4
 80022e6:	f003 fb71 	bl	80059cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f007 f8ab 	bl	8009446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80022fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 fc5f 	bl	8006bc8 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b08      	cmp	r3, #8
 8002312:	d10a      	bne.n	800232a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f007 f888 	bl	800942a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f002 0208 	and.w	r2, r2, #8
 8002328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fc4a 	bl	8006bc8 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b80      	cmp	r3, #128	@ 0x80
 800233c:	d123      	bne.n	8002386 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800234a:	2301      	movs	r3, #1
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
 800234e:	e014      	b.n	800237a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 faf7 	bl	8002962 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	3301      	adds	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	4293      	cmp	r3, r2
 8002384:	d3e4      	bcc.n	8002350 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fc1c 	bl	8006bc8 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800239a:	d13c      	bne.n	8002416 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a0:	e02b      	b.n	80023fa <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3318      	adds	r3, #24
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d115      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da12      	bge.n	80023f4 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3317      	adds	r3, #23
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fab7 	bl	8002962 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	3301      	adds	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	791b      	ldrb	r3, [r3, #4]
 80023fe:	461a      	mov	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	4293      	cmp	r3, r2
 8002404:	d3cd      	bcc.n	80023a2 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f004 fbd4 	bl	8006bc8 <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800242a:	d156      	bne.n	80024da <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800242c:	2301      	movs	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002430:	e045      	b.n	80024be <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d12e      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800245a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	da2b      	bge.n	80024b8 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800246c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002470:	429a      	cmp	r2, r3
 8002472:	d121      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b4:	6053      	str	r3, [r2, #4]
            break;
 80024b6:	e008      	b.n	80024ca <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	3301      	adds	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d3b3      	bcc.n	8002432 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80024d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fb72 	bl	8006bc8 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ee:	d10a      	bne.n	8002506 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f007 f839 	bl	8009568 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fb5c 	bl	8006bc8 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d115      	bne.n	8002546 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f007 f829 	bl	8009584 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e000      	b.n	8002546 <HAL_PCD_IRQHandler+0x926>
      return;
 8002544:	bf00      	nop
    }
  }
}
 8002546:	3734      	adds	r7, #52	@ 0x34
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_PCD_SetAddress+0x1a>
 8002562:	2302      	movs	r3, #2
 8002564:	e012      	b.n	800258c <HAL_PCD_SetAddress+0x40>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fabb 	bl	8006af8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	70fb      	strb	r3, [r7, #3]
 80025a6:	460b      	mov	r3, r1
 80025a8:	803b      	strh	r3, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da0f      	bge.n	80025da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	3310      	adds	r3, #16
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	3304      	adds	r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	705a      	strb	r2, [r3, #1]
 80025d8:	e00f      	b.n	80025fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002606:	883b      	ldrh	r3, [r7, #0]
 8002608:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	78ba      	ldrb	r2, [r7, #2]
 8002614:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002628:	78bb      	ldrb	r3, [r7, #2]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d102      	bne.n	8002634 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_PCD_EP_Open+0xae>
 800263e:	2302      	movs	r3, #2
 8002640:	e00e      	b.n	8002660 <HAL_PCD_EP_Open+0xcc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68f9      	ldr	r1, [r7, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fca5 	bl	8005fa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800265e:	7afb      	ldrb	r3, [r7, #11]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002678:	2b00      	cmp	r3, #0
 800267a:	da0f      	bge.n	800269c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3310      	adds	r3, #16
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	705a      	strb	r2, [r3, #1]
 800269a:	e00f      	b.n	80026bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_PCD_EP_Close+0x6e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e00e      	b.n	80026f4 <HAL_PCD_EP_Close+0x8c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 fce3 	bl	80060b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	b2da      	uxtb	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6979      	ldr	r1, [r7, #20]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fd89 	bl	8006268 <USB_EPStartXfer>

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	3310      	adds	r3, #16
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	3304      	adds	r3, #4
 80027b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2201      	movs	r2, #1
 80027ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fd40 	bl	8006268 <USB_EPStartXfer>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	7912      	ldrb	r2, [r2, #4]
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e04e      	b.n	80028ae <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da0f      	bge.n	8002838 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	3310      	adds	r3, #16
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	705a      	strb	r2, [r3, #1]
 8002836:	e00d      	b.n	8002854 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_PCD_EP_SetStall+0x82>
 8002870:	2302      	movs	r3, #2
 8002872:	e01c      	b.n	80028ae <HAL_PCD_EP_SetStall+0xbc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	f004 f864 	bl	8006950 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f004 fa56 	bl	8006d50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	7912      	ldrb	r2, [r2, #4]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e042      	b.n	800295a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	da0f      	bge.n	80028fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3310      	adds	r3, #16
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	705a      	strb	r2, [r3, #1]
 80028fa:	e00f      	b.n	800291c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_PCD_EP_ClrStall+0x86>
 8002938:	2302      	movs	r3, #2
 800293a:	e00e      	b.n	800295a <HAL_PCD_EP_ClrStall+0xa4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f004 f86e 	bl	8006a2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800296e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	da0c      	bge.n	8002990 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	3310      	adds	r3, #16
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e00c      	b.n	80029aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68f9      	ldr	r1, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fe91 	bl	80066d8 <USB_EPStopXfer>
 80029b6:	4603      	mov	r3, r0
 80029b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029ba:	7afb      	ldrb	r3, [r7, #11]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3310      	adds	r3, #16
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d901      	bls.n	80029fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e067      	b.n	8002acc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d902      	bls.n	8002a18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3303      	adds	r3, #3
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a20:	e026      	b.n	8002a70 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d902      	bls.n	8002a3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3303      	adds	r3, #3
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f003 feea 	bl	800682c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d809      	bhi.n	8002a9a <PCD_WriteEmptyTxFifo+0xd6>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d203      	bcs.n	8002a9a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1c3      	bne.n	8002a22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d811      	bhi.n	8002aca <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	6939      	ldr	r1, [r7, #16]
 8002ac2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	333c      	adds	r3, #60	@ 0x3c
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a19      	ldr	r2, [pc, #100]	@ (8002b6c <PCD_EP_OutXfrComplete_int+0x98>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d124      	bne.n	8002b54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b20:	461a      	mov	r2, r3
 8002b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b26:	6093      	str	r3, [r2, #8]
 8002b28:	e01a      	b.n	8002b60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	2320      	movs	r3, #32
 8002b44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f006 fc37 	bl	80093c0 <HAL_PCD_DataOutStageCallback>
 8002b52:	e005      	b.n	8002b60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f006 fc30 	bl	80093c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	4f54310a 	.word	0x4f54310a

08002b70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	333c      	adds	r3, #60	@ 0x3c
 8002b88:	3304      	adds	r3, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <PCD_EP_OutSetupPacket_int+0x64>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d90e      	bls.n	8002bc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f006 fbe9 	bl	800939c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	4f54300a 	.word	0x4f54300a

08002bd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
 8002be4:	4613      	mov	r3, r2
 8002be6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bf6:	883b      	ldrh	r3, [r7, #0]
 8002bf8:	0419      	lsls	r1, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c04:	e028      	b.n	8002c58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	4413      	add	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e00d      	b.n	8002c36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	3340      	adds	r3, #64	@ 0x40
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3301      	adds	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3ec      	bcc.n	8002c1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c40:	883b      	ldrh	r3, [r7, #0]
 8002c42:	0418      	lsls	r0, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	3340      	adds	r3, #64	@ 0x40
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	f043 0303 	orr.w	r3, r3, #3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfa:	d130      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfc:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d08:	d038      	beq.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d12:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2232      	movs	r2, #50	@ 0x32
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	4a1b      	ldr	r2, [pc, #108]	@ (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	0c9b      	lsrs	r3, r3, #18
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d30:	e002      	b.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d44:	d102      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f2      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d58:	d110      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e00f      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6a:	d007      	beq.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d6c:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d74:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	20000004 	.word	0x20000004
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002da6:	6053      	str	r3, [r2, #4]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000

08002db8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e3ca      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dca:	4b97      	ldr	r3, [pc, #604]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd4:	4b94      	ldr	r3, [pc, #592]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80e4 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <HAL_RCC_OscConfig+0x4a>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	f040 808b 	bne.w	8002f10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 8087 	bne.w	8002f10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e02:	4b89      	ldr	r3, [pc, #548]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_RCC_OscConfig+0x62>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e3a2      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	4b82      	ldr	r3, [pc, #520]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <HAL_RCC_OscConfig+0x7c>
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_OscConfig+0x88>
 8002e34:	4b7c      	ldr	r3, [pc, #496]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d223      	bcs.n	8002e8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fd53 	bl	80038f4 <RCC_SetFlashLatencyFromMSIRange>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e383      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e58:	4b73      	ldr	r3, [pc, #460]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a72      	ldr	r2, [pc, #456]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b70      	ldr	r3, [pc, #448]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	496d      	ldr	r1, [pc, #436]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e76:	4b6c      	ldr	r3, [pc, #432]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	4968      	ldr	r1, [pc, #416]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
 8002e8a:	e025      	b.n	8002ed8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8c:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a65      	ldr	r2, [pc, #404]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e92:	f043 0308 	orr.w	r3, r3, #8
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b63      	ldr	r3, [pc, #396]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4960      	ldr	r1, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	495b      	ldr	r1, [pc, #364]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fd13 	bl	80038f4 <RCC_SetFlashLatencyFromMSIRange>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e343      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ed8:	f000 fc4a 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b52      	ldr	r3, [pc, #328]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	4950      	ldr	r1, [pc, #320]	@ (800302c <HAL_RCC_OscConfig+0x274>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8003030 <HAL_RCC_OscConfig+0x278>)
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe f9bd 	bl	800127c <HAL_InitTick>
 8002f02:	4603      	mov	r3, r0
 8002f04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d052      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	e327      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d032      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f18:	4b43      	ldr	r3, [pc, #268]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f24:	f7fe f9fa 	bl	800131c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2c:	f7fe f9f6 	bl	800131c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e310      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a36      	ldr	r2, [pc, #216]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f50:	f043 0308 	orr.w	r3, r3, #8
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4931      	ldr	r1, [pc, #196]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	492c      	ldr	r1, [pc, #176]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	e01a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a29      	ldr	r2, [pc, #164]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe f9c7 	bl	800131c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f92:	f7fe f9c3 	bl	800131c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e2dd      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x1da>
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d074      	beq.n	80030aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x21a>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d10e      	bne.n	8002fea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d10b      	bne.n	8002fea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d064      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2f0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d160      	bne.n	80030a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e2ba      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x24a>
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e026      	b.n	8003050 <HAL_RCC_OscConfig+0x298>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300a:	d115      	bne.n	8003038 <HAL_RCC_OscConfig+0x280>
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a05      	ldr	r2, [pc, #20]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 8003012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a02      	ldr	r2, [pc, #8]	@ (8003028 <HAL_RCC_OscConfig+0x270>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x298>
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	08009bb8 	.word	0x08009bb8
 8003030:	20000004 	.word	0x20000004
 8003034:	20000008 	.word	0x20000008
 8003038:	4ba0      	ldr	r3, [pc, #640]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a9f      	ldr	r2, [pc, #636]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800303e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b9d      	ldr	r3, [pc, #628]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a9c      	ldr	r2, [pc, #624]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800304e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe f960 	bl	800131c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe f95c 	bl	800131c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	@ 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e276      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003072:	4b92      	ldr	r3, [pc, #584]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x2a8>
 800307e:	e014      	b.n	80030aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe f94c 	bl	800131c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe f948 	bl	800131c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	@ 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e262      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309a:	4b88      	ldr	r3, [pc, #544]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x2d0>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d060      	beq.n	8003178 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x310>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d119      	bne.n	80030f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d116      	bne.n	80030f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	4b7c      	ldr	r3, [pc, #496]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_OscConfig+0x328>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e23f      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b76      	ldr	r3, [pc, #472]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	4973      	ldr	r1, [pc, #460]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f4:	e040      	b.n	8003178 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d023      	beq.n	8003146 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fe:	4b6f      	ldr	r3, [pc, #444]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6e      	ldr	r2, [pc, #440]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe f907 	bl	800131c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe f903 	bl	800131c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e21d      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003124:	4b65      	ldr	r3, [pc, #404]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b62      	ldr	r3, [pc, #392]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	495f      	ldr	r1, [pc, #380]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
 8003144:	e018      	b.n	8003178 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b5d      	ldr	r3, [pc, #372]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5c      	ldr	r2, [pc, #368]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe f8e3 	bl	800131c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7fe f8df 	bl	800131c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1f9      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316c:	4b53      	ldr	r3, [pc, #332]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d03c      	beq.n	80031fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318c:	4b4b      	ldr	r3, [pc, #300]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800318e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003192:	4a4a      	ldr	r2, [pc, #296]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe f8be 	bl	800131c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe f8ba 	bl	800131c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e1d4      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b6:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80031b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ef      	beq.n	80031a4 <HAL_RCC_OscConfig+0x3ec>
 80031c4:	e01b      	b.n	80031fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c6:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80031c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031cc:	4a3b      	ldr	r2, [pc, #236]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe f8a1 	bl	800131c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031de:	f7fe f89d 	bl	800131c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1b7      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f0:	4b32      	ldr	r3, [pc, #200]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ef      	bne.n	80031de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80a6 	beq.w	8003358 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003210:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	4b27      	ldr	r3, [pc, #156]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	4a26      	ldr	r2, [pc, #152]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003226:	6593      	str	r3, [r2, #88]	@ 0x58
 8003228:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003234:	2301      	movs	r3, #1
 8003236:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003238:	4b21      	ldr	r3, [pc, #132]	@ (80032c0 <HAL_RCC_OscConfig+0x508>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d118      	bne.n	8003276 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003244:	4b1e      	ldr	r3, [pc, #120]	@ (80032c0 <HAL_RCC_OscConfig+0x508>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <HAL_RCC_OscConfig+0x508>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003250:	f7fe f864 	bl	800131c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7fe f860 	bl	800131c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e17a      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326a:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <HAL_RCC_OscConfig+0x508>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <HAL_RCC_OscConfig+0x4d8>
 800327e:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800328e:	e029      	b.n	80032e4 <HAL_RCC_OscConfig+0x52c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d115      	bne.n	80032c4 <HAL_RCC_OscConfig+0x50c>
 8003298:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329e:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032a8:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ae:	4a03      	ldr	r2, [pc, #12]	@ (80032bc <HAL_RCC_OscConfig+0x504>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032b8:	e014      	b.n	80032e4 <HAL_RCC_OscConfig+0x52c>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40007000 	.word	0x40007000
 80032c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ca:	4a9b      	ldr	r2, [pc, #620]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032d4:	4b98      	ldr	r3, [pc, #608]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032da:	4a97      	ldr	r2, [pc, #604]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80032dc:	f023 0304 	bic.w	r3, r3, #4
 80032e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d016      	beq.n	800331a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe f816 	bl	800131c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe f812 	bl	800131c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e12a      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330a:	4b8b      	ldr	r3, [pc, #556]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ed      	beq.n	80032f4 <HAL_RCC_OscConfig+0x53c>
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fd ffff 	bl	800131c <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd fffb 	bl	800131c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e113      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003338:	4b7f      	ldr	r3, [pc, #508]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1ed      	bne.n	8003322 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334c:	4b7a      	ldr	r3, [pc, #488]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003350:	4a79      	ldr	r2, [pc, #484]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003356:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80fe 	beq.w	800355e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003366:	2b02      	cmp	r3, #2
 8003368:	f040 80d0 	bne.w	800350c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800336c:	4b72      	ldr	r3, [pc, #456]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0203 	and.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	429a      	cmp	r2, r3
 800337e:	d130      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	3b01      	subs	r3, #1
 800338c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d127      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d11f      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033ac:	2a07      	cmp	r2, #7
 80033ae:	bf14      	ite	ne
 80033b0:	2201      	movne	r2, #1
 80033b2:	2200      	moveq	r2, #0
 80033b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d113      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	3b01      	subs	r3, #1
 80033c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d06e      	beq.n	80034c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	d069      	beq.n	80034bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033e8:	4b53      	ldr	r3, [pc, #332]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033f4:	4b50      	ldr	r3, [pc, #320]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0ad      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003404:	4b4c      	ldr	r3, [pc, #304]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a4b      	ldr	r2, [pc, #300]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800340a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800340e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003410:	f7fd ff84 	bl	800131c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fd ff80 	bl	800131c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e09a      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342a:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003436:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4b40      	ldr	r3, [pc, #256]	@ (800353c <HAL_RCC_OscConfig+0x784>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003446:	3a01      	subs	r2, #1
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003450:	0212      	lsls	r2, r2, #8
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003458:	0852      	lsrs	r2, r2, #1
 800345a:	3a01      	subs	r2, #1
 800345c:	0552      	lsls	r2, r2, #21
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003464:	0852      	lsrs	r2, r2, #1
 8003466:	3a01      	subs	r2, #1
 8003468:	0652      	lsls	r2, r2, #25
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003470:	0912      	lsrs	r2, r2, #4
 8003472:	0452      	lsls	r2, r2, #17
 8003474:	430a      	orrs	r2, r1
 8003476:	4930      	ldr	r1, [pc, #192]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003478:	4313      	orrs	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800347c:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003488:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a2a      	ldr	r2, [pc, #168]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003492:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003494:	f7fd ff42 	bl	800131c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd ff3e 	bl	800131c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e058      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ba:	e050      	b.n	800355e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e04f      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d148      	bne.n	800355e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d8:	4b17      	ldr	r3, [pc, #92]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a16      	ldr	r2, [pc, #88]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034e4:	f7fd ff1a 	bl	800131c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd ff16 	bl	800131c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e030      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x734>
 800350a:	e028      	b.n	800355e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d023      	beq.n	800355a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <HAL_RCC_OscConfig+0x780>)
 8003518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fefd 	bl	800131c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	e00c      	b.n	8003540 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd fef9 	bl	800131c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d905      	bls.n	8003540 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e013      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
 8003538:	40021000 	.word	0x40021000
 800353c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <HAL_RCC_OscConfig+0x7b0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ec      	bne.n	8003526 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_OscConfig+0x7b0>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4905      	ldr	r1, [pc, #20]	@ (8003568 <HAL_RCC_OscConfig+0x7b0>)
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_OscConfig+0x7b4>)
 8003554:	4013      	ands	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
 8003558:	e001      	b.n	800355e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	feeefffc 	.word	0xfeeefffc

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0e7      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b75      	ldr	r3, [pc, #468]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b72      	ldr	r3, [pc, #456]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4970      	ldr	r1, [pc, #448]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b6e      	ldr	r3, [pc, #440]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cf      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b66      	ldr	r3, [pc, #408]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d908      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b63      	ldr	r3, [pc, #396]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4960      	ldr	r1, [pc, #384]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d04c      	beq.n	8003688 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d121      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0a6      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360e:	4b54      	ldr	r3, [pc, #336]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d115      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e09a      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003626:	4b4e      	ldr	r3, [pc, #312]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e08e      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003636:	4b4a      	ldr	r3, [pc, #296]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e086      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003646:	4b46      	ldr	r3, [pc, #280]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4943      	ldr	r1, [pc, #268]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fd fe60 	bl	800131c <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fd fe5c 	bl	800131c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e06e      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b3a      	ldr	r3, [pc, #232]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 020c 	and.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1eb      	bne.n	8003660 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d208      	bcs.n	80036b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	492b      	ldr	r1, [pc, #172]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d210      	bcs.n	80036e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c4:	4b25      	ldr	r3, [pc, #148]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 0207 	bic.w	r2, r3, #7
 80036cc:	4923      	ldr	r1, [pc, #140]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d4:	4b21      	ldr	r3, [pc, #132]	@ (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e036      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4918      	ldr	r1, [pc, #96]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4910      	ldr	r1, [pc, #64]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003724:	f000 f824 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	490b      	ldr	r1, [pc, #44]	@ (8003764 <HAL_RCC_ClockConfig+0x1f4>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <HAL_RCC_ClockConfig+0x1f8>)
 8003742:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_ClockConfig+0x1fc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fd97 	bl	800127c <HAL_InitTick>
 800374e:	4603      	mov	r3, r0
 8003750:	72fb      	strb	r3, [r7, #11]

  return status;
 8003752:	7afb      	ldrb	r3, [r7, #11]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40022000 	.word	0x40022000
 8003760:	40021000 	.word	0x40021000
 8003764:	08009bb8 	.word	0x08009bb8
 8003768:	20000004 	.word	0x20000004
 800376c:	20000008 	.word	0x20000008

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377e:	4b3e      	ldr	r3, [pc, #248]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003788:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d121      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d11e      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037a4:	4b34      	ldr	r3, [pc, #208]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037b0:	4b31      	ldr	r3, [pc, #196]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e005      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037cc:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d102      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e8:	4b25      	ldr	r3, [pc, #148]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e004      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037f4:	4b22      	ldr	r3, [pc, #136]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d134      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0xa6>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d003      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0xac>
 8003814:	e005      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003816:	4b1a      	ldr	r3, [pc, #104]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x110>)
 8003818:	617b      	str	r3, [r7, #20]
      break;
 800381a:	e005      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800381c:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x110>)
 800381e:	617b      	str	r3, [r7, #20]
      break;
 8003820:	e002      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	617b      	str	r3, [r7, #20]
      break;
 8003826:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	3301      	adds	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	fb03 f202 	mul.w	r2, r3, r2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800384e:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	0e5b      	lsrs	r3, r3, #25
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	3301      	adds	r3, #1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003868:	69bb      	ldr	r3, [r7, #24]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	@ 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	08009bd0 	.word	0x08009bd0
 8003880:	00f42400 	.word	0x00f42400

08003884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b03      	ldr	r3, [pc, #12]	@ (8003898 <HAL_RCC_GetHCLKFreq+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038a0:	f7ff fff0 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4904      	ldr	r1, [pc, #16]	@ (80038c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08009bc8 	.word	0x08009bc8

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038cc:	f7ff ffda 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0adb      	lsrs	r3, r3, #11
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4904      	ldr	r1, [pc, #16]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40021000 	.word	0x40021000
 80038f0:	08009bc8 	.word	0x08009bc8

080038f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003900:	4b2a      	ldr	r3, [pc, #168]	@ (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800390c:	f7ff f9e0 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003910:	6178      	str	r0, [r7, #20]
 8003912:	e014      	b.n	800393e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003914:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	4a24      	ldr	r2, [pc, #144]	@ (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800391e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003920:	4b22      	ldr	r3, [pc, #136]	@ (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800392c:	f7ff f9d0 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003944:	d10b      	bne.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b80      	cmp	r3, #128	@ 0x80
 800394a:	d919      	bls.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003950:	d902      	bls.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003952:	2302      	movs	r3, #2
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e013      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003958:	2301      	movs	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e010      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b80      	cmp	r3, #128	@ 0x80
 8003962:	d902      	bls.n	800396a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003964:	2303      	movs	r3, #3
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	e00a      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b80      	cmp	r3, #128	@ 0x80
 800396e:	d102      	bne.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003970:	2302      	movs	r3, #2
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e004      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b70      	cmp	r3, #112	@ 0x70
 800397a:	d101      	bne.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800397c:	2301      	movs	r3, #1
 800397e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0207 	bic.w	r2, r3, #7
 8003988:	4909      	ldr	r1, [pc, #36]	@ (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40022000 	.word	0x40022000

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039bc:	2300      	movs	r3, #0
 80039be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c0:	2300      	movs	r3, #0
 80039c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d041      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039d8:	d02a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039de:	d824      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ea:	d81e      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f4:	d010      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039f6:	e018      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f8:	4b86      	ldr	r3, [pc, #536]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a85      	ldr	r2, [pc, #532]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a04:	e015      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fabb 	bl	8003f88 <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a16:	e00c      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3320      	adds	r3, #32
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fba6 	bl	8004170 <RCCEx_PLLSAI2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a38:	4b76      	ldr	r3, [pc, #472]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a46:	4973      	ldr	r1, [pc, #460]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a4e:	e001      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d041      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a68:	d02a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a6e:	d824      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a74:	d008      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a7a:	d81e      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a86:	e018      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a88:	4b62      	ldr	r3, [pc, #392]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a61      	ldr	r2, [pc, #388]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a94:	e015      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fa73 	bl	8003f88 <RCCEx_PLLSAI1_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa6:	e00c      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3320      	adds	r3, #32
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fb5e 	bl	8004170 <RCCEx_PLLSAI2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	74fb      	strb	r3, [r7, #19]
      break;
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ac8:	4b52      	ldr	r3, [pc, #328]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad6:	494f      	ldr	r1, [pc, #316]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ade:	e001      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80a0 	beq.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0c:	4b41      	ldr	r3, [pc, #260]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	4a40      	ldr	r2, [pc, #256]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b18:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b24:	2301      	movs	r3, #1
 8003b26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b28:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b34:	f7fd fbf2 	bl	800131c <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd fbee 	bl	800131c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d902      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b4e:	e005      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b50:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ef      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d15c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b62:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d019      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b80:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b8c:	4b21      	ldr	r3, [pc, #132]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bac:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fd fbad 	bl	800131c <HAL_GetTick>
 8003bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc4:	e00b      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd fba9 	bl	800131c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d902      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	74fb      	strb	r3, [r7, #19]
            break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bde:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ec      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c02:	4904      	ldr	r1, [pc, #16]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	74bb      	strb	r3, [r7, #18]
 8003c10:	e006      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c20:	7c7b      	ldrb	r3, [r7, #17]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b9e      	ldr	r3, [pc, #632]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	4a9d      	ldr	r2, [pc, #628]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3e:	4b98      	ldr	r3, [pc, #608]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4c:	4994      	ldr	r1, [pc, #592]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c60:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f023 020c 	bic.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	498c      	ldr	r1, [pc, #560]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c82:	4b87      	ldr	r3, [pc, #540]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	4983      	ldr	r1, [pc, #524]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	497b      	ldr	r1, [pc, #492]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc6:	4b76      	ldr	r3, [pc, #472]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	4972      	ldr	r1, [pc, #456]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce8:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	496a      	ldr	r1, [pc, #424]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	4961      	ldr	r1, [pc, #388]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	4959      	ldr	r1, [pc, #356]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4e:	4b54      	ldr	r3, [pc, #336]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5c:	4950      	ldr	r1, [pc, #320]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d70:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	4948      	ldr	r1, [pc, #288]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d92:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	493f      	ldr	r1, [pc, #252]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d028      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc2:	4937      	ldr	r1, [pc, #220]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd4:	4b32      	ldr	r3, [pc, #200]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a31      	ldr	r2, [pc, #196]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dde:	60d3      	str	r3, [r2, #12]
 8003de0:	e011      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f8c8 	bl	8003f88 <RCCEx_PLLSAI1_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d028      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e12:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e20:	491f      	ldr	r1, [pc, #124]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e3c:	60d3      	str	r3, [r2, #12]
 8003e3e:	e011      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f899 	bl	8003f88 <RCCEx_PLLSAI1_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d02b      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7e:	4908      	ldr	r1, [pc, #32]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e90:	4b03      	ldr	r3, [pc, #12]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a02      	ldr	r2, [pc, #8]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9a:	60d3      	str	r3, [r2, #12]
 8003e9c:	e014      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f867 	bl	8003f88 <RCCEx_PLLSAI1_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02f      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ee2:	4928      	ldr	r1, [pc, #160]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef2:	d10d      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f844 	bl	8003f88 <RCCEx_PLLSAI1_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	74bb      	strb	r3, [r7, #18]
 8003f0e:	e011      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3320      	adds	r3, #32
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f925 	bl	8004170 <RCCEx_PLLSAI2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f40:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f4e:	490d      	ldr	r1, [pc, #52]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f72:	4904      	ldr	r1, [pc, #16]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000

08003f88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f96:	4b75      	ldr	r3, [pc, #468]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d018      	beq.n	8003fd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fa2:	4b72      	ldr	r3, [pc, #456]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0203 	and.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d10d      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fba:	4b6c      	ldr	r3, [pc, #432]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d047      	beq.n	800405e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	e044      	b.n	800405e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d018      	beq.n	800400e <RCCEx_PLLSAI1_Config+0x86>
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d825      	bhi.n	800402c <RCCEx_PLLSAI1_Config+0xa4>
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d002      	beq.n	8003fea <RCCEx_PLLSAI1_Config+0x62>
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d009      	beq.n	8003ffc <RCCEx_PLLSAI1_Config+0x74>
 8003fe8:	e020      	b.n	800402c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fea:	4b60      	ldr	r3, [pc, #384]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffa:	e01a      	b.n	8004032 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400c:	e013      	b.n	8004036 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400e:	4b57      	ldr	r3, [pc, #348]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800401a:	4b54      	ldr	r3, [pc, #336]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800402a:	e006      	b.n	800403a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e004      	b.n	800403c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800403a:	bf00      	nop
    }

    if(status == HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004042:	4b4a      	ldr	r3, [pc, #296]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	3b01      	subs	r3, #1
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	430b      	orrs	r3, r1
 8004058:	4944      	ldr	r1, [pc, #272]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d17d      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004064:	4b41      	ldr	r3, [pc, #260]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a40      	ldr	r2, [pc, #256]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800406e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fd f954 	bl	800131c <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004076:	e009      	b.n	800408c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004078:	f7fd f950 	bl	800131c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d902      	bls.n	800408c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	73fb      	strb	r3, [r7, #15]
        break;
 800408a:	e005      	b.n	8004098 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800408c:	4b37      	ldr	r3, [pc, #220]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ef      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d160      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d111      	bne.n	80040c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a4:	4b31      	ldr	r3, [pc, #196]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	0211      	lsls	r1, r2, #8
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	0912      	lsrs	r2, r2, #4
 80040bc:	0452      	lsls	r2, r2, #17
 80040be:	430a      	orrs	r2, r1
 80040c0:	492a      	ldr	r1, [pc, #168]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	610b      	str	r3, [r1, #16]
 80040c6:	e027      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d112      	bne.n	80040f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ce:	4b27      	ldr	r3, [pc, #156]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6892      	ldr	r2, [r2, #8]
 80040de:	0211      	lsls	r1, r2, #8
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6912      	ldr	r2, [r2, #16]
 80040e4:	0852      	lsrs	r2, r2, #1
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0552      	lsls	r2, r2, #21
 80040ea:	430a      	orrs	r2, r1
 80040ec:	491f      	ldr	r1, [pc, #124]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	610b      	str	r3, [r1, #16]
 80040f2:	e011      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f4:	4b1d      	ldr	r3, [pc, #116]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6892      	ldr	r2, [r2, #8]
 8004104:	0211      	lsls	r1, r2, #8
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6952      	ldr	r2, [r2, #20]
 800410a:	0852      	lsrs	r2, r2, #1
 800410c:	3a01      	subs	r2, #1
 800410e:	0652      	lsls	r2, r2, #25
 8004110:	430a      	orrs	r2, r1
 8004112:	4916      	ldr	r1, [pc, #88]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004118:	4b14      	ldr	r3, [pc, #80]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a13      	ldr	r2, [pc, #76]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fd f8fa 	bl	800131c <HAL_GetTick>
 8004128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800412a:	e009      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800412c:	f7fd f8f6 	bl	800131c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d902      	bls.n	8004140 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	73fb      	strb	r3, [r7, #15]
          break;
 800413e:	e005      	b.n	800414c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ef      	beq.n	800412c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	4904      	ldr	r1, [pc, #16]	@ (800416c <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000

08004170 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417e:	4b6a      	ldr	r3, [pc, #424]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800418a:	4b67      	ldr	r3, [pc, #412]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0203 	and.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d10d      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
       ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041a2:	4b61      	ldr	r3, [pc, #388]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
       ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d047      	beq.n	8004246 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e044      	b.n	8004246 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d018      	beq.n	80041f6 <RCCEx_PLLSAI2_Config+0x86>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d825      	bhi.n	8004214 <RCCEx_PLLSAI2_Config+0xa4>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <RCCEx_PLLSAI2_Config+0x62>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d009      	beq.n	80041e4 <RCCEx_PLLSAI2_Config+0x74>
 80041d0:	e020      	b.n	8004214 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d2:	4b55      	ldr	r3, [pc, #340]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b50      	ldr	r3, [pc, #320]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e013      	b.n	800421e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004202:	4b49      	ldr	r3, [pc, #292]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004212:	e006      	b.n	8004222 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004222:	bf00      	nop
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800422a:	4b3f      	ldr	r3, [pc, #252]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	430b      	orrs	r3, r1
 8004240:	4939      	ldr	r1, [pc, #228]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d167      	bne.n	800431c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800424c:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a35      	ldr	r2, [pc, #212]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fd f860 	bl	800131c <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800425e:	e009      	b.n	8004274 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004260:	f7fd f85c 	bl	800131c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
        break;
 8004272:	e005      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004274:	4b2c      	ldr	r3, [pc, #176]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ef      	bne.n	8004260 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d14a      	bne.n	800431c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800428c:	4b26      	ldr	r3, [pc, #152]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	0211      	lsls	r1, r2, #8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	0912      	lsrs	r2, r2, #4
 80042a4:	0452      	lsls	r2, r2, #17
 80042a6:	430a      	orrs	r2, r1
 80042a8:	491f      	ldr	r1, [pc, #124]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	614b      	str	r3, [r1, #20]
 80042ae:	e011      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6892      	ldr	r2, [r2, #8]
 80042c0:	0211      	lsls	r1, r2, #8
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6912      	ldr	r2, [r2, #16]
 80042c6:	0852      	lsrs	r2, r2, #1
 80042c8:	3a01      	subs	r2, #1
 80042ca:	0652      	lsls	r2, r2, #25
 80042cc:	430a      	orrs	r2, r1
 80042ce:	4916      	ldr	r1, [pc, #88]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042d4:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd f81c 	bl	800131c <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e6:	e009      	b.n	80042fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042e8:	f7fd f818 	bl	800131c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	73fb      	strb	r3, [r7, #15]
          break;
 80042fa:	e005      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ef      	beq.n	80042e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	4904      	ldr	r1, [pc, #16]	@ (8004328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000

0800432c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0be      	b.n	80044bc <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800434e:	d009      	beq.n	8004364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	61da      	str	r2, [r3, #28]
 8004356:	e005      	b.n	8004364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fc fe3f 	bl	8000ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004394:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800439e:	d902      	bls.n	80043a6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e002      	b.n	80043ac <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80043b4:	d007      	beq.n	80043c6 <HAL_SPI_Init+0x9a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043be:	d002      	beq.n	80043c6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004408:	ea42 0103 	orr.w	r1, r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004424:	d11b      	bne.n	800445e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004436:	d903      	bls.n	8004440 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
 800443e:	e002      	b.n	8004446 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	2b02      	cmp	r3, #2
 800444c:	d107      	bne.n	800445e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	f003 0204 	and.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004484:	ea42 0103 	orr.w	r1, r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449e:	d105      	bne.n	80044ac <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	b292      	uxth	r2, r2
 80044aa:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044d8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d00c      	beq.n	8004500 <HAL_SPI_TransmitReceive_IT+0x3c>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <HAL_SPI_TransmitReceive_IT+0x38>
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d001      	beq.n	8004500 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0a5      	b.n	800464c <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_SPI_TransmitReceive_IT+0x4e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_SPI_TransmitReceive_IT+0x4e>
 800450c:	887b      	ldrh	r3, [r7, #2]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e09a      	b.n	800464c <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_SPI_TransmitReceive_IT+0x60>
 8004520:	2302      	movs	r3, #2
 8004522:	e093      	b.n	800464c <HAL_SPI_TransmitReceive_IT+0x188>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b04      	cmp	r3, #4
 8004536:	d003      	beq.n	8004540 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2205      	movs	r2, #5
 800453c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004576:	d906      	bls.n	8004586 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a37      	ldr	r2, [pc, #220]	@ (8004658 <HAL_SPI_TransmitReceive_IT+0x194>)
 800457c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a36      	ldr	r2, [pc, #216]	@ (800465c <HAL_SPI_TransmitReceive_IT+0x198>)
 8004582:	651a      	str	r2, [r3, #80]	@ 0x50
 8004584:	e005      	b.n	8004592 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a35      	ldr	r2, [pc, #212]	@ (8004660 <HAL_SPI_TransmitReceive_IT+0x19c>)
 800458a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a35      	ldr	r2, [pc, #212]	@ (8004664 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8004590:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459a:	d11f      	bne.n	80045dc <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045aa:	d806      	bhi.n	80045ba <HAL_SPI_TransmitReceive_IT+0xf6>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d102      	bne.n	80045ba <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2202      	movs	r2, #2
 80045b8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e002      	b.n	80045e2 <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045ea:	d802      	bhi.n	80045f2 <HAL_SPI_TransmitReceive_IT+0x12e>
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d908      	bls.n	8004604 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	e007      	b.n	8004614 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004612:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b40      	cmp	r3, #64	@ 0x40
 8004620:	d007      	beq.n	8004632 <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004630:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004648:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	08004a75 	.word	0x08004a75
 800465c:	08004b25 	.word	0x08004b25
 8004660:	0800487d 	.word	0x0800487d
 8004664:	080049b9 	.word	0x080049b9

08004668 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10e      	bne.n	80046a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
    return;
 80046a6:	e0ce      	b.n	8004846 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_SPI_IRQHandler+0x5e>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d004      	beq.n	80046c6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
    return;
 80046c4:	e0bf      	b.n	8004846 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <HAL_SPI_IRQHandler+0x7e>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80b0 	beq.w	8004846 <HAL_SPI_IRQHandler+0x1de>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80aa 	beq.w	8004846 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d023      	beq.n	8004744 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d011      	beq.n	800472c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470c:	f043 0204 	orr.w	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	e00b      	b.n	8004744 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
        return;
 8004742:	e080      	b.n	8004846 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d014      	beq.n	8004778 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d04f      	beq.n	8004844 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047b2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_SPI_IRQHandler+0x168>
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d034      	beq.n	800483a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0203 	bic.w	r2, r2, #3
 80047de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d011      	beq.n	800480c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ec:	4a17      	ldr	r2, [pc, #92]	@ (800484c <HAL_SPI_IRQHandler+0x1e4>)
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fc fed2 	bl	800159e <HAL_DMA_Abort_IT>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004804:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004818:	4a0c      	ldr	r2, [pc, #48]	@ (800484c <HAL_SPI_IRQHandler+0x1e4>)
 800481a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004820:	4618      	mov	r0, r3
 8004822:	f7fc febc 	bl	800159e <HAL_DMA_Abort_IT>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004830:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004838:	e003      	b.n	8004842 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fba2 	bl	8000f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004840:	e000      	b.n	8004844 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004842:	bf00      	nop
    return;
 8004844:	bf00      	nop
  }
}
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	08004851 	.word	0x08004851

08004850 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7fc fb89 	bl	8000f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d923      	bls.n	80048d8 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	b292      	uxth	r2, r2
 800489c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b02      	subs	r3, #2
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d11f      	bne.n	8004906 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	e016      	b.n	8004906 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f103 020c 	add.w	r2, r3, #12
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d120      	bne.n	8004954 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491a:	d10b      	bne.n	8004934 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800492a:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0b      	ldr	r2, [pc, #44]	@ (800495c <SPI_2linesRxISR_8BIT+0xe0>)
 8004930:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8004932:	e00f      	b.n	8004954 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004942:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa92 	bl	8004e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	08004961 	.word	0x08004961

08004960 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800497c:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004982:	1e5a      	subs	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800499e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa64 	bl	8004e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d912      	bls.n	80049f0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b02      	subs	r3, #2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049ee:	e012      	b.n	8004a16 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	7812      	ldrb	r2, [r2, #0]
 80049fc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d126      	bne.n	8004a6e <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a28:	d110      	bne.n	8004a4c <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a38:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a48:	605a      	str	r2, [r3, #4]
      return;
 8004a4a:	e010      	b.n	8004a6e <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a5a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fa05 	bl	8004e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	b292      	uxth	r2, r2
 8004a88:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d118      	bne.n	8004ae4 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aba:	d103      	bne.n	8004ac4 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0b      	ldr	r2, [pc, #44]	@ (8004aec <SPI_2linesRxISR_16BIT+0x78>)
 8004ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8004ac2:	e00f      	b.n	8004ae4 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ad2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f9ca 	bl	8004e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	08004af1 	.word	0x08004af1

08004af0 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8004b04:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b14:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f9ae 	bl	8004e78 <SPI_CloseRxTx_ISR>
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d126      	bne.n	8004ba8 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b62:	d110      	bne.n	8004b86 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b72:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b82:	605a      	str	r2, [r3, #4]
      return;
 8004b84:	e010      	b.n	8004ba8 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b94:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f968 	bl	8004e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bc0:	f7fc fbac 	bl	800131c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bd0:	f7fc fba4 	bl	800131c <HAL_GetTick>
 8004bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bd6:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	015b      	lsls	r3, r3, #5
 8004bdc:	0d1b      	lsrs	r3, r3, #20
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be6:	e054      	b.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bee:	d050      	beq.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bf0:	f7fc fb94 	bl	800131c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d902      	bls.n	8004c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d13d      	bne.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c1e:	d111      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c28:	d004      	beq.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c32:	d107      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4c:	d10f      	bne.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e017      	b.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d19b      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000004 	.word	0x20000004

08004cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cd2:	f7fc fb23 	bl	800131c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	4413      	add	r3, r2
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ce2:	f7fc fb1b 	bl	800131c <HAL_GetTick>
 8004ce6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8004de8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00da      	lsls	r2, r3, #3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	0d1b      	lsrs	r3, r3, #20
 8004d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d08:	e060      	b.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d10:	d107      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d28:	d050      	beq.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d2a:	f7fc faf7 	bl	800131c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d902      	bls.n	8004d40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d13d      	bne.n	8004dbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d58:	d111      	bne.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d62:	d004      	beq.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6c:	d107      	bne.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d86:	d10f      	bne.n	8004da8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e010      	b.n	8004dde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d196      	bne.n	8004d0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3728      	adds	r7, #40	@ 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000004 	.word	0x20000004

08004dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff ff5b 	bl	8004cc0 <SPI_WaitFifoStateUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e14:	f043 0220 	orr.w	r2, r3, #32
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e027      	b.n	8004e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2200      	movs	r2, #0
 8004e28:	2180      	movs	r1, #128	@ 0x80
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fec0 	bl	8004bb0 <SPI_WaitFlagStateUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e014      	b.n	8004e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ff34 	bl	8004cc0 <SPI_WaitFifoStateUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e000      	b.n	8004e70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e80:	f7fc fa4c 	bl	800131c <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0220 	bic.w	r2, r2, #32
 8004e94:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	2164      	movs	r1, #100	@ 0x64
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ffa6 	bl	8004dec <SPI_EndRxTxTransaction>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d112      	bne.n	8004ee6 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ecc:	f043 0202 	orr.w	r2, r3, #2
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004edc:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc f850 	bl	8000f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004ee4:	e020      	b.n	8004f28 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d115      	bne.n	8004f1a <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d107      	bne.n	8004f0a <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc f81e 	bl	8000f44 <HAL_SPI_RxCpltCallback>
}
 8004f08:	e00e      	b.n	8004f28 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc f820 	bl	8000f58 <HAL_SPI_TxRxCpltCallback>
}
 8004f18:	e006      	b.n	8004f28 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc f82e 	bl	8000f84 <HAL_SPI_ErrorCallback>
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e040      	b.n	8004fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc f89c 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	@ 0x24
 8004f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fae0 	bl	800553c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f825 	bl	8004fcc <UART_SetConfig>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01b      	b.n	8004fc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fb5f 	bl	8005680 <UART_CheckIdleState>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd0:	b08a      	sub	sp, #40	@ 0x28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4ba4      	ldr	r3, [pc, #656]	@ (800528c <UART_SetConfig+0x2c0>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005004:	430b      	orrs	r3, r1
 8005006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a99      	ldr	r2, [pc, #612]	@ (8005290 <UART_SetConfig+0x2c4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005034:	4313      	orrs	r3, r2
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a90      	ldr	r2, [pc, #576]	@ (8005294 <UART_SetConfig+0x2c8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d126      	bne.n	80050a4 <UART_SetConfig+0xd8>
 8005056:	4b90      	ldr	r3, [pc, #576]	@ (8005298 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b03      	cmp	r3, #3
 8005062:	d81b      	bhi.n	800509c <UART_SetConfig+0xd0>
 8005064:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <UART_SetConfig+0xa0>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	0800508d 	.word	0x0800508d
 8005074:	08005085 	.word	0x08005085
 8005078:	08005095 	.word	0x08005095
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e116      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e112      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e10e      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e10a      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e106      	b.n	80052b2 <UART_SetConfig+0x2e6>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a7c      	ldr	r2, [pc, #496]	@ (800529c <UART_SetConfig+0x2d0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d138      	bne.n	8005120 <UART_SetConfig+0x154>
 80050ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005298 <UART_SetConfig+0x2cc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d82d      	bhi.n	8005118 <UART_SetConfig+0x14c>
 80050bc:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <UART_SetConfig+0xf8>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050f9 	.word	0x080050f9
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005119 	.word	0x08005119
 80050d0:	08005119 	.word	0x08005119
 80050d4:	08005109 	.word	0x08005109
 80050d8:	08005119 	.word	0x08005119
 80050dc:	08005119 	.word	0x08005119
 80050e0:	08005119 	.word	0x08005119
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005119 	.word	0x08005119
 80050ec:	08005119 	.word	0x08005119
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005111 	.word	0x08005111
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fe:	e0d8      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005100:	2302      	movs	r3, #2
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005106:	e0d4      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510e:	e0d0      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005116:	e0cc      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e0c8      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a5e      	ldr	r2, [pc, #376]	@ (80052a0 <UART_SetConfig+0x2d4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d125      	bne.n	8005176 <UART_SetConfig+0x1aa>
 800512a:	4b5b      	ldr	r3, [pc, #364]	@ (8005298 <UART_SetConfig+0x2cc>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005130:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005134:	2b30      	cmp	r3, #48	@ 0x30
 8005136:	d016      	beq.n	8005166 <UART_SetConfig+0x19a>
 8005138:	2b30      	cmp	r3, #48	@ 0x30
 800513a:	d818      	bhi.n	800516e <UART_SetConfig+0x1a2>
 800513c:	2b20      	cmp	r3, #32
 800513e:	d00a      	beq.n	8005156 <UART_SetConfig+0x18a>
 8005140:	2b20      	cmp	r3, #32
 8005142:	d814      	bhi.n	800516e <UART_SetConfig+0x1a2>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <UART_SetConfig+0x182>
 8005148:	2b10      	cmp	r3, #16
 800514a:	d008      	beq.n	800515e <UART_SetConfig+0x192>
 800514c:	e00f      	b.n	800516e <UART_SetConfig+0x1a2>
 800514e:	2300      	movs	r3, #0
 8005150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005154:	e0ad      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005156:	2302      	movs	r3, #2
 8005158:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515c:	e0a9      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800515e:	2304      	movs	r3, #4
 8005160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005164:	e0a5      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005166:	2308      	movs	r3, #8
 8005168:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516c:	e0a1      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800516e:	2310      	movs	r3, #16
 8005170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005174:	e09d      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4a      	ldr	r2, [pc, #296]	@ (80052a4 <UART_SetConfig+0x2d8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d125      	bne.n	80051cc <UART_SetConfig+0x200>
 8005180:	4b45      	ldr	r3, [pc, #276]	@ (8005298 <UART_SetConfig+0x2cc>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800518a:	2bc0      	cmp	r3, #192	@ 0xc0
 800518c:	d016      	beq.n	80051bc <UART_SetConfig+0x1f0>
 800518e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005190:	d818      	bhi.n	80051c4 <UART_SetConfig+0x1f8>
 8005192:	2b80      	cmp	r3, #128	@ 0x80
 8005194:	d00a      	beq.n	80051ac <UART_SetConfig+0x1e0>
 8005196:	2b80      	cmp	r3, #128	@ 0x80
 8005198:	d814      	bhi.n	80051c4 <UART_SetConfig+0x1f8>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <UART_SetConfig+0x1d8>
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d008      	beq.n	80051b4 <UART_SetConfig+0x1e8>
 80051a2:	e00f      	b.n	80051c4 <UART_SetConfig+0x1f8>
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051aa:	e082      	b.n	80052b2 <UART_SetConfig+0x2e6>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b2:	e07e      	b.n	80052b2 <UART_SetConfig+0x2e6>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ba:	e07a      	b.n	80052b2 <UART_SetConfig+0x2e6>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c2:	e076      	b.n	80052b2 <UART_SetConfig+0x2e6>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ca:	e072      	b.n	80052b2 <UART_SetConfig+0x2e6>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a35      	ldr	r2, [pc, #212]	@ (80052a8 <UART_SetConfig+0x2dc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d12a      	bne.n	800522c <UART_SetConfig+0x260>
 80051d6:	4b30      	ldr	r3, [pc, #192]	@ (8005298 <UART_SetConfig+0x2cc>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051e4:	d01a      	beq.n	800521c <UART_SetConfig+0x250>
 80051e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ea:	d81b      	bhi.n	8005224 <UART_SetConfig+0x258>
 80051ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f0:	d00c      	beq.n	800520c <UART_SetConfig+0x240>
 80051f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f6:	d815      	bhi.n	8005224 <UART_SetConfig+0x258>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <UART_SetConfig+0x238>
 80051fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005200:	d008      	beq.n	8005214 <UART_SetConfig+0x248>
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x258>
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520a:	e052      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800520c:	2302      	movs	r3, #2
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005212:	e04e      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521a:	e04a      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005222:	e046      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522a:	e042      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a17      	ldr	r2, [pc, #92]	@ (8005290 <UART_SetConfig+0x2c4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d13a      	bne.n	80052ac <UART_SetConfig+0x2e0>
 8005236:	4b18      	ldr	r3, [pc, #96]	@ (8005298 <UART_SetConfig+0x2cc>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005240:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005244:	d01a      	beq.n	800527c <UART_SetConfig+0x2b0>
 8005246:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800524a:	d81b      	bhi.n	8005284 <UART_SetConfig+0x2b8>
 800524c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005250:	d00c      	beq.n	800526c <UART_SetConfig+0x2a0>
 8005252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005256:	d815      	bhi.n	8005284 <UART_SetConfig+0x2b8>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <UART_SetConfig+0x298>
 800525c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005260:	d008      	beq.n	8005274 <UART_SetConfig+0x2a8>
 8005262:	e00f      	b.n	8005284 <UART_SetConfig+0x2b8>
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800526a:	e022      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800526c:	2302      	movs	r3, #2
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005272:	e01e      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527a:	e01a      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e016      	b.n	80052b2 <UART_SetConfig+0x2e6>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e012      	b.n	80052b2 <UART_SetConfig+0x2e6>
 800528c:	efff69f3 	.word	0xefff69f3
 8005290:	40008000 	.word	0x40008000
 8005294:	40013800 	.word	0x40013800
 8005298:	40021000 	.word	0x40021000
 800529c:	40004400 	.word	0x40004400
 80052a0:	40004800 	.word	0x40004800
 80052a4:	40004c00 	.word	0x40004c00
 80052a8:	40005000 	.word	0x40005000
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a9f      	ldr	r2, [pc, #636]	@ (8005534 <UART_SetConfig+0x568>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d17a      	bne.n	80053b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d824      	bhi.n	800530e <UART_SetConfig+0x342>
 80052c4:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <UART_SetConfig+0x300>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	0800530f 	.word	0x0800530f
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	0800530f 	.word	0x0800530f
 80052dc:	080052ff 	.word	0x080052ff
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	0800530f 	.word	0x0800530f
 80052e8:	0800530f 	.word	0x0800530f
 80052ec:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe fad4 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
        break;
 80052f6:	e010      	b.n	800531a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005538 <UART_SetConfig+0x56c>)
 80052fa:	61fb      	str	r3, [r7, #28]
        break;
 80052fc:	e00d      	b.n	800531a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe fa37 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8005302:	61f8      	str	r0, [r7, #28]
        break;
 8005304:	e009      	b.n	800531a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530a:	61fb      	str	r3, [r7, #28]
        break;
 800530c:	e005      	b.n	800531a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80fb 	beq.w	8005518 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	429a      	cmp	r2, r3
 8005330:	d305      	bcc.n	800533e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005344:	e0e8      	b.n	8005518 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2200      	movs	r2, #0
 800534a:	461c      	mov	r4, r3
 800534c:	4615      	mov	r5, r2
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	022b      	lsls	r3, r5, #8
 8005358:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800535c:	0222      	lsls	r2, r4, #8
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6849      	ldr	r1, [r1, #4]
 8005362:	0849      	lsrs	r1, r1, #1
 8005364:	2000      	movs	r0, #0
 8005366:	4688      	mov	r8, r1
 8005368:	4681      	mov	r9, r0
 800536a:	eb12 0a08 	adds.w	sl, r2, r8
 800536e:	eb43 0b09 	adc.w	fp, r3, r9
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005380:	4650      	mov	r0, sl
 8005382:	4659      	mov	r1, fp
 8005384:	f7fa ff20 	bl	80001c8 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005396:	d308      	bcc.n	80053aa <UART_SetConfig+0x3de>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800539e:	d204      	bcs.n	80053aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	60da      	str	r2, [r3, #12]
 80053a8:	e0b6      	b.n	8005518 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053b0:	e0b2      	b.n	8005518 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ba:	d15e      	bne.n	800547a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d828      	bhi.n	8005416 <UART_SetConfig+0x44a>
 80053c4:	a201      	add	r2, pc, #4	@ (adr r2, 80053cc <UART_SetConfig+0x400>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005417 	.word	0x08005417
 80053dc:	08005407 	.word	0x08005407
 80053e0:	08005417 	.word	0x08005417
 80053e4:	08005417 	.word	0x08005417
 80053e8:	08005417 	.word	0x08005417
 80053ec:	0800540f 	.word	0x0800540f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7fe fa54 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 80053f4:	61f8      	str	r0, [r7, #28]
        break;
 80053f6:	e014      	b.n	8005422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f8:	f7fe fa66 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 80053fc:	61f8      	str	r0, [r7, #28]
        break;
 80053fe:	e010      	b.n	8005422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005400:	4b4d      	ldr	r3, [pc, #308]	@ (8005538 <UART_SetConfig+0x56c>)
 8005402:	61fb      	str	r3, [r7, #28]
        break;
 8005404:	e00d      	b.n	8005422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fe f9b3 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800540a:	61f8      	str	r0, [r7, #28]
        break;
 800540c:	e009      	b.n	8005422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005412:	61fb      	str	r3, [r7, #28]
        break;
 8005414:	e005      	b.n	8005422 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d077      	beq.n	8005518 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	005a      	lsls	r2, r3, #1
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	441a      	add	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d916      	bls.n	8005472 <UART_SetConfig+0x4a6>
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544a:	d212      	bcs.n	8005472 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f023 030f 	bic.w	r3, r3, #15
 8005454:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	b29b      	uxth	r3, r3
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	b29a      	uxth	r2, r3
 8005462:	8afb      	ldrh	r3, [r7, #22]
 8005464:	4313      	orrs	r3, r2
 8005466:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	8afa      	ldrh	r2, [r7, #22]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e052      	b.n	8005518 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005478:	e04e      	b.n	8005518 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800547a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800547e:	2b08      	cmp	r3, #8
 8005480:	d827      	bhi.n	80054d2 <UART_SetConfig+0x506>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x4bc>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054d3 	.word	0x080054d3
 8005498:	080054c3 	.word	0x080054c3
 800549c:	080054d3 	.word	0x080054d3
 80054a0:	080054d3 	.word	0x080054d3
 80054a4:	080054d3 	.word	0x080054d3
 80054a8:	080054cb 	.word	0x080054cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe f9f6 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 80054b0:	61f8      	str	r0, [r7, #28]
        break;
 80054b2:	e014      	b.n	80054de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7fe fa08 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 80054b8:	61f8      	str	r0, [r7, #28]
        break;
 80054ba:	e010      	b.n	80054de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <UART_SetConfig+0x56c>)
 80054be:	61fb      	str	r3, [r7, #28]
        break;
 80054c0:	e00d      	b.n	80054de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fe f955 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 80054c6:	61f8      	str	r0, [r7, #28]
        break;
 80054c8:	e009      	b.n	80054de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ce:	61fb      	str	r3, [r7, #28]
        break;
 80054d0:	e005      	b.n	80054de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054dc:	bf00      	nop
    }

    if (pclk != 0U)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d019      	beq.n	8005518 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	085a      	lsrs	r2, r3, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	441a      	add	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b0f      	cmp	r3, #15
 80054fc:	d909      	bls.n	8005512 <UART_SetConfig+0x546>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005504:	d205      	bcs.n	8005512 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60da      	str	r2, [r3, #12]
 8005510:	e002      	b.n	8005518 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005524:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	@ 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005532:	bf00      	nop
 8005534:	40008000 	.word	0x40008000
 8005538:	00f42400 	.word	0x00f42400

0800553c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01a      	beq.n	8005652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563a:	d10a      	bne.n	8005652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b098      	sub	sp, #96	@ 0x60
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005690:	f7fb fe44 	bl	800131c <HAL_GetTick>
 8005694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d12e      	bne.n	8005702 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ac:	2200      	movs	r2, #0
 80056ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f88c 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d021      	beq.n	8005702 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e062      	b.n	80057c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d149      	bne.n	80057a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f856 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d03c      	beq.n	80057a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	623b      	str	r3, [r7, #32]
   return(result);
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005748:	633b      	str	r3, [r7, #48]	@ 0x30
 800574a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800574e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60fb      	str	r3, [r7, #12]
   return(result);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800577c:	61fa      	str	r2, [r7, #28]
 800577e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	69b9      	ldr	r1, [r7, #24]
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	617b      	str	r3, [r7, #20]
   return(result);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e5      	bne.n	800575c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e011      	b.n	80057c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3758      	adds	r7, #88	@ 0x58
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	e04f      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057e8:	d04b      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fb fd97 	bl	800131c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e04e      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d037      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b80      	cmp	r3, #128	@ 0x80
 8005816:	d034      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b40      	cmp	r3, #64	@ 0x40
 800581c:	d031      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d110      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2208      	movs	r2, #8
 8005832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f838 	bl	80058aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2208      	movs	r2, #8
 800583e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e029      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d111      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f81e 	bl	80058aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e00f      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4013      	ands	r3, r2
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	bf0c      	ite	eq
 8005892:	2301      	moveq	r3, #1
 8005894:	2300      	movne	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	429a      	cmp	r2, r3
 800589e:	d0a0      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b095      	sub	sp, #84	@ 0x54
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800590a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591c:	2b01      	cmp	r3, #1
 800591e:	d118      	bne.n	8005952 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	60bb      	str	r3, [r7, #8]
   return(result);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f023 0310 	bic.w	r3, r3, #16
 8005934:	647b      	str	r3, [r7, #68]	@ 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	613b      	str	r3, [r7, #16]
   return(result);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e6      	bne.n	8005920 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005966:	bf00      	nop
 8005968:	3754      	adds	r7, #84	@ 0x54
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005972:	b084      	sub	sp, #16
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	f107 001c 	add.w	r0, r7, #28
 8005980:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fa25 	bl	8006de0 <USB_CoreReset>
 8005996:	4603      	mov	r3, r0
 8005998:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800599a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80059ae:	e005      	b.n	80059bc <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c8:	b004      	add	sp, #16
 80059ca:	4770      	bx	lr

080059cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d165      	bne.n	8005aac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4a3e      	ldr	r2, [pc, #248]	@ (8005adc <USB_SetTurnaroundTime+0x110>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d906      	bls.n	80059f6 <USB_SetTurnaroundTime+0x2a>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a3d      	ldr	r2, [pc, #244]	@ (8005ae0 <USB_SetTurnaroundTime+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d202      	bcs.n	80059f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059f0:	230f      	movs	r3, #15
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e05c      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4a39      	ldr	r2, [pc, #228]	@ (8005ae0 <USB_SetTurnaroundTime+0x114>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d306      	bcc.n	8005a0c <USB_SetTurnaroundTime+0x40>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4a38      	ldr	r2, [pc, #224]	@ (8005ae4 <USB_SetTurnaroundTime+0x118>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d202      	bcs.n	8005a0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a06:	230e      	movs	r3, #14
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e051      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a35      	ldr	r2, [pc, #212]	@ (8005ae4 <USB_SetTurnaroundTime+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d306      	bcc.n	8005a22 <USB_SetTurnaroundTime+0x56>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a34      	ldr	r2, [pc, #208]	@ (8005ae8 <USB_SetTurnaroundTime+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d202      	bcs.n	8005a22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a1c:	230d      	movs	r3, #13
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e046      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a30      	ldr	r2, [pc, #192]	@ (8005ae8 <USB_SetTurnaroundTime+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d306      	bcc.n	8005a38 <USB_SetTurnaroundTime+0x6c>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005aec <USB_SetTurnaroundTime+0x120>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d802      	bhi.n	8005a38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a32:	230c      	movs	r3, #12
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e03b      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005aec <USB_SetTurnaroundTime+0x120>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d906      	bls.n	8005a4e <USB_SetTurnaroundTime+0x82>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	@ (8005af0 <USB_SetTurnaroundTime+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d802      	bhi.n	8005a4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a48:	230b      	movs	r3, #11
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e030      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4a27      	ldr	r2, [pc, #156]	@ (8005af0 <USB_SetTurnaroundTime+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d906      	bls.n	8005a64 <USB_SetTurnaroundTime+0x98>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a26      	ldr	r2, [pc, #152]	@ (8005af4 <USB_SetTurnaroundTime+0x128>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d802      	bhi.n	8005a64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a5e:	230a      	movs	r3, #10
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e025      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a23      	ldr	r2, [pc, #140]	@ (8005af4 <USB_SetTurnaroundTime+0x128>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d906      	bls.n	8005a7a <USB_SetTurnaroundTime+0xae>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a22      	ldr	r2, [pc, #136]	@ (8005af8 <USB_SetTurnaroundTime+0x12c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d202      	bcs.n	8005a7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a74:	2309      	movs	r3, #9
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e01a      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005af8 <USB_SetTurnaroundTime+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d306      	bcc.n	8005a90 <USB_SetTurnaroundTime+0xc4>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <USB_SetTurnaroundTime+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d802      	bhi.n	8005a90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e00f      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a1a      	ldr	r2, [pc, #104]	@ (8005afc <USB_SetTurnaroundTime+0x130>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <USB_SetTurnaroundTime+0xda>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a19      	ldr	r2, [pc, #100]	@ (8005b00 <USB_SetTurnaroundTime+0x134>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d202      	bcs.n	8005aa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005aa0:	2307      	movs	r3, #7
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e004      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005aa6:	2306      	movs	r3, #6
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e001      	b.n	8005ab0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005aac:	2309      	movs	r3, #9
 8005aae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	00d8acbf 	.word	0x00d8acbf
 8005ae0:	00e4e1c0 	.word	0x00e4e1c0
 8005ae4:	00f42400 	.word	0x00f42400
 8005ae8:	01067380 	.word	0x01067380
 8005aec:	011a499f 	.word	0x011a499f
 8005af0:	01312cff 	.word	0x01312cff
 8005af4:	014ca43f 	.word	0x014ca43f
 8005af8:	016e3600 	.word	0x016e3600
 8005afc:	01a6ab1f 	.word	0x01a6ab1f
 8005b00:	01e84800 	.word	0x01e84800

08005b04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d115      	bne.n	8005b96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b76:	200a      	movs	r0, #10
 8005b78:	f7fb fbdc 	bl	8001334 <HAL_Delay>
      ms += 10U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	330a      	adds	r3, #10
 8005b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 f8b3 	bl	8006cee <USB_GetMode>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d01e      	beq.n	8005bcc <USB_SetCurrentMode+0x84>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b92:	d9f0      	bls.n	8005b76 <USB_SetCurrentMode+0x2e>
 8005b94:	e01a      	b.n	8005bcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d115      	bne.n	8005bc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ba8:	200a      	movs	r0, #10
 8005baa:	f7fb fbc3 	bl	8001334 <HAL_Delay>
      ms += 10U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	330a      	adds	r3, #10
 8005bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f89a 	bl	8006cee <USB_GetMode>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <USB_SetCurrentMode+0x84>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bc4:	d9f0      	bls.n	8005ba8 <USB_SetCurrentMode+0x60>
 8005bc6:	e001      	b.n	8005bcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e005      	b.n	8005bd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bd0:	d101      	bne.n	8005bd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be0:	b084      	sub	sp, #16
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	e009      	b.n	8005c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3340      	adds	r3, #64	@ 0x40
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3301      	adds	r3, #1
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b0e      	cmp	r3, #14
 8005c18:	d9f2      	bls.n	8005c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d11c      	bne.n	8005c5c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e005      	b.n	8005c68 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2300      	movs	r3, #0
 8005c72:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c74:	2103      	movs	r1, #3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f95a 	bl	8005f30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f8f6 	bl	8005e70 <USB_FlushTxFifo>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f920 	bl	8005ed4 <USB_FlushRxFifo>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e043      	b.n	8005d50 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cde:	d118      	bne.n	8005d12 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e013      	b.n	8005d24 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e008      	b.n	8005d24 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d54:	461a      	mov	r2, r3
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d3b5      	bcc.n	8005cc8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	e043      	b.n	8005dea <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d78:	d118      	bne.n	8005dac <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e013      	b.n	8005dbe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	e008      	b.n	8005dbe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db8:	461a      	mov	r2, r3
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	3301      	adds	r3, #1
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005dee:	461a      	mov	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d3b5      	bcc.n	8005d62 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f043 0210 	orr.w	r2, r3, #16
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	4b10      	ldr	r3, [pc, #64]	@ (8005e6c <USB_DevInit+0x28c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f043 0208 	orr.w	r2, r3, #8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d107      	bne.n	8005e5c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e54:	f043 0304 	orr.w	r3, r3, #4
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e68:	b004      	add	sp, #16
 8005e6a:	4770      	bx	lr
 8005e6c:	803c3800 	.word	0x803c3800

08005e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e8a:	d901      	bls.n	8005e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e01b      	b.n	8005ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	daf2      	bge.n	8005e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	019b      	lsls	r3, r3, #6
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eb4:	d901      	bls.n	8005eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e006      	b.n	8005ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d0f0      	beq.n	8005ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eec:	d901      	bls.n	8005ef2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e018      	b.n	8005f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	daf2      	bge.n	8005ee0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2210      	movs	r2, #16
 8005f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f10:	d901      	bls.n	8005f16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e006      	b.n	8005f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d0f0      	beq.n	8005f04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f50:	4313      	orrs	r3, r2
 8005f52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0306 	and.w	r3, r3, #6
 8005f7a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d002      	beq.n	8005f88 <USB_GetDevSpeed+0x26>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d102      	bne.n	8005f8e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	75fb      	strb	r3, [r7, #23]
 8005f8c:	e001      	b.n	8005f92 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005f8e:	230f      	movs	r3, #15
 8005f90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d13a      	bne.n	8006032 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	68f9      	ldr	r1, [r7, #12]
 8005fd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d155      	bne.n	80060a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	791b      	ldrb	r3, [r3, #4]
 800600e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006010:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	059b      	lsls	r3, r3, #22
 8006016:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006018:	4313      	orrs	r3, r2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800602a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e036      	b.n	80060a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	2101      	movs	r1, #1
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006050:	4313      	orrs	r3, r2
 8006052:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11a      	bne.n	80060a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	791b      	ldrb	r3, [r3, #4]
 8006084:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006086:	430b      	orrs	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d161      	bne.n	8006190 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060e2:	d11f      	bne.n	8006124 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006102:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f303 	lsl.w	r3, r1, r3
 800613a:	b29b      	uxth	r3, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006144:	4013      	ands	r3, r2
 8006146:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	b29b      	uxth	r3, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006168:	4013      	ands	r3, r2
 800616a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	0159      	lsls	r1, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	440b      	add	r3, r1
 8006182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006186:	4619      	mov	r1, r3
 8006188:	4b35      	ldr	r3, [pc, #212]	@ (8006260 <USB_DeactivateEndpoint+0x1b0>)
 800618a:	4013      	ands	r3, r2
 800618c:	600b      	str	r3, [r1, #0]
 800618e:	e060      	b.n	8006252 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a6:	d11f      	bne.n	80061e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f303 	lsl.w	r3, r1, r3
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	43db      	mvns	r3, r3
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006208:	4013      	ands	r3, r2
 800620a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f303 	lsl.w	r3, r1, r3
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	43db      	mvns	r3, r3
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800622c:	4013      	ands	r3, r2
 800622e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	0159      	lsls	r1, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	440b      	add	r3, r1
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	4619      	mov	r1, r3
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <USB_DeactivateEndpoint+0x1b4>)
 800624e:	4013      	ands	r3, r2
 8006250:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	ec337800 	.word	0xec337800
 8006264:	eff37800 	.word	0xeff37800

08006268 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 812d 	bne.w	80064e0 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d132      	bne.n	80062f4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062ac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ec:	0cdb      	lsrs	r3, r3, #19
 80062ee:	04db      	lsls	r3, r3, #19
 80062f0:	6113      	str	r3, [r2, #16]
 80062f2:	e097      	b.n	8006424 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630e:	0cdb      	lsrs	r3, r3, #19
 8006310:	04db      	lsls	r3, r3, #19
 8006312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006332:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006336:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11a      	bne.n	8006374 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	d903      	bls.n	8006352 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800636c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006370:	6113      	str	r3, [r2, #16]
 8006372:	e044      	b.n	80063fe <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4413      	add	r3, r2
 800637e:	1e5a      	subs	r2, r3, #1
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	04d9      	lsls	r1, r3, #19
 800639c:	4b8f      	ldr	r3, [pc, #572]	@ (80065dc <USB_EPStartXfer+0x374>)
 800639e:	400b      	ands	r3, r1
 80063a0:	6939      	ldr	r1, [r7, #16]
 80063a2:	0148      	lsls	r0, r1, #5
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	4401      	add	r1, r0
 80063a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063ac:	4313      	orrs	r3, r2
 80063ae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	791b      	ldrb	r3, [r3, #4]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d122      	bne.n	80063fe <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80063d6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	89fb      	ldrh	r3, [r7, #14]
 80063e8:	075b      	lsls	r3, r3, #29
 80063ea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80063ee:	6939      	ldr	r1, [r7, #16]
 80063f0:	0148      	lsls	r0, r1, #5
 80063f2:	6979      	ldr	r1, [r7, #20]
 80063f4:	4401      	add	r1, r0
 80063f6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063fa:	4313      	orrs	r3, r2
 80063fc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006414:	6939      	ldr	r1, [r7, #16]
 8006416:	0148      	lsls	r0, r1, #5
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	4401      	add	r1, r0
 800641c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006420:	4313      	orrs	r3, r2
 8006422:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006442:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	791b      	ldrb	r3, [r3, #4]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d015      	beq.n	8006478 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 813a 	beq.w	80066ca <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	2101      	movs	r1, #1
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	6979      	ldr	r1, [r7, #20]
 800646e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006472:	4313      	orrs	r3, r2
 8006474:	634b      	str	r3, [r1, #52]	@ 0x34
 8006476:	e128      	b.n	80066ca <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d110      	bne.n	80064aa <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	440a      	add	r2, r1
 800649e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e00f      	b.n	80064ca <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c8:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68d9      	ldr	r1, [r3, #12]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9a7 	bl	800682c <USB_WritePacket>
 80064de:	e0f4      	b.n	80066ca <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fa:	0cdb      	lsrs	r3, r3, #19
 80064fc:	04db      	lsls	r3, r3, #19
 80064fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800651e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006522:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d12f      	bne.n	800658a <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006558:	6939      	ldr	r1, [r7, #16]
 800655a:	0148      	lsls	r0, r1, #5
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	4401      	add	r1, r0
 8006560:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006564:	4313      	orrs	r3, r2
 8006566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006586:	6113      	str	r3, [r2, #16]
 8006588:	e062      	b.n	8006650 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d126      	bne.n	80065e0 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a8:	6939      	ldr	r1, [r7, #16]
 80065aa:	0148      	lsls	r0, r1, #5
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	4401      	add	r1, r0
 80065b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065b4:	4313      	orrs	r3, r2
 80065b6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065d6:	6113      	str	r3, [r2, #16]
 80065d8:	e03a      	b.n	8006650 <USB_EPStartXfer+0x3e8>
 80065da:	bf00      	nop
 80065dc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	4413      	add	r3, r2
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	89fa      	ldrh	r2, [r7, #14]
 80065fc:	fb03 f202 	mul.w	r2, r3, r2
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	04d9      	lsls	r1, r3, #19
 8006616:	4b2f      	ldr	r3, [pc, #188]	@ (80066d4 <USB_EPStartXfer+0x46c>)
 8006618:	400b      	ands	r3, r1
 800661a:	6939      	ldr	r1, [r7, #16]
 800661c:	0148      	lsls	r0, r1, #5
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	4401      	add	r1, r0
 8006622:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006626:	4313      	orrs	r3, r2
 8006628:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006640:	6939      	ldr	r1, [r7, #16]
 8006642:	0148      	lsls	r0, r1, #5
 8006644:	6979      	ldr	r1, [r7, #20]
 8006646:	4401      	add	r1, r0
 8006648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800664c:	4313      	orrs	r3, r2
 800664e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	791b      	ldrb	r3, [r3, #4]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d128      	bne.n	80066aa <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006664:	2b00      	cmp	r3, #0
 8006666:	d110      	bne.n	800668a <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006682:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	e00f      	b.n	80066aa <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	1ff80000 	.word	0x1ff80000

080066d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d14a      	bne.n	800678c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800670a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800670e:	f040 8086 	bne.w	800681e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006734:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006766:	4293      	cmp	r3, r2
 8006768:	d902      	bls.n	8006770 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	75fb      	strb	r3, [r7, #23]
          break;
 800676e:	e056      	b.n	800681e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006788:	d0e7      	beq.n	800675a <USB_EPStopXfer+0x82>
 800678a:	e048      	b.n	800681e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a4:	d13b      	bne.n	800681e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d902      	bls.n	8006804 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
          break;
 8006802:	e00c      	b.n	800681e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800681c:	d0e7      	beq.n	80067ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800682c:	b480      	push	{r7}
 800682e:	b089      	sub	sp, #36	@ 0x24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4611      	mov	r1, r2
 8006838:	461a      	mov	r2, r3
 800683a:	460b      	mov	r3, r1
 800683c:	71fb      	strb	r3, [r7, #7]
 800683e:	4613      	mov	r3, r2
 8006840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800684a:	88bb      	ldrh	r3, [r7, #4]
 800684c:	3303      	adds	r3, #3
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e018      	b.n	800688a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	031a      	lsls	r2, r3, #12
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	4413      	add	r3, r2
 8006860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006864:	461a      	mov	r2, r3
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3301      	adds	r3, #1
 8006876:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	3301      	adds	r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3301      	adds	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	3301      	adds	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d3e2      	bcc.n	8006858 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3724      	adds	r7, #36	@ 0x24
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b08b      	sub	sp, #44	@ 0x2c
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068c6:	2300      	movs	r3, #0
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	e014      	b.n	80068f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	3301      	adds	r3, #1
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	3301      	adds	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	3301      	adds	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	3301      	adds	r3, #1
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	3301      	adds	r3, #1
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d3e6      	bcc.n	80068cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068fe:	8bfb      	ldrh	r3, [r7, #30]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01e      	beq.n	8006942 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800690e:	461a      	mov	r2, r3
 8006910:	f107 0310 	add.w	r3, r7, #16
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	701a      	strb	r2, [r3, #0]
      i++;
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	3301      	adds	r3, #1
 800692e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	3301      	adds	r3, #1
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006936:	8bfb      	ldrh	r3, [r7, #30]
 8006938:	3b01      	subs	r3, #1
 800693a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800693c:	8bfb      	ldrh	r3, [r7, #30]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1ea      	bne.n	8006918 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006944:	4618      	mov	r0, r3
 8006946:	372c      	adds	r7, #44	@ 0x2c
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d12c      	bne.n	80069c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	db12      	blt.n	80069a4 <USB_EPSetStall+0x54>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00f      	beq.n	80069a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800699e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e02b      	b.n	8006a1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db12      	blt.n	80069fe <USB_EPSetStall+0xae>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00f      	beq.n	80069fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d128      	bne.n	8006a9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	791b      	ldrb	r3, [r3, #4]
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d003      	beq.n	8006a78 <USB_EPClearStall+0x4c>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	791b      	ldrb	r3, [r3, #4]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d138      	bne.n	8006aea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e027      	b.n	8006aea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ab4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ab8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d003      	beq.n	8006aca <USB_EPClearStall+0x9e>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d10f      	bne.n	8006aea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b32:	4313      	orrs	r3, r2
 8006b34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b72:	f023 0302 	bic.w	r3, r3, #2
 8006b76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ba0:	f023 0303 	bic.w	r3, r3, #3
 8006ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006be0:	68fb      	ldr	r3, [r7, #12]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	0c1b      	lsrs	r3, r3, #16
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4013      	ands	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	b29b      	uxth	r3, r3
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c84:	68bb      	ldr	r3, [r7, #8]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	01db      	lsls	r3, r3, #7
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d28:	f023 0307 	bic.w	r3, r3, #7
 8006d2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	333c      	adds	r3, #60	@ 0x3c
 8006d62:	3304      	adds	r3, #4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ddc <USB_EP0_OutStart+0x8c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d90a      	bls.n	8006d86 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d80:	d101      	bne.n	8006d86 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e024      	b.n	8006dd0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db4:	f043 0318 	orr.w	r3, r3, #24
 8006db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006dcc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	4f54300a 	.word	0x4f54300a

08006de0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006df8:	d901      	bls.n	8006dfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e01b      	b.n	8006e36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	daf2      	bge.n	8006dec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f043 0201 	orr.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e22:	d901      	bls.n	8006e28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e006      	b.n	8006e36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d0f0      	beq.n	8006e16 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e54:	f002 fe36 	bl	8009ac4 <USBD_static_malloc>
 8006e58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	32b0      	adds	r2, #176	@ 0xb0
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e70:	2302      	movs	r3, #2
 8006e72:	e0d4      	b.n	800701e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006e78:	2100      	movs	r1, #0
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f002 fe40 	bl	8009b00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	@ 0xb0
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	@ 0xb0
 8006e9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7c1b      	ldrb	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d138      	bne.n	8006f1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006eac:	4b5e      	ldr	r3, [pc, #376]	@ (8007028 <USBD_CDC_Init+0x1e4>)
 8006eae:	7819      	ldrb	r1, [r3, #0]
 8006eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f002 fbf0 	bl	800969c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8007028 <USBD_CDC_Init+0x1e4>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	3324      	adds	r3, #36	@ 0x24
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ed6:	4b55      	ldr	r3, [pc, #340]	@ (800702c <USBD_CDC_Init+0x1e8>)
 8006ed8:	7819      	ldrb	r1, [r3, #0]
 8006eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ede:	2202      	movs	r2, #2
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f002 fbdb 	bl	800969c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ee6:	4b51      	ldr	r3, [pc, #324]	@ (800702c <USBD_CDC_Init+0x1e8>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f003 020f 	and.w	r2, r3, #15
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006efe:	2201      	movs	r2, #1
 8006f00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f02:	4b4b      	ldr	r3, [pc, #300]	@ (8007030 <USBD_CDC_Init+0x1ec>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	f003 020f 	and.w	r2, r3, #15
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	3326      	adds	r3, #38	@ 0x26
 8006f18:	2210      	movs	r2, #16
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e035      	b.n	8006f8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f1e:	4b42      	ldr	r3, [pc, #264]	@ (8007028 <USBD_CDC_Init+0x1e4>)
 8006f20:	7819      	ldrb	r1, [r3, #0]
 8006f22:	2340      	movs	r3, #64	@ 0x40
 8006f24:	2202      	movs	r2, #2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f002 fbb8 	bl	800969c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8007028 <USBD_CDC_Init+0x1e4>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	3324      	adds	r3, #36	@ 0x24
 8006f42:	2201      	movs	r2, #1
 8006f44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f46:	4b39      	ldr	r3, [pc, #228]	@ (800702c <USBD_CDC_Init+0x1e8>)
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	2340      	movs	r3, #64	@ 0x40
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f002 fba4 	bl	800969c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f54:	4b35      	ldr	r3, [pc, #212]	@ (800702c <USBD_CDC_Init+0x1e8>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f70:	4b2f      	ldr	r3, [pc, #188]	@ (8007030 <USBD_CDC_Init+0x1ec>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3326      	adds	r3, #38	@ 0x26
 8006f86:	2210      	movs	r2, #16
 8006f88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f8a:	4b29      	ldr	r3, [pc, #164]	@ (8007030 <USBD_CDC_Init+0x1ec>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	2308      	movs	r3, #8
 8006f90:	2203      	movs	r2, #3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fb82 	bl	800969c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f98:	4b25      	ldr	r3, [pc, #148]	@ (8007030 <USBD_CDC_Init+0x1ec>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 020f 	and.w	r2, r3, #15
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	3324      	adds	r3, #36	@ 0x24
 8006fae:	2201      	movs	r2, #1
 8006fb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	33b0      	adds	r3, #176	@ 0xb0
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e018      	b.n	800701e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	7c1b      	ldrb	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <USBD_CDC_Init+0x1e8>)
 8006ff6:	7819      	ldrb	r1, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f002 fcc4 	bl	8009990 <USBD_LL_PrepareReceive>
 8007008:	e008      	b.n	800701c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800700a:	4b08      	ldr	r3, [pc, #32]	@ (800702c <USBD_CDC_Init+0x1e8>)
 800700c:	7819      	ldrb	r1, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007014:	2340      	movs	r3, #64	@ 0x40
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 fcba 	bl	8009990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000097 	.word	0x20000097
 800702c:	20000098 	.word	0x20000098
 8007030:	20000099 	.word	0x20000099

08007034 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007040:	4b3a      	ldr	r3, [pc, #232]	@ (800712c <USBD_CDC_DeInit+0xf8>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fb66 	bl	8009718 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800704c:	4b37      	ldr	r3, [pc, #220]	@ (800712c <USBD_CDC_DeInit+0xf8>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	3324      	adds	r3, #36	@ 0x24
 8007062:	2200      	movs	r2, #0
 8007064:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007066:	4b32      	ldr	r3, [pc, #200]	@ (8007130 <USBD_CDC_DeInit+0xfc>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f002 fb53 	bl	8009718 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007072:	4b2f      	ldr	r3, [pc, #188]	@ (8007130 <USBD_CDC_DeInit+0xfc>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 020f 	and.w	r2, r3, #15
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800708a:	2200      	movs	r2, #0
 800708c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800708e:	4b29      	ldr	r3, [pc, #164]	@ (8007134 <USBD_CDC_DeInit+0x100>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f002 fb3f 	bl	8009718 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800709a:	4b26      	ldr	r3, [pc, #152]	@ (8007134 <USBD_CDC_DeInit+0x100>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 020f 	and.w	r2, r3, #15
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	3324      	adds	r3, #36	@ 0x24
 80070b0:	2200      	movs	r2, #0
 80070b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007134 <USBD_CDC_DeInit+0x100>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	3326      	adds	r3, #38	@ 0x26
 80070ca:	2200      	movs	r2, #0
 80070cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	32b0      	adds	r2, #176	@ 0xb0
 80070d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01f      	beq.n	8007120 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	33b0      	adds	r3, #176	@ 0xb0
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	32b0      	adds	r2, #176	@ 0xb0
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	4618      	mov	r0, r3
 8007104:	f002 fcec 	bl	8009ae0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32b0      	adds	r2, #176	@ 0xb0
 8007112:	2100      	movs	r1, #0
 8007114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000097 	.word	0x20000097
 8007130:	20000098 	.word	0x20000098
 8007134:	20000099 	.word	0x20000099

08007138 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	32b0      	adds	r2, #176	@ 0xb0
 800714c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007150:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	e0bf      	b.n	80072e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007170:	2b00      	cmp	r3, #0
 8007172:	d050      	beq.n	8007216 <USBD_CDC_Setup+0xde>
 8007174:	2b20      	cmp	r3, #32
 8007176:	f040 80af 	bne.w	80072d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88db      	ldrh	r3, [r3, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d03a      	beq.n	80071f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	b25b      	sxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	da1b      	bge.n	80071c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	33b0      	adds	r3, #176	@ 0xb0
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	88d2      	ldrh	r2, [r2, #6]
 80071a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b07      	cmp	r3, #7
 80071b0:	bf28      	it	cs
 80071b2:	2307      	movcs	r3, #7
 80071b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	89fa      	ldrh	r2, [r7, #14]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fdbd 	bl	8008d3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071c2:	e090      	b.n	80072e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785a      	ldrb	r2, [r3, #1]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80071d4:	d803      	bhi.n	80071de <USBD_CDC_Setup+0xa6>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	e000      	b.n	80071e0 <USBD_CDC_Setup+0xa8>
 80071de:	2240      	movs	r2, #64	@ 0x40
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071e6:	6939      	ldr	r1, [r7, #16]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80071ee:	461a      	mov	r2, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fdcf 	bl	8008d94 <USBD_CtlPrepareRx>
      break;
 80071f6:	e076      	b.n	80072e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	33b0      	adds	r3, #176	@ 0xb0
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	7850      	ldrb	r0, [r2, #1]
 800720e:	2200      	movs	r2, #0
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	4798      	blx	r3
      break;
 8007214:	e067      	b.n	80072e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b0b      	cmp	r3, #11
 800721c:	d851      	bhi.n	80072c2 <USBD_CDC_Setup+0x18a>
 800721e:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <USBD_CDC_Setup+0xec>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007255 	.word	0x08007255
 8007228:	080072d1 	.word	0x080072d1
 800722c:	080072c3 	.word	0x080072c3
 8007230:	080072c3 	.word	0x080072c3
 8007234:	080072c3 	.word	0x080072c3
 8007238:	080072c3 	.word	0x080072c3
 800723c:	080072c3 	.word	0x080072c3
 8007240:	080072c3 	.word	0x080072c3
 8007244:	080072c3 	.word	0x080072c3
 8007248:	080072c3 	.word	0x080072c3
 800724c:	0800727f 	.word	0x0800727f
 8007250:	080072a9 	.word	0x080072a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b03      	cmp	r3, #3
 800725e:	d107      	bne.n	8007270 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007260:	f107 030a 	add.w	r3, r7, #10
 8007264:	2202      	movs	r2, #2
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fd67 	bl	8008d3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800726e:	e032      	b.n	80072d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fce5 	bl	8008c42 <USBD_CtlError>
            ret = USBD_FAIL;
 8007278:	2303      	movs	r3, #3
 800727a:	75fb      	strb	r3, [r7, #23]
          break;
 800727c:	e02b      	b.n	80072d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b03      	cmp	r3, #3
 8007288:	d107      	bne.n	800729a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800728a:	f107 030d 	add.w	r3, r7, #13
 800728e:	2201      	movs	r2, #1
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fd52 	bl	8008d3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007298:	e01d      	b.n	80072d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fcd0 	bl	8008c42 <USBD_CtlError>
            ret = USBD_FAIL;
 80072a2:	2303      	movs	r3, #3
 80072a4:	75fb      	strb	r3, [r7, #23]
          break;
 80072a6:	e016      	b.n	80072d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d00f      	beq.n	80072d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fcc3 	bl	8008c42 <USBD_CtlError>
            ret = USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072c0:	e008      	b.n	80072d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fcbc 	bl	8008c42 <USBD_CtlError>
          ret = USBD_FAIL;
 80072ca:	2303      	movs	r3, #3
 80072cc:	75fb      	strb	r3, [r7, #23]
          break;
 80072ce:	e002      	b.n	80072d6 <USBD_CDC_Setup+0x19e>
          break;
 80072d0:	bf00      	nop
 80072d2:	e008      	b.n	80072e6 <USBD_CDC_Setup+0x1ae>
          break;
 80072d4:	bf00      	nop
      }
      break;
 80072d6:	e006      	b.n	80072e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fcb1 	bl	8008c42 <USBD_CtlError>
      ret = USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	75fb      	strb	r3, [r7, #23]
      break;
 80072e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32b0      	adds	r2, #176	@ 0xb0
 800730e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	e065      	b.n	80073e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32b0      	adds	r2, #176	@ 0xb0
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	f003 020f 	and.w	r2, r3, #15
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	3318      	adds	r3, #24
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d02f      	beq.n	80073a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	3318      	adds	r3, #24
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	f003 010f 	and.w	r1, r3, #15
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	460b      	mov	r3, r1
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	440b      	add	r3, r1
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4403      	add	r3, r0
 800736c:	331c      	adds	r3, #28
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	fbb2 f1f3 	udiv	r1, r2, r3
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800737a:	2b00      	cmp	r3, #0
 800737c:	d112      	bne.n	80073a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	f003 020f 	and.w	r2, r3, #15
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	3318      	adds	r3, #24
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007396:	78f9      	ldrb	r1, [r7, #3]
 8007398:	2300      	movs	r3, #0
 800739a:	2200      	movs	r2, #0
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f002 fabf 	bl	8009920 <USBD_LL_Transmit>
 80073a2:	e01f      	b.n	80073e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	33b0      	adds	r3, #176	@ 0xb0
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	33b0      	adds	r3, #176	@ 0xb0
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	32b0      	adds	r2, #176	@ 0xb0
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	32b0      	adds	r2, #176	@ 0xb0
 8007414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	e01a      	b.n	8007456 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f002 faeb 	bl	8009a00 <USBD_LL_GetRxDataSize>
 800742a:	4602      	mov	r2, r0
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	33b0      	adds	r3, #176	@ 0xb0
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007450:	4611      	mov	r1, r2
 8007452:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	32b0      	adds	r2, #176	@ 0xb0
 8007470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007474:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e024      	b.n	80074ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	33b0      	adds	r3, #176	@ 0xb0
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d019      	beq.n	80074c8 <USBD_CDC_EP0_RxReady+0x6a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800749a:	2bff      	cmp	r3, #255	@ 0xff
 800749c:	d014      	beq.n	80074c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	33b0      	adds	r3, #176	@ 0xb0
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80074b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	22ff      	movs	r2, #255	@ 0xff
 80074c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074dc:	2182      	movs	r1, #130	@ 0x82
 80074de:	4818      	ldr	r0, [pc, #96]	@ (8007540 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074e0:	f000 fd4f 	bl	8007f82 <USBD_GetEpDesc>
 80074e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074e6:	2101      	movs	r1, #1
 80074e8:	4815      	ldr	r0, [pc, #84]	@ (8007540 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074ea:	f000 fd4a 	bl	8007f82 <USBD_GetEpDesc>
 80074ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074f0:	2181      	movs	r1, #129	@ 0x81
 80074f2:	4813      	ldr	r0, [pc, #76]	@ (8007540 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074f4:	f000 fd45 	bl	8007f82 <USBD_GetEpDesc>
 80074f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2210      	movs	r2, #16
 8007504:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d006      	beq.n	800751a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2200      	movs	r2, #0
 8007510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007514:	711a      	strb	r2, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d006      	beq.n	800752e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007528:	711a      	strb	r2, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2243      	movs	r2, #67	@ 0x43
 8007532:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007534:	4b02      	ldr	r3, [pc, #8]	@ (8007540 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000054 	.word	0x20000054

08007544 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800754c:	2182      	movs	r1, #130	@ 0x82
 800754e:	4818      	ldr	r0, [pc, #96]	@ (80075b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007550:	f000 fd17 	bl	8007f82 <USBD_GetEpDesc>
 8007554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007556:	2101      	movs	r1, #1
 8007558:	4815      	ldr	r0, [pc, #84]	@ (80075b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800755a:	f000 fd12 	bl	8007f82 <USBD_GetEpDesc>
 800755e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007560:	2181      	movs	r1, #129	@ 0x81
 8007562:	4813      	ldr	r0, [pc, #76]	@ (80075b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007564:	f000 fd0d 	bl	8007f82 <USBD_GetEpDesc>
 8007568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2210      	movs	r2, #16
 8007574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d006      	beq.n	800758a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2200      	movs	r2, #0
 8007580:	711a      	strb	r2, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f042 0202 	orr.w	r2, r2, #2
 8007588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d006      	beq.n	800759e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	711a      	strb	r2, [r3, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f042 0202 	orr.w	r2, r2, #2
 800759c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2243      	movs	r2, #67	@ 0x43
 80075a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075a4:	4b02      	ldr	r3, [pc, #8]	@ (80075b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000054 	.word	0x20000054

080075b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075bc:	2182      	movs	r1, #130	@ 0x82
 80075be:	4818      	ldr	r0, [pc, #96]	@ (8007620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075c0:	f000 fcdf 	bl	8007f82 <USBD_GetEpDesc>
 80075c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075c6:	2101      	movs	r1, #1
 80075c8:	4815      	ldr	r0, [pc, #84]	@ (8007620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075ca:	f000 fcda 	bl	8007f82 <USBD_GetEpDesc>
 80075ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075d0:	2181      	movs	r1, #129	@ 0x81
 80075d2:	4813      	ldr	r0, [pc, #76]	@ (8007620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075d4:	f000 fcd5 	bl	8007f82 <USBD_GetEpDesc>
 80075d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2210      	movs	r2, #16
 80075e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075f4:	711a      	strb	r2, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d006      	beq.n	800760e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007608:	711a      	strb	r2, [r3, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2243      	movs	r2, #67	@ 0x43
 8007612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007614:	4b02      	ldr	r3, [pc, #8]	@ (8007620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000054 	.word	0x20000054

08007624 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	220a      	movs	r2, #10
 8007630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007632:	4b03      	ldr	r3, [pc, #12]	@ (8007640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20000010 	.word	0x20000010

08007644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	e009      	b.n	800766c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	33b0      	adds	r3, #176	@ 0xb0
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	32b0      	adds	r2, #176	@ 0xb0
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800769a:	2303      	movs	r3, #3
 800769c:	e008      	b.n	80076b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	@ 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e004      	b.n	80076ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	32b0      	adds	r2, #176	@ 0xb0
 800770a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	e025      	b.n	800776a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11f      	bne.n	8007768 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2201      	movs	r2, #1
 800772c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007730:	4b10      	ldr	r3, [pc, #64]	@ (8007774 <USBD_CDC_TransmitPacket+0x7c>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 020f 	and.w	r2, r3, #15
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4403      	add	r3, r0
 800774a:	3318      	adds	r3, #24
 800774c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800774e:	4b09      	ldr	r3, [pc, #36]	@ (8007774 <USBD_CDC_TransmitPacket+0x7c>)
 8007750:	7819      	ldrb	r1, [r3, #0]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f002 f8de 	bl	8009920 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000097 	.word	0x20000097

08007778 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32b0      	adds	r2, #176	@ 0xb0
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	32b0      	adds	r2, #176	@ 0xb0
 800779a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e018      	b.n	80077d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7c1b      	ldrb	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077ae:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <USBD_CDC_ReceivePacket+0x68>)
 80077b0:	7819      	ldrb	r1, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f002 f8e7 	bl	8009990 <USBD_LL_PrepareReceive>
 80077c2:	e008      	b.n	80077d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077c4:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <USBD_CDC_ReceivePacket+0x68>)
 80077c6:	7819      	ldrb	r1, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077ce:	2340      	movs	r3, #64	@ 0x40
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f002 f8dd 	bl	8009990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000098 	.word	0x20000098

080077e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e01f      	b.n	800783c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	79fa      	ldrb	r2, [r7, #7]
 800782e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 feb5 	bl	80095a0 <USBD_LL_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]

  return ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e025      	b.n	80078a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	32ae      	adds	r2, #174	@ 0xae
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00f      	beq.n	8007898 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	32ae      	adds	r2, #174	@ 0xae
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	f107 020e 	add.w	r2, r7, #14
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	4602      	mov	r2, r0
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 febd 	bl	8009638 <USBD_LL_Start>
 80078be:	4603      	mov	r3, r0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4611      	mov	r1, r2
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f936 	bl	8008bce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007970:	461a      	mov	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	2b02      	cmp	r3, #2
 8007984:	d01a      	beq.n	80079bc <USBD_LL_SetupStage+0x72>
 8007986:	2b02      	cmp	r3, #2
 8007988:	d822      	bhi.n	80079d0 <USBD_LL_SetupStage+0x86>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USBD_LL_SetupStage+0x4a>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d00a      	beq.n	80079a8 <USBD_LL_SetupStage+0x5e>
 8007992:	e01d      	b.n	80079d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb63 	bl	8008068 <USBD_StdDevReq>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
      break;
 80079a6:	e020      	b.n	80079ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fbcb 	bl	800814c <USBD_StdItfReq>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ba:	e016      	b.n	80079ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc2d 	bl	8008224 <USBD_StdEPReq>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
      break;
 80079ce:	e00c      	b.n	80079ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fed0 	bl	8009784 <USBD_LL_StallEP>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
      break;
 80079e8:	bf00      	nop
  }

  return ret;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	460b      	mov	r3, r1
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d16e      	bne.n	8007aea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	f040 8098 	bne.w	8007b50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d913      	bls.n	8007a54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	bf28      	it	cs
 8007a46:	4613      	movcs	r3, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f001 f9be 	bl	8008dce <USBD_CtlContinueRx>
 8007a52:	e07d      	b.n	8007b50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d014      	beq.n	8007a8c <USBD_LL_DataOutStage+0x98>
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d81d      	bhi.n	8007aa2 <USBD_LL_DataOutStage+0xae>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <USBD_LL_DataOutStage+0x7c>
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d003      	beq.n	8007a76 <USBD_LL_DataOutStage+0x82>
 8007a6e:	e018      	b.n	8007aa2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	75bb      	strb	r3, [r7, #22]
            break;
 8007a74:	e018      	b.n	8007aa8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fa64 	bl	8007f4e <USBD_CoreFindIF>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75bb      	strb	r3, [r7, #22]
            break;
 8007a8a:	e00d      	b.n	8007aa8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	4619      	mov	r1, r3
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fa66 	bl	8007f68 <USBD_CoreFindEP>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa0:	e002      	b.n	8007aa8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007aa8:	7dbb      	ldrb	r3, [r7, #22]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d119      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d113      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007aba:	7dba      	ldrb	r2, [r7, #22]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	32ae      	adds	r2, #174	@ 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007aca:	7dba      	ldrb	r2, [r7, #22]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ad2:	7dba      	ldrb	r2, [r7, #22]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	32ae      	adds	r2, #174	@ 0xae
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 f984 	bl	8008df0 <USBD_CtlSendStatus>
 8007ae8:	e032      	b.n	8007b50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007aea:	7afb      	ldrb	r3, [r7, #11]
 8007aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fa37 	bl	8007f68 <USBD_CoreFindEP>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	2bff      	cmp	r3, #255	@ 0xff
 8007b02:	d025      	beq.n	8007b50 <USBD_LL_DataOutStage+0x15c>
 8007b04:	7dbb      	ldrb	r3, [r7, #22]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d122      	bne.n	8007b50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d117      	bne.n	8007b46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b16:	7dba      	ldrb	r2, [r7, #22]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	32ae      	adds	r2, #174	@ 0xae
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00f      	beq.n	8007b46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b26:	7dba      	ldrb	r2, [r7, #22]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b2e:	7dba      	ldrb	r2, [r7, #22]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	32ae      	adds	r2, #174	@ 0xae
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	7afa      	ldrb	r2, [r7, #11]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	4798      	blx	r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	e000      	b.n	8007b52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	460b      	mov	r3, r1
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d16f      	bne.n	8007c4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3314      	adds	r3, #20
 8007b72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d15a      	bne.n	8007c34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d914      	bls.n	8007bb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f001 f8e6 	bl	8008d72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2100      	movs	r1, #0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 feef 	bl	8009990 <USBD_LL_PrepareReceive>
 8007bb2:	e03f      	b.n	8007c34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d11c      	bne.n	8007bfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d316      	bcc.n	8007bfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d20f      	bcs.n	8007bfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f001 f8c7 	bl	8008d72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f001 fecc 	bl	8009990 <USBD_LL_PrepareReceive>
 8007bf8:	e01c      	b.n	8007c34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d10f      	bne.n	8007c26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c26:	2180      	movs	r1, #128	@ 0x80
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 fdab 	bl	8009784 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 f8f1 	bl	8008e16 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d03a      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fe42 	bl	80078c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c4c:	e032      	b.n	8007cb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f985 	bl	8007f68 <USBD_CoreFindEP>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2bff      	cmp	r3, #255	@ 0xff
 8007c66:	d025      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d122      	bne.n	8007cb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d11c      	bne.n	8007cb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c7a:	7dfa      	ldrb	r2, [r7, #23]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	32ae      	adds	r2, #174	@ 0xae
 8007c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d014      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c8a:	7dfa      	ldrb	r2, [r7, #23]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c92:	7dfa      	ldrb	r2, [r7, #23]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	32ae      	adds	r2, #174	@ 0xae
 8007c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	7afa      	ldrb	r2, [r7, #11]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	4798      	blx	r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007caa:	7dbb      	ldrb	r3, [r7, #22]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
 8007cb2:	e000      	b.n	8007cb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d014      	beq.n	8007d24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6852      	ldr	r2, [r2, #4]
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	4611      	mov	r1, r2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d20:	2303      	movs	r3, #3
 8007d22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d24:	2340      	movs	r3, #64	@ 0x40
 8007d26:	2200      	movs	r2, #0
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fcb6 	bl	800969c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2240      	movs	r2, #64	@ 0x40
 8007d3c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d40:	2340      	movs	r3, #64	@ 0x40
 8007d42:	2200      	movs	r2, #0
 8007d44:	2180      	movs	r1, #128	@ 0x80
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fca8 	bl	800969c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2240      	movs	r2, #64	@ 0x40
 8007d56:	621a      	str	r2, [r3, #32]

  return ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d006      	beq.n	8007da4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2204      	movs	r2, #4
 8007da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d106      	bne.n	8007ddc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d110      	bne.n	8007e20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	32ae      	adds	r2, #174	@ 0xae
 8007e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e01c      	b.n	8007e86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d115      	bne.n	8007e84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	32ae      	adds	r2, #174	@ 0xae
 8007e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32ae      	adds	r2, #174	@ 0xae
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	32ae      	adds	r2, #174	@ 0xae
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e01c      	b.n	8007eea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d115      	bne.n	8007ee8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32ae      	adds	r2, #174	@ 0xae
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	32ae      	adds	r2, #174	@ 0xae
 8007eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	78fa      	ldrb	r2, [r7, #3]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00e      	beq.n	8007f44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6852      	ldr	r2, [r2, #4]
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	4611      	mov	r1, r2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b086      	sub	sp, #24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	885b      	ldrh	r3, [r3, #2]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d91f      	bls.n	8007fe8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fae:	e013      	b.n	8007fd8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fb0:	f107 030a 	add.w	r3, r7, #10
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6978      	ldr	r0, [r7, #20]
 8007fb8:	f000 f81b 	bl	8007ff2 <USBD_GetNextDesc>
 8007fbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d108      	bne.n	8007fd8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	789b      	ldrb	r3, [r3, #2]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d008      	beq.n	8007fe6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	885b      	ldrh	r3, [r3, #2]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	897b      	ldrh	r3, [r7, #10]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d8e5      	bhi.n	8007fb0 <USBD_GetEpDesc+0x2e>
 8007fe4:	e000      	b.n	8007fe8 <USBD_GetEpDesc+0x66>
          break;
 8007fe6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fe8:	693b      	ldr	r3, [r7, #16]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	4413      	add	r3, r2
 800800a:	b29a      	uxth	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800801c:	68fb      	ldr	r3, [r7, #12]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800802a:	b480      	push	{r7}
 800802c:	b087      	sub	sp, #28
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	3301      	adds	r3, #1
 8008040:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008048:	8a3b      	ldrh	r3, [r7, #16]
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	b21a      	sxth	r2, r3
 800804e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008052:	4313      	orrs	r3, r2
 8008054:	b21b      	sxth	r3, r3
 8008056:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008058:	89fb      	ldrh	r3, [r7, #14]
}
 800805a:	4618      	mov	r0, r3
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800807e:	2b40      	cmp	r3, #64	@ 0x40
 8008080:	d005      	beq.n	800808e <USBD_StdDevReq+0x26>
 8008082:	2b40      	cmp	r3, #64	@ 0x40
 8008084:	d857      	bhi.n	8008136 <USBD_StdDevReq+0xce>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00f      	beq.n	80080aa <USBD_StdDevReq+0x42>
 800808a:	2b20      	cmp	r3, #32
 800808c:	d153      	bne.n	8008136 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32ae      	adds	r2, #174	@ 0xae
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
      break;
 80080a8:	e04a      	b.n	8008140 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d83b      	bhi.n	800812a <USBD_StdDevReq+0xc2>
 80080b2:	a201      	add	r2, pc, #4	@ (adr r2, 80080b8 <USBD_StdDevReq+0x50>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	0800810d 	.word	0x0800810d
 80080bc:	08008121 	.word	0x08008121
 80080c0:	0800812b 	.word	0x0800812b
 80080c4:	08008117 	.word	0x08008117
 80080c8:	0800812b 	.word	0x0800812b
 80080cc:	080080eb 	.word	0x080080eb
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	0800812b 	.word	0x0800812b
 80080d8:	08008103 	.word	0x08008103
 80080dc:	080080f5 	.word	0x080080f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa3c 	bl	8008560 <USBD_GetDescriptor>
          break;
 80080e8:	e024      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fbcb 	bl	8008888 <USBD_SetAddress>
          break;
 80080f2:	e01f      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fc0a 	bl	8008910 <USBD_SetConfig>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
          break;
 8008100:	e018      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fcad 	bl	8008a64 <USBD_GetConfig>
          break;
 800810a:	e013      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fcde 	bl	8008ad0 <USBD_GetStatus>
          break;
 8008114:	e00e      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fd0d 	bl	8008b38 <USBD_SetFeature>
          break;
 800811e:	e009      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fd31 	bl	8008b8a <USBD_ClrFeature>
          break;
 8008128:	e004      	b.n	8008134 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fd88 	bl	8008c42 <USBD_CtlError>
          break;
 8008132:	bf00      	nop
      }
      break;
 8008134:	e004      	b.n	8008140 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fd82 	bl	8008c42 <USBD_CtlError>
      break;
 800813e:	bf00      	nop
  }

  return ret;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop

0800814c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008162:	2b40      	cmp	r3, #64	@ 0x40
 8008164:	d005      	beq.n	8008172 <USBD_StdItfReq+0x26>
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d852      	bhi.n	8008210 <USBD_StdItfReq+0xc4>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <USBD_StdItfReq+0x26>
 800816e:	2b20      	cmp	r3, #32
 8008170:	d14e      	bne.n	8008210 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008178:	b2db      	uxtb	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	2b02      	cmp	r3, #2
 800817e:	d840      	bhi.n	8008202 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	889b      	ldrh	r3, [r3, #4]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b01      	cmp	r3, #1
 8008188:	d836      	bhi.n	80081f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fedb 	bl	8007f4e <USBD_CoreFindIF>
 8008198:	4603      	mov	r3, r0
 800819a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	2bff      	cmp	r3, #255	@ 0xff
 80081a0:	d01d      	beq.n	80081de <USBD_StdItfReq+0x92>
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11a      	bne.n	80081de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081a8:	7bba      	ldrb	r2, [r7, #14]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32ae      	adds	r2, #174	@ 0xae
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00f      	beq.n	80081d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081b8:	7bba      	ldrb	r2, [r7, #14]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081c0:	7bba      	ldrb	r2, [r7, #14]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	32ae      	adds	r2, #174	@ 0xae
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081d6:	e004      	b.n	80081e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081dc:	e001      	b.n	80081e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	88db      	ldrh	r3, [r3, #6]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d110      	bne.n	800820c <USBD_StdItfReq+0xc0>
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fdfd 	bl	8008df0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081f6:	e009      	b.n	800820c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fd21 	bl	8008c42 <USBD_CtlError>
          break;
 8008200:	e004      	b.n	800820c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fd1c 	bl	8008c42 <USBD_CtlError>
          break;
 800820a:	e000      	b.n	800820e <USBD_StdItfReq+0xc2>
          break;
 800820c:	bf00      	nop
      }
      break;
 800820e:	e004      	b.n	800821a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fd15 	bl	8008c42 <USBD_CtlError>
      break;
 8008218:	bf00      	nop
  }

  return ret;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	889b      	ldrh	r3, [r3, #4]
 8008236:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008240:	2b40      	cmp	r3, #64	@ 0x40
 8008242:	d007      	beq.n	8008254 <USBD_StdEPReq+0x30>
 8008244:	2b40      	cmp	r3, #64	@ 0x40
 8008246:	f200 817f 	bhi.w	8008548 <USBD_StdEPReq+0x324>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d02a      	beq.n	80082a4 <USBD_StdEPReq+0x80>
 800824e:	2b20      	cmp	r3, #32
 8008250:	f040 817a 	bne.w	8008548 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff fe85 	bl	8007f68 <USBD_CoreFindEP>
 800825e:	4603      	mov	r3, r0
 8008260:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008262:	7b7b      	ldrb	r3, [r7, #13]
 8008264:	2bff      	cmp	r3, #255	@ 0xff
 8008266:	f000 8174 	beq.w	8008552 <USBD_StdEPReq+0x32e>
 800826a:	7b7b      	ldrb	r3, [r7, #13]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8170 	bne.w	8008552 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008272:	7b7a      	ldrb	r2, [r7, #13]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800827a:	7b7a      	ldrb	r2, [r7, #13]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	32ae      	adds	r2, #174	@ 0xae
 8008280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8163 	beq.w	8008552 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800828c:	7b7a      	ldrb	r2, [r7, #13]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32ae      	adds	r2, #174	@ 0xae
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082a2:	e156      	b.n	8008552 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d008      	beq.n	80082be <USBD_StdEPReq+0x9a>
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	f300 8145 	bgt.w	800853c <USBD_StdEPReq+0x318>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 809b 	beq.w	80083ee <USBD_StdEPReq+0x1ca>
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d03c      	beq.n	8008336 <USBD_StdEPReq+0x112>
 80082bc:	e13e      	b.n	800853c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d002      	beq.n	80082d0 <USBD_StdEPReq+0xac>
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d016      	beq.n	80082fc <USBD_StdEPReq+0xd8>
 80082ce:	e02c      	b.n	800832a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00d      	beq.n	80082f2 <USBD_StdEPReq+0xce>
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b80      	cmp	r3, #128	@ 0x80
 80082da:	d00a      	beq.n	80082f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fa4f 	bl	8009784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082e6:	2180      	movs	r1, #128	@ 0x80
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fa4b 	bl	8009784 <USBD_LL_StallEP>
 80082ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f0:	e020      	b.n	8008334 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fca4 	bl	8008c42 <USBD_CtlError>
              break;
 80082fa:	e01b      	b.n	8008334 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10e      	bne.n	8008322 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <USBD_StdEPReq+0xfe>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b80      	cmp	r3, #128	@ 0x80
 800830e:	d008      	beq.n	8008322 <USBD_StdEPReq+0xfe>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fa31 	bl	8009784 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fd64 	bl	8008df0 <USBD_CtlSendStatus>

              break;
 8008328:	e004      	b.n	8008334 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc88 	bl	8008c42 <USBD_CtlError>
              break;
 8008332:	bf00      	nop
          }
          break;
 8008334:	e107      	b.n	8008546 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d002      	beq.n	8008348 <USBD_StdEPReq+0x124>
 8008342:	2b03      	cmp	r3, #3
 8008344:	d016      	beq.n	8008374 <USBD_StdEPReq+0x150>
 8008346:	e04b      	b.n	80083e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00d      	beq.n	800836a <USBD_StdEPReq+0x146>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	@ 0x80
 8008352:	d00a      	beq.n	800836a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fa13 	bl	8009784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800835e:	2180      	movs	r1, #128	@ 0x80
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fa0f 	bl	8009784 <USBD_LL_StallEP>
 8008366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008368:	e040      	b.n	80083ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc68 	bl	8008c42 <USBD_CtlError>
              break;
 8008372:	e03b      	b.n	80083ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d136      	bne.n	80083ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fa30 	bl	80097f0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fd2d 	bl	8008df0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fde4 	bl	8007f68 <USBD_CoreFindEP>
 80083a0:	4603      	mov	r3, r0
 80083a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083a4:	7b7b      	ldrb	r3, [r7, #13]
 80083a6:	2bff      	cmp	r3, #255	@ 0xff
 80083a8:	d01f      	beq.n	80083ea <USBD_StdEPReq+0x1c6>
 80083aa:	7b7b      	ldrb	r3, [r7, #13]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11c      	bne.n	80083ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083b0:	7b7a      	ldrb	r2, [r7, #13]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083b8:	7b7a      	ldrb	r2, [r7, #13]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32ae      	adds	r2, #174	@ 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083c8:	7b7a      	ldrb	r2, [r7, #13]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32ae      	adds	r2, #174	@ 0xae
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083de:	e004      	b.n	80083ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fc2d 	bl	8008c42 <USBD_CtlError>
              break;
 80083e8:	e000      	b.n	80083ec <USBD_StdEPReq+0x1c8>
              break;
 80083ea:	bf00      	nop
          }
          break;
 80083ec:	e0ab      	b.n	8008546 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d002      	beq.n	8008400 <USBD_StdEPReq+0x1dc>
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d032      	beq.n	8008464 <USBD_StdEPReq+0x240>
 80083fe:	e097      	b.n	8008530 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <USBD_StdEPReq+0x1f2>
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b80      	cmp	r3, #128	@ 0x80
 800840a:	d004      	beq.n	8008416 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fc17 	bl	8008c42 <USBD_CtlError>
                break;
 8008414:	e091      	b.n	800853a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800841a:	2b00      	cmp	r3, #0
 800841c:	da0b      	bge.n	8008436 <USBD_StdEPReq+0x212>
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	3310      	adds	r3, #16
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	e00b      	b.n	800844e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4413      	add	r3, r2
 800844c:	3304      	adds	r3, #4
 800844e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2202      	movs	r2, #2
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc6d 	bl	8008d3c <USBD_CtlSendData>
              break;
 8008462:	e06a      	b.n	800853a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	da11      	bge.n	8008490 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f003 020f 	and.w	r2, r3, #15
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	3324      	adds	r3, #36	@ 0x24
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d117      	bne.n	80084b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fbda 	bl	8008c42 <USBD_CtlError>
                  break;
 800848e:	e054      	b.n	800853a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f003 020f 	and.w	r2, r3, #15
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fbc7 	bl	8008c42 <USBD_CtlError>
                  break;
 80084b4:	e041      	b.n	800853a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da0b      	bge.n	80084d6 <USBD_StdEPReq+0x2b2>
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	3310      	adds	r3, #16
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	3304      	adds	r3, #4
 80084d4:	e00b      	b.n	80084ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	4413      	add	r3, r2
 80084ec:	3304      	adds	r3, #4
 80084ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <USBD_StdEPReq+0x2d8>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d103      	bne.n	8008504 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	e00e      	b.n	8008522 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f9a7 	bl	800985c <USBD_LL_IsStallEP>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2201      	movs	r2, #1
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	e002      	b.n	8008522 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2202      	movs	r2, #2
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fc07 	bl	8008d3c <USBD_CtlSendData>
              break;
 800852e:	e004      	b.n	800853a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb85 	bl	8008c42 <USBD_CtlError>
              break;
 8008538:	bf00      	nop
          }
          break;
 800853a:	e004      	b.n	8008546 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fb7f 	bl	8008c42 <USBD_CtlError>
          break;
 8008544:	bf00      	nop
      }
      break;
 8008546:	e005      	b.n	8008554 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb79 	bl	8008c42 <USBD_CtlError>
      break;
 8008550:	e000      	b.n	8008554 <USBD_StdEPReq+0x330>
      break;
 8008552:	bf00      	nop
  }

  return ret;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	885b      	ldrh	r3, [r3, #2]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	2b0e      	cmp	r3, #14
 8008582:	f200 8152 	bhi.w	800882a <USBD_GetDescriptor+0x2ca>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <USBD_GetDescriptor+0x2c>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085fd 	.word	0x080085fd
 8008590:	08008615 	.word	0x08008615
 8008594:	08008655 	.word	0x08008655
 8008598:	0800882b 	.word	0x0800882b
 800859c:	0800882b 	.word	0x0800882b
 80085a0:	080087cb 	.word	0x080087cb
 80085a4:	080087f7 	.word	0x080087f7
 80085a8:	0800882b 	.word	0x0800882b
 80085ac:	0800882b 	.word	0x0800882b
 80085b0:	0800882b 	.word	0x0800882b
 80085b4:	0800882b 	.word	0x0800882b
 80085b8:	0800882b 	.word	0x0800882b
 80085bc:	0800882b 	.word	0x0800882b
 80085c0:	0800882b 	.word	0x0800882b
 80085c4:	080085c9 	.word	0x080085c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	7c12      	ldrb	r2, [r2, #16]
 80085e0:	f107 0108 	add.w	r1, r7, #8
 80085e4:	4610      	mov	r0, r2
 80085e6:	4798      	blx	r3
 80085e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085ea:	e126      	b.n	800883a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fb27 	bl	8008c42 <USBD_CtlError>
        err++;
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	3301      	adds	r3, #1
 80085f8:	72fb      	strb	r3, [r7, #11]
      break;
 80085fa:	e11e      	b.n	800883a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
      break;
 8008612:	e112      	b.n	800883a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7c1b      	ldrb	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10d      	bne.n	8008638 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008624:	f107 0208 	add.w	r2, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	2202      	movs	r2, #2
 8008634:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008636:	e100      	b.n	800883a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	f107 0208 	add.w	r2, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	2202      	movs	r2, #2
 8008650:	701a      	strb	r2, [r3, #0]
      break;
 8008652:	e0f2      	b.n	800883a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	885b      	ldrh	r3, [r3, #2]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b05      	cmp	r3, #5
 800865c:	f200 80ac 	bhi.w	80087b8 <USBD_GetDescriptor+0x258>
 8008660:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <USBD_GetDescriptor+0x108>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	08008681 	.word	0x08008681
 800866c:	080086b5 	.word	0x080086b5
 8008670:	080086e9 	.word	0x080086e9
 8008674:	0800871d 	.word	0x0800871d
 8008678:	08008751 	.word	0x08008751
 800867c:	08008785 	.word	0x08008785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7c12      	ldrb	r2, [r2, #16]
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a2:	e091      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 facb 	bl	8008c42 <USBD_CtlError>
            err++;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	3301      	adds	r3, #1
 80086b0:	72fb      	strb	r3, [r7, #11]
          break;
 80086b2:	e089      	b.n	80087c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	7c12      	ldrb	r2, [r2, #16]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d6:	e077      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fab1 	bl	8008c42 <USBD_CtlError>
            err++;
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	3301      	adds	r3, #1
 80086e4:	72fb      	strb	r3, [r7, #11]
          break;
 80086e6:	e06f      	b.n	80087c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	f107 0108 	add.w	r1, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870a:	e05d      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa97 	bl	8008c42 <USBD_CtlError>
            err++;
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	3301      	adds	r3, #1
 8008718:	72fb      	strb	r3, [r7, #11]
          break;
 800871a:	e055      	b.n	80087c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	7c12      	ldrb	r2, [r2, #16]
 8008734:	f107 0108 	add.w	r1, r7, #8
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873e:	e043      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa7d 	bl	8008c42 <USBD_CtlError>
            err++;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	3301      	adds	r3, #1
 800874c:	72fb      	strb	r3, [r7, #11]
          break;
 800874e:	e03b      	b.n	80087c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7c12      	ldrb	r2, [r2, #16]
 8008768:	f107 0108 	add.w	r1, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008772:	e029      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa63 	bl	8008c42 <USBD_CtlError>
            err++;
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	3301      	adds	r3, #1
 8008780:	72fb      	strb	r3, [r7, #11]
          break;
 8008782:	e021      	b.n	80087c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e00f      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa49 	bl	8008c42 <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e007      	b.n	80087c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa41 	bl	8008c42 <USBD_CtlError>
          err++;
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	3301      	adds	r3, #1
 80087c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087c6:	bf00      	nop
      }
      break;
 80087c8:	e037      	b.n	800883a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7c1b      	ldrb	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087da:	f107 0208 	add.w	r2, r7, #8
 80087de:	4610      	mov	r0, r2
 80087e0:	4798      	blx	r3
 80087e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087e4:	e029      	b.n	800883a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fa2a 	bl	8008c42 <USBD_CtlError>
        err++;
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	3301      	adds	r3, #1
 80087f2:	72fb      	strb	r3, [r7, #11]
      break;
 80087f4:	e021      	b.n	800883a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	7c1b      	ldrb	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10d      	bne.n	800881a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008806:	f107 0208 	add.w	r2, r7, #8
 800880a:	4610      	mov	r0, r2
 800880c:	4798      	blx	r3
 800880e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	2207      	movs	r2, #7
 8008816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008818:	e00f      	b.n	800883a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fa10 	bl	8008c42 <USBD_CtlError>
        err++;
 8008822:	7afb      	ldrb	r3, [r7, #11]
 8008824:	3301      	adds	r3, #1
 8008826:	72fb      	strb	r3, [r7, #11]
      break;
 8008828:	e007      	b.n	800883a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa08 	bl	8008c42 <USBD_CtlError>
      err++;
 8008832:	7afb      	ldrb	r3, [r7, #11]
 8008834:	3301      	adds	r3, #1
 8008836:	72fb      	strb	r3, [r7, #11]
      break;
 8008838:	bf00      	nop
  }

  if (err != 0U)
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11e      	bne.n	800887e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	88db      	ldrh	r3, [r3, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d016      	beq.n	8008876 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008848:	893b      	ldrh	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00e      	beq.n	800886c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	88da      	ldrh	r2, [r3, #6]
 8008852:	893b      	ldrh	r3, [r7, #8]
 8008854:	4293      	cmp	r3, r2
 8008856:	bf28      	it	cs
 8008858:	4613      	movcs	r3, r2
 800885a:	b29b      	uxth	r3, r3
 800885c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800885e:	893b      	ldrh	r3, [r7, #8]
 8008860:	461a      	mov	r2, r3
 8008862:	68f9      	ldr	r1, [r7, #12]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fa69 	bl	8008d3c <USBD_CtlSendData>
 800886a:	e009      	b.n	8008880 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f9e7 	bl	8008c42 <USBD_CtlError>
 8008874:	e004      	b.n	8008880 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 faba 	bl	8008df0 <USBD_CtlSendStatus>
 800887c:	e000      	b.n	8008880 <USBD_GetDescriptor+0x320>
    return;
 800887e:	bf00      	nop
  }
}
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop

08008888 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	889b      	ldrh	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d131      	bne.n	80088fe <USBD_SetAddress+0x76>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d12d      	bne.n	80088fe <USBD_SetAddress+0x76>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80088a8:	d829      	bhi.n	80088fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	885b      	ldrh	r3, [r3, #2]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d104      	bne.n	80088cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f9bc 	bl	8008c42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ca:	e01d      	b.n	8008908 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7bfa      	ldrb	r2, [r7, #15]
 80088d0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 ffeb 	bl	80098b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa86 	bl	8008df0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f2:	e009      	b.n	8008908 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fc:	e004      	b.n	8008908 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f99e 	bl	8008c42 <USBD_CtlError>
  }
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	885b      	ldrh	r3, [r3, #2]
 8008922:	b2da      	uxtb	r2, r3
 8008924:	4b4e      	ldr	r3, [pc, #312]	@ (8008a60 <USBD_SetConfig+0x150>)
 8008926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008928:	4b4d      	ldr	r3, [pc, #308]	@ (8008a60 <USBD_SetConfig+0x150>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d905      	bls.n	800893c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f985 	bl	8008c42 <USBD_CtlError>
    return USBD_FAIL;
 8008938:	2303      	movs	r3, #3
 800893a:	e08c      	b.n	8008a56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b02      	cmp	r3, #2
 8008946:	d002      	beq.n	800894e <USBD_SetConfig+0x3e>
 8008948:	2b03      	cmp	r3, #3
 800894a:	d029      	beq.n	80089a0 <USBD_SetConfig+0x90>
 800894c:	e075      	b.n	8008a3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800894e:	4b44      	ldr	r3, [pc, #272]	@ (8008a60 <USBD_SetConfig+0x150>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d020      	beq.n	8008998 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008956:	4b42      	ldr	r3, [pc, #264]	@ (8008a60 <USBD_SetConfig+0x150>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008960:	4b3f      	ldr	r3, [pc, #252]	@ (8008a60 <USBD_SetConfig+0x150>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe ffb9 	bl	80078de <USBD_SetClassConfig>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d008      	beq.n	8008988 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f962 	bl	8008c42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008986:	e065      	b.n	8008a54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fa31 	bl	8008df0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2203      	movs	r2, #3
 8008992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008996:	e05d      	b.n	8008a54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa29 	bl	8008df0 <USBD_CtlSendStatus>
      break;
 800899e:	e059      	b.n	8008a54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008a60 <USBD_SetConfig+0x150>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d112      	bne.n	80089ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80089b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008a60 <USBD_SetConfig+0x150>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089ba:	4b29      	ldr	r3, [pc, #164]	@ (8008a60 <USBD_SetConfig+0x150>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7fe ffa8 	bl	8007916 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa12 	bl	8008df0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089cc:	e042      	b.n	8008a54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089ce:	4b24      	ldr	r3, [pc, #144]	@ (8008a60 <USBD_SetConfig+0x150>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d02a      	beq.n	8008a32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fe ff96 	bl	8007916 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008a60 <USBD_SetConfig+0x150>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a60 <USBD_SetConfig+0x150>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fe ff6f 	bl	80078de <USBD_SetClassConfig>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00f      	beq.n	8008a2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f918 	bl	8008c42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fe ff7b 	bl	8007916 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a28:	e014      	b.n	8008a54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f9e0 	bl	8008df0 <USBD_CtlSendStatus>
      break;
 8008a30:	e010      	b.n	8008a54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f9dc 	bl	8008df0 <USBD_CtlSendStatus>
      break;
 8008a38:	e00c      	b.n	8008a54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f900 	bl	8008c42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a42:	4b07      	ldr	r3, [pc, #28]	@ (8008a60 <USBD_SetConfig+0x150>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7fe ff64 	bl	8007916 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	73fb      	strb	r3, [r7, #15]
      break;
 8008a52:	bf00      	nop
  }

  return ret;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000240 	.word	0x20000240

08008a64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88db      	ldrh	r3, [r3, #6]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d004      	beq.n	8008a80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f8e2 	bl	8008c42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a7e:	e023      	b.n	8008ac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	dc02      	bgt.n	8008a92 <USBD_GetConfig+0x2e>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dc03      	bgt.n	8008a98 <USBD_GetConfig+0x34>
 8008a90:	e015      	b.n	8008abe <USBD_GetConfig+0x5a>
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d00b      	beq.n	8008aae <USBD_GetConfig+0x4a>
 8008a96:	e012      	b.n	8008abe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f948 	bl	8008d3c <USBD_CtlSendData>
        break;
 8008aac:	e00c      	b.n	8008ac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f940 	bl	8008d3c <USBD_CtlSendData>
        break;
 8008abc:	e004      	b.n	8008ac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f8be 	bl	8008c42 <USBD_CtlError>
        break;
 8008ac6:	bf00      	nop
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d81e      	bhi.n	8008b26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	88db      	ldrh	r3, [r3, #6]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d004      	beq.n	8008afa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f8a5 	bl	8008c42 <USBD_CtlError>
        break;
 8008af8:	e01a      	b.n	8008b30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f043 0202 	orr.w	r2, r3, #2
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f90c 	bl	8008d3c <USBD_CtlSendData>
      break;
 8008b24:	e004      	b.n	8008b30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f88a 	bl	8008c42 <USBD_CtlError>
      break;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	bf00      	nop
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d107      	bne.n	8008b5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f94c 	bl	8008df0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b58:	e013      	b.n	8008b82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d10b      	bne.n	8008b7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	0a1b      	lsrs	r3, r3, #8
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f93c 	bl	8008df0 <USBD_CtlSendStatus>
}
 8008b78:	e003      	b.n	8008b82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f860 	bl	8008c42 <USBD_CtlError>
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d80b      	bhi.n	8008bba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d10c      	bne.n	8008bc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f91c 	bl	8008df0 <USBD_CtlSendStatus>
      }
      break;
 8008bb8:	e004      	b.n	8008bc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f840 	bl	8008c42 <USBD_CtlError>
      break;
 8008bc2:	e000      	b.n	8008bc6 <USBD_ClrFeature+0x3c>
      break;
 8008bc4:	bf00      	nop
  }
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fa16 	bl	800802a <SWAPBYTE>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	461a      	mov	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fa09 	bl	800802a <SWAPBYTE>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f7ff f9fc 	bl	800802a <SWAPBYTE>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	80da      	strh	r2, [r3, #6]
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c4c:	2180      	movs	r1, #128	@ 0x80
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fd98 	bl	8009784 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c54:	2100      	movs	r1, #0
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fd94 	bl	8009784 <USBD_LL_StallEP>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d042      	beq.n	8008d00 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f000 f842 	bl	8008d08 <USBD_GetLen>
 8008c84:	4603      	mov	r3, r0
 8008c86:	3301      	adds	r3, #1
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c8e:	d808      	bhi.n	8008ca2 <USBD_GetString+0x3e>
 8008c90:	6938      	ldr	r0, [r7, #16]
 8008c92:	f000 f839 	bl	8008d08 <USBD_GetLen>
 8008c96:	4603      	mov	r3, r0
 8008c98:	3301      	adds	r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	e001      	b.n	8008ca6 <USBD_GetString+0x42>
 8008ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	4413      	add	r3, r2
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ccc:	e013      	b.n	8008cf6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]
    idx++;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	4413      	add	r3, r2
 8008cec:	2200      	movs	r2, #0
 8008cee:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e7      	bne.n	8008cce <USBD_GetString+0x6a>
 8008cfe:	e000      	b.n	8008d02 <USBD_GetString+0x9e>
    return;
 8008d00:	bf00      	nop
  }
}
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d18:	e005      	b.n	8008d26 <USBD_GetLen+0x1e>
  {
    len++;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3301      	adds	r3, #1
 8008d24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f5      	bne.n	8008d1a <USBD_GetLen+0x12>
  }

  return len;
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	2100      	movs	r1, #0
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fddc 	bl	8009920 <USBD_LL_Transmit>

  return USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	2100      	movs	r1, #0
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fdcb 	bl	8009920 <USBD_LL_Transmit>

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2203      	movs	r2, #3
 8008da4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fde6 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	2100      	movs	r1, #0
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 fdd5 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fd8a 	bl	8009920 <USBD_LL_Transmit>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2205      	movs	r2, #5
 8008e22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e26:	2300      	movs	r3, #0
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fdaf 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e40:	2200      	movs	r2, #0
 8008e42:	4912      	ldr	r1, [pc, #72]	@ (8008e8c <MX_USB_DEVICE_Init+0x50>)
 8008e44:	4812      	ldr	r0, [pc, #72]	@ (8008e90 <MX_USB_DEVICE_Init+0x54>)
 8008e46:	f7fe fccd 	bl	80077e4 <USBD_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e50:	f7f8 f8aa 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e54:	490f      	ldr	r1, [pc, #60]	@ (8008e94 <MX_USB_DEVICE_Init+0x58>)
 8008e56:	480e      	ldr	r0, [pc, #56]	@ (8008e90 <MX_USB_DEVICE_Init+0x54>)
 8008e58:	f7fe fcf4 	bl	8007844 <USBD_RegisterClass>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e62:	f7f8 f8a1 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e66:	490c      	ldr	r1, [pc, #48]	@ (8008e98 <MX_USB_DEVICE_Init+0x5c>)
 8008e68:	4809      	ldr	r0, [pc, #36]	@ (8008e90 <MX_USB_DEVICE_Init+0x54>)
 8008e6a:	f7fe fbeb 	bl	8007644 <USBD_CDC_RegisterInterface>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e74:	f7f8 f898 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e78:	4805      	ldr	r0, [pc, #20]	@ (8008e90 <MX_USB_DEVICE_Init+0x54>)
 8008e7a:	f7fe fd19 	bl	80078b0 <USBD_Start>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e84:	f7f8 f890 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e88:	bf00      	nop
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	200000b0 	.word	0x200000b0
 8008e90:	20000244 	.word	0x20000244
 8008e94:	2000001c 	.word	0x2000001c
 8008e98:	2000009c 	.word	0x2000009c

08008e9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4905      	ldr	r1, [pc, #20]	@ (8008eb8 <CDC_Init_FS+0x1c>)
 8008ea4:	4805      	ldr	r0, [pc, #20]	@ (8008ebc <CDC_Init_FS+0x20>)
 8008ea6:	f7fe fbe7 	bl	8007678 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008eaa:	4905      	ldr	r1, [pc, #20]	@ (8008ec0 <CDC_Init_FS+0x24>)
 8008eac:	4803      	ldr	r0, [pc, #12]	@ (8008ebc <CDC_Init_FS+0x20>)
 8008eae:	f7fe fc05 	bl	80076bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008eb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000d20 	.word	0x20000d20
 8008ebc:	20000244 	.word	0x20000244
 8008ec0:	20000520 	.word	0x20000520

08008ec4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ec8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b23      	cmp	r3, #35	@ 0x23
 8008ee8:	d84a      	bhi.n	8008f80 <CDC_Control_FS+0xac>
 8008eea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <CDC_Control_FS+0x1c>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f81 	.word	0x08008f81
 8008ef4:	08008f81 	.word	0x08008f81
 8008ef8:	08008f81 	.word	0x08008f81
 8008efc:	08008f81 	.word	0x08008f81
 8008f00:	08008f81 	.word	0x08008f81
 8008f04:	08008f81 	.word	0x08008f81
 8008f08:	08008f81 	.word	0x08008f81
 8008f0c:	08008f81 	.word	0x08008f81
 8008f10:	08008f81 	.word	0x08008f81
 8008f14:	08008f81 	.word	0x08008f81
 8008f18:	08008f81 	.word	0x08008f81
 8008f1c:	08008f81 	.word	0x08008f81
 8008f20:	08008f81 	.word	0x08008f81
 8008f24:	08008f81 	.word	0x08008f81
 8008f28:	08008f81 	.word	0x08008f81
 8008f2c:	08008f81 	.word	0x08008f81
 8008f30:	08008f81 	.word	0x08008f81
 8008f34:	08008f81 	.word	0x08008f81
 8008f38:	08008f81 	.word	0x08008f81
 8008f3c:	08008f81 	.word	0x08008f81
 8008f40:	08008f81 	.word	0x08008f81
 8008f44:	08008f81 	.word	0x08008f81
 8008f48:	08008f81 	.word	0x08008f81
 8008f4c:	08008f81 	.word	0x08008f81
 8008f50:	08008f81 	.word	0x08008f81
 8008f54:	08008f81 	.word	0x08008f81
 8008f58:	08008f81 	.word	0x08008f81
 8008f5c:	08008f81 	.word	0x08008f81
 8008f60:	08008f81 	.word	0x08008f81
 8008f64:	08008f81 	.word	0x08008f81
 8008f68:	08008f81 	.word	0x08008f81
 8008f6c:	08008f81 	.word	0x08008f81
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008f81 	.word	0x08008f81
 8008f78:	08008f81 	.word	0x08008f81
 8008f7c:	08008f81 	.word	0x08008f81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f80:	bf00      	nop
  }

  return (USBD_OK);
 8008f82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4808      	ldr	r0, [pc, #32]	@ (8008fc0 <CDC_Receive_FS+0x30>)
 8008f9e:	f7fe fb8d 	bl	80076bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fa2:	4807      	ldr	r0, [pc, #28]	@ (8008fc0 <CDC_Receive_FS+0x30>)
 8008fa4:	f7fe fbe8 	bl	8007778 <USBD_CDC_ReceivePacket>

  parseCmd(Buf, *Len);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f7 fd62 	bl	8000a78 <parseCmd>
  return (USBD_OK);
 8008fb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000244 	.word	0x20000244

08008fc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <CDC_Transmit_FS+0x48>)
 8008fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e00b      	b.n	8009002 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fea:	887b      	ldrh	r3, [r7, #2]
 8008fec:	461a      	mov	r2, r3
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4806      	ldr	r0, [pc, #24]	@ (800900c <CDC_Transmit_FS+0x48>)
 8008ff2:	f7fe fb41 	bl	8007678 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ff6:	4805      	ldr	r0, [pc, #20]	@ (800900c <CDC_Transmit_FS+0x48>)
 8008ff8:	f7fe fb7e 	bl	80076f8 <USBD_CDC_TransmitPacket>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000244 	.word	0x20000244

08009010 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009026:	4618      	mov	r0, r3
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
	...

08009034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2212      	movs	r2, #18
 8009044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009046:	4b03      	ldr	r3, [pc, #12]	@ (8009054 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	200000d0 	.word	0x200000d0

08009058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2204      	movs	r2, #4
 8009068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800906a:	4b03      	ldr	r3, [pc, #12]	@ (8009078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200000f0 	.word	0x200000f0

0800907c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	@ (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	@ (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009094:	f7ff fde6 	bl	8008c64 <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	@ (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	@ (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a0:	f7ff fde0 	bl	8008c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	@ (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20001520 	.word	0x20001520
 80090b4:	08009b70 	.word	0x08009b70

080090b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	4904      	ldr	r1, [pc, #16]	@ (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090c8:	4804      	ldr	r0, [pc, #16]	@ (80090dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ca:	f7ff fdcb 	bl	8008c64 <USBD_GetString>
  return USBD_StrDesc;
 80090ce:	4b02      	ldr	r3, [pc, #8]	@ (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20001520 	.word	0x20001520
 80090dc:	08009b88 	.word	0x08009b88

080090e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	221a      	movs	r2, #26
 80090f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090f2:	f000 f855 	bl	80091a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090f6:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	200000f4 	.word	0x200000f4

08009104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4907      	ldr	r1, [pc, #28]	@ (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800911a:	4808      	ldr	r0, [pc, #32]	@ (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 800911c:	f7ff fda2 	bl	8008c64 <USBD_GetString>
 8009120:	e004      	b.n	800912c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4904      	ldr	r1, [pc, #16]	@ (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009126:	4805      	ldr	r0, [pc, #20]	@ (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009128:	f7ff fd9c 	bl	8008c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800912c:	4b02      	ldr	r3, [pc, #8]	@ (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20001520 	.word	0x20001520
 800913c:	08009b9c 	.word	0x08009b9c

08009140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4907      	ldr	r1, [pc, #28]	@ (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009156:	4808      	ldr	r0, [pc, #32]	@ (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009158:	f7ff fd84 	bl	8008c64 <USBD_GetString>
 800915c:	e004      	b.n	8009168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4904      	ldr	r1, [pc, #16]	@ (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009162:	4805      	ldr	r0, [pc, #20]	@ (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009164:	f7ff fd7e 	bl	8008c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009168:	4b02      	ldr	r3, [pc, #8]	@ (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20001520 	.word	0x20001520
 8009178:	08009ba8 	.word	0x08009ba8

0800917c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	220c      	movs	r2, #12
 800918c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800918e:	4b03      	ldr	r3, [pc, #12]	@ (800919c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	200000e4 	.word	0x200000e4

080091a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091a6:	4b0f      	ldr	r3, [pc, #60]	@ (80091e4 <Get_SerialNum+0x44>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091ac:	4b0e      	ldr	r3, [pc, #56]	@ (80091e8 <Get_SerialNum+0x48>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091b2:	4b0e      	ldr	r3, [pc, #56]	@ (80091ec <Get_SerialNum+0x4c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4413      	add	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d009      	beq.n	80091da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091c6:	2208      	movs	r2, #8
 80091c8:	4909      	ldr	r1, [pc, #36]	@ (80091f0 <Get_SerialNum+0x50>)
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f814 	bl	80091f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091d0:	2204      	movs	r2, #4
 80091d2:	4908      	ldr	r1, [pc, #32]	@ (80091f4 <Get_SerialNum+0x54>)
 80091d4:	68b8      	ldr	r0, [r7, #8]
 80091d6:	f000 f80f 	bl	80091f8 <IntToUnicode>
  }
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	1fff7590 	.word	0x1fff7590
 80091e8:	1fff7594 	.word	0x1fff7594
 80091ec:	1fff7598 	.word	0x1fff7598
 80091f0:	200000f6 	.word	0x200000f6
 80091f4:	20000106 	.word	0x20000106

080091f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]
 800920e:	e027      	b.n	8009260 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	0f1b      	lsrs	r3, r3, #28
 8009214:	2b09      	cmp	r3, #9
 8009216:	d80b      	bhi.n	8009230 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	0f1b      	lsrs	r3, r3, #28
 800921c:	b2da      	uxtb	r2, r3
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	4619      	mov	r1, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	440b      	add	r3, r1
 8009228:	3230      	adds	r2, #48	@ 0x30
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	e00a      	b.n	8009246 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	0f1b      	lsrs	r3, r3, #28
 8009234:	b2da      	uxtb	r2, r3
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	4619      	mov	r1, r3
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	440b      	add	r3, r1
 8009240:	3237      	adds	r2, #55	@ 0x37
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	3301      	adds	r3, #1
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	4413      	add	r3, r2
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	3301      	adds	r3, #1
 800925e:	75fb      	strb	r3, [r7, #23]
 8009260:	7dfa      	ldrb	r2, [r7, #23]
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	429a      	cmp	r2, r3
 8009266:	d3d3      	bcc.n	8009210 <IntToUnicode+0x18>
  }
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
	...

08009278 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b0ac      	sub	sp, #176	@ 0xb0
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009280:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	605a      	str	r2, [r3, #4]
 800928a:	609a      	str	r2, [r3, #8]
 800928c:	60da      	str	r2, [r3, #12]
 800928e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	2288      	movs	r2, #136	@ 0x88
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fc31 	bl	8009b00 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092a6:	d173      	bne.n	8009390 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80092a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80092ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80092b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80092b6:	2301      	movs	r3, #1
 80092b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80092ba:	2301      	movs	r3, #1
 80092bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80092be:	2318      	movs	r3, #24
 80092c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80092c2:	2307      	movs	r3, #7
 80092c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80092c6:	2302      	movs	r3, #2
 80092c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80092ca:	2302      	movs	r3, #2
 80092cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80092ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80092d2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80092d4:	f107 0314 	add.w	r3, r7, #20
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fa fb6b 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80092e4:	f7f7 fe60 	bl	8000fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 80092ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 80092ee:	f043 0301 	orr.w	r3, r3, #1
 80092f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092f4:	4b28      	ldr	r3, [pc, #160]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 80092f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	613b      	str	r3, [r7, #16]
 80092fe:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009300:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009308:	2302      	movs	r3, #2
 800930a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800930e:	2300      	movs	r3, #0
 8009310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009314:	2303      	movs	r3, #3
 8009316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800931a:	230a      	movs	r3, #10
 800931c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009320:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009324:	4619      	mov	r1, r3
 8009326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800932a:	f7f8 f979 	bl	8001620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800932e:	4b1a      	ldr	r3, [pc, #104]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009332:	4a19      	ldr	r2, [pc, #100]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800933a:	4b17      	ldr	r3, [pc, #92]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 800933c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800933e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009346:	4b14      	ldr	r3, [pc, #80]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d114      	bne.n	800937c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009352:	4b11      	ldr	r3, [pc, #68]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009356:	4a10      	ldr	r2, [pc, #64]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800935c:	6593      	str	r3, [r2, #88]	@ 0x58
 800935e:	4b0e      	ldr	r3, [pc, #56]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800936a:	f7f9 fd15 	bl	8002d98 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800936e:	4b0a      	ldr	r3, [pc, #40]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009372:	4a09      	ldr	r2, [pc, #36]	@ (8009398 <HAL_PCD_MspInit+0x120>)
 8009374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009378:	6593      	str	r3, [r2, #88]	@ 0x58
 800937a:	e001      	b.n	8009380 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800937c:	f7f9 fd0c 	bl	8002d98 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	2043      	movs	r0, #67	@ 0x43
 8009386:	f7f8 f8d4 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800938a:	2043      	movs	r0, #67	@ 0x43
 800938c:	f7f8 f8ed 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009390:	bf00      	nop
 8009392:	37b0      	adds	r7, #176	@ 0xb0
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40021000 	.word	0x40021000

0800939c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fe fac9 	bl	800794a <USBD_LL_SetupStage>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	4619      	mov	r1, r3
 80093ea:	f7fe fb03 	bl	80079f4 <USBD_LL_DataOutStage>
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3320      	adds	r3, #32
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	4619      	mov	r1, r3
 800941e:	f7fe fb9c 	bl	8007b5a <USBD_LL_DataInStage>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fcd6 	bl	8007dea <USBD_LL_SOF>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800944e:	2301      	movs	r3, #1
 8009450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	79db      	ldrb	r3, [r3, #7]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d001      	beq.n	800945e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800945a:	f7f7 fda5 	bl	8000fa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009464:	7bfa      	ldrb	r2, [r7, #15]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f7fe fc7a 	bl	8007d62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fc22 	bl	8007cbe <USBD_LL_Reset>
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fc69 	bl	8007d82 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7adb      	ldrb	r3, [r3, #11]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094b8:	4b04      	ldr	r3, [pc, #16]	@ (80094cc <HAL_PCD_SuspendCallback+0x48>)
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	4a03      	ldr	r2, [pc, #12]	@ (80094cc <HAL_PCD_SuspendCallback+0x48>)
 80094be:	f043 0306 	orr.w	r3, r3, #6
 80094c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	e000ed00 	.word	0xe000ed00

080094d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6812      	ldr	r2, [r2, #0]
 80094e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7adb      	ldrb	r3, [r3, #11]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094f8:	4b08      	ldr	r3, [pc, #32]	@ (800951c <HAL_PCD_ResumeCallback+0x4c>)
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	4a07      	ldr	r2, [pc, #28]	@ (800951c <HAL_PCD_ResumeCallback+0x4c>)
 80094fe:	f023 0306 	bic.w	r3, r3, #6
 8009502:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009504:	f000 faf6 	bl	8009af4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fc53 	bl	8007dba <USBD_LL_Resume>
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	e000ed00 	.word	0xe000ed00

08009520 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fca9 	bl	8007e8e <USBD_LL_IsoOUTIncomplete>
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fc65 	bl	8007e2a <USBD_LL_IsoINIncomplete>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fcbb 	bl	8007ef2 <USBD_LL_DevConnected>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fcb8 	bl	8007f08 <USBD_LL_DevDisconnected>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d13c      	bne.n	800962a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095b0:	4a20      	ldr	r2, [pc, #128]	@ (8009634 <USBD_LL_Init+0x94>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009634 <USBD_LL_Init+0x94>)
 80095bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009634 <USBD_LL_Init+0x94>)
 80095c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80095c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009634 <USBD_LL_Init+0x94>)
 80095ca:	2206      	movs	r2, #6
 80095cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095ce:	4b19      	ldr	r3, [pc, #100]	@ (8009634 <USBD_LL_Init+0x94>)
 80095d0:	2202      	movs	r2, #2
 80095d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095d4:	4b17      	ldr	r3, [pc, #92]	@ (8009634 <USBD_LL_Init+0x94>)
 80095d6:	2202      	movs	r2, #2
 80095d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095da:	4b16      	ldr	r3, [pc, #88]	@ (8009634 <USBD_LL_Init+0x94>)
 80095dc:	2200      	movs	r2, #0
 80095de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095e0:	4b14      	ldr	r3, [pc, #80]	@ (8009634 <USBD_LL_Init+0x94>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095e6:	4b13      	ldr	r3, [pc, #76]	@ (8009634 <USBD_LL_Init+0x94>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80095ec:	4b11      	ldr	r3, [pc, #68]	@ (8009634 <USBD_LL_Init+0x94>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095f2:	4b10      	ldr	r3, [pc, #64]	@ (8009634 <USBD_LL_Init+0x94>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009634 <USBD_LL_Init+0x94>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095fe:	480d      	ldr	r0, [pc, #52]	@ (8009634 <USBD_LL_Init+0x94>)
 8009600:	f7f8 f9d0 	bl	80019a4 <HAL_PCD_Init>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800960a:	f7f7 fccd 	bl	8000fa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800960e:	2180      	movs	r1, #128	@ 0x80
 8009610:	4808      	ldr	r0, [pc, #32]	@ (8009634 <USBD_LL_Init+0x94>)
 8009612:	f7f9 fb28 	bl	8002c66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009616:	2240      	movs	r2, #64	@ 0x40
 8009618:	2100      	movs	r1, #0
 800961a:	4806      	ldr	r0, [pc, #24]	@ (8009634 <USBD_LL_Init+0x94>)
 800961c:	f7f9 fadc 	bl	8002bd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009620:	2280      	movs	r2, #128	@ 0x80
 8009622:	2101      	movs	r1, #1
 8009624:	4803      	ldr	r0, [pc, #12]	@ (8009634 <USBD_LL_Init+0x94>)
 8009626:	f7f9 fad7 	bl	8002bd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20001720 	.word	0x20001720

08009638 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800964e:	4618      	mov	r0, r3
 8009650:	f7f8 fab7 	bl	8001bc2 <HAL_PCD_Start>
 8009654:	4603      	mov	r3, r0
 8009656:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d816      	bhi.n	800968c <USBD_LL_Start+0x54>
 800965e:	a201      	add	r2, pc, #4	@ (adr r2, 8009664 <USBD_LL_Start+0x2c>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009675 	.word	0x08009675
 8009668:	0800967b 	.word	0x0800967b
 800966c:	08009681 	.word	0x08009681
 8009670:	08009687 	.word	0x08009687
    case HAL_OK :
      usb_status = USBD_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
    break;
 8009678:	e00b      	b.n	8009692 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800967a:	2303      	movs	r3, #3
 800967c:	73fb      	strb	r3, [r7, #15]
    break;
 800967e:	e008      	b.n	8009692 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009680:	2301      	movs	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
    break;
 8009684:	e005      	b.n	8009692 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	73fb      	strb	r3, [r7, #15]
    break;
 800968a:	e002      	b.n	8009692 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	73fb      	strb	r3, [r7, #15]
    break;
 8009690:	bf00      	nop
  }
  return usb_status;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	70fb      	strb	r3, [r7, #3]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70bb      	strb	r3, [r7, #2]
 80096b2:	4613      	mov	r3, r2
 80096b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096c4:	78bb      	ldrb	r3, [r7, #2]
 80096c6:	883a      	ldrh	r2, [r7, #0]
 80096c8:	78f9      	ldrb	r1, [r7, #3]
 80096ca:	f7f8 ff63 	bl	8002594 <HAL_PCD_EP_Open>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d817      	bhi.n	8009708 <USBD_LL_OpenEP+0x6c>
 80096d8:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <USBD_LL_OpenEP+0x44>)
 80096da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096de:	bf00      	nop
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	080096f7 	.word	0x080096f7
 80096e8:	080096fd 	.word	0x080096fd
 80096ec:	08009703 	.word	0x08009703
    case HAL_OK :
      usb_status = USBD_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
    break;
 80096f4:	e00b      	b.n	800970e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	73fb      	strb	r3, [r7, #15]
    break;
 80096fa:	e008      	b.n	800970e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009700:	e005      	b.n	800970e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009702:	2303      	movs	r3, #3
 8009704:	73fb      	strb	r3, [r7, #15]
    break;
 8009706:	e002      	b.n	800970e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	bf00      	nop
  }
  return usb_status;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7f8 ff96 	bl	8002668 <HAL_PCD_EP_Close>
 800973c:	4603      	mov	r3, r0
 800973e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b03      	cmp	r3, #3
 8009744:	d816      	bhi.n	8009774 <USBD_LL_CloseEP+0x5c>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <USBD_LL_CloseEP+0x34>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	0800975d 	.word	0x0800975d
 8009750:	08009763 	.word	0x08009763
 8009754:	08009769 	.word	0x08009769
 8009758:	0800976f 	.word	0x0800976f
    case HAL_OK :
      usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	e00b      	b.n	800977a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
    break;
 8009766:	e008      	b.n	800977a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009768:	2301      	movs	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	e005      	b.n	800977a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800976e:	2303      	movs	r3, #3
 8009770:	73fb      	strb	r3, [r7, #15]
    break;
 8009772:	e002      	b.n	800977a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009774:	2303      	movs	r3, #3
 8009776:	73fb      	strb	r3, [r7, #15]
    break;
 8009778:	bf00      	nop
  }
  return usb_status;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800979e:	78fa      	ldrb	r2, [r7, #3]
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f9 f825 	bl	80027f2 <HAL_PCD_EP_SetStall>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d816      	bhi.n	80097e0 <USBD_LL_StallEP+0x5c>
 80097b2:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <USBD_LL_StallEP+0x34>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097cf 	.word	0x080097cf
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097db 	.word	0x080097db
    case HAL_OK :
      usb_status = USBD_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e00b      	b.n	80097e6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e008      	b.n	80097e6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	e005      	b.n	80097e6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097da:	2303      	movs	r3, #3
 80097dc:	73fb      	strb	r3, [r7, #15]
    break;
 80097de:	e002      	b.n	80097e6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	73fb      	strb	r3, [r7, #15]
    break;
 80097e4:	bf00      	nop
  }
  return usb_status;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f7f9 f851 	bl	80028b6 <HAL_PCD_EP_ClrStall>
 8009814:	4603      	mov	r3, r0
 8009816:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d816      	bhi.n	800984c <USBD_LL_ClearStallEP+0x5c>
 800981e:	a201      	add	r2, pc, #4	@ (adr r2, 8009824 <USBD_LL_ClearStallEP+0x34>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	08009835 	.word	0x08009835
 8009828:	0800983b 	.word	0x0800983b
 800982c:	08009841 	.word	0x08009841
 8009830:	08009847 	.word	0x08009847
    case HAL_OK :
      usb_status = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
    break;
 8009838:	e00b      	b.n	8009852 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800983a:	2303      	movs	r3, #3
 800983c:	73fb      	strb	r3, [r7, #15]
    break;
 800983e:	e008      	b.n	8009852 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009840:	2301      	movs	r3, #1
 8009842:	73fb      	strb	r3, [r7, #15]
    break;
 8009844:	e005      	b.n	8009852 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009846:	2303      	movs	r3, #3
 8009848:	73fb      	strb	r3, [r7, #15]
    break;
 800984a:	e002      	b.n	8009852 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800984c:	2303      	movs	r3, #3
 800984e:	73fb      	strb	r3, [r7, #15]
    break;
 8009850:	bf00      	nop
  }
  return usb_status;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800986e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da0b      	bge.n	8009890 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3316      	adds	r3, #22
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	e00b      	b.n	80098a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	4613      	mov	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80098a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	4611      	mov	r1, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7f8 fe3a 	bl	800254c <HAL_PCD_SetAddress>
 80098d8:	4603      	mov	r3, r0
 80098da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d816      	bhi.n	8009910 <USBD_LL_SetUSBAddress+0x5c>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <USBD_LL_SetUSBAddress+0x34>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	080098f9 	.word	0x080098f9
 80098ec:	080098ff 	.word	0x080098ff
 80098f0:	08009905 	.word	0x08009905
 80098f4:	0800990b 	.word	0x0800990b
    case HAL_OK :
      usb_status = USBD_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
    break;
 80098fc:	e00b      	b.n	8009916 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098fe:	2303      	movs	r3, #3
 8009900:	73fb      	strb	r3, [r7, #15]
    break;
 8009902:	e008      	b.n	8009916 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009904:	2301      	movs	r3, #1
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	e005      	b.n	8009916 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800990a:	2303      	movs	r3, #3
 800990c:	73fb      	strb	r3, [r7, #15]
    break;
 800990e:	e002      	b.n	8009916 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	73fb      	strb	r3, [r7, #15]
    break;
 8009914:	bf00      	nop
  }
  return usb_status;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	607a      	str	r2, [r7, #4]
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	460b      	mov	r3, r1
 800992e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800993e:	7af9      	ldrb	r1, [r7, #11]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	f7f8 ff24 	bl	8002790 <HAL_PCD_EP_Transmit>
 8009948:	4603      	mov	r3, r0
 800994a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800994c:	7dbb      	ldrb	r3, [r7, #22]
 800994e:	2b03      	cmp	r3, #3
 8009950:	d816      	bhi.n	8009980 <USBD_LL_Transmit+0x60>
 8009952:	a201      	add	r2, pc, #4	@ (adr r2, 8009958 <USBD_LL_Transmit+0x38>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	08009969 	.word	0x08009969
 800995c:	0800996f 	.word	0x0800996f
 8009960:	08009975 	.word	0x08009975
 8009964:	0800997b 	.word	0x0800997b
    case HAL_OK :
      usb_status = USBD_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	75fb      	strb	r3, [r7, #23]
    break;
 800996c:	e00b      	b.n	8009986 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800996e:	2303      	movs	r3, #3
 8009970:	75fb      	strb	r3, [r7, #23]
    break;
 8009972:	e008      	b.n	8009986 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009974:	2301      	movs	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]
    break;
 8009978:	e005      	b.n	8009986 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800997a:	2303      	movs	r3, #3
 800997c:	75fb      	strb	r3, [r7, #23]
    break;
 800997e:	e002      	b.n	8009986 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009980:	2303      	movs	r3, #3
 8009982:	75fb      	strb	r3, [r7, #23]
    break;
 8009984:	bf00      	nop
  }
  return usb_status;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	460b      	mov	r3, r1
 800999e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099ae:	7af9      	ldrb	r1, [r7, #11]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	f7f8 fea2 	bl	80026fc <HAL_PCD_EP_Receive>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80099bc:	7dbb      	ldrb	r3, [r7, #22]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d816      	bhi.n	80099f0 <USBD_LL_PrepareReceive+0x60>
 80099c2:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <USBD_LL_PrepareReceive+0x38>)
 80099c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c8:	080099d9 	.word	0x080099d9
 80099cc:	080099df 	.word	0x080099df
 80099d0:	080099e5 	.word	0x080099e5
 80099d4:	080099eb 	.word	0x080099eb
    case HAL_OK :
      usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
    break;
 80099dc:	e00b      	b.n	80099f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099de:	2303      	movs	r3, #3
 80099e0:	75fb      	strb	r3, [r7, #23]
    break;
 80099e2:	e008      	b.n	80099f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099e4:	2301      	movs	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]
    break;
 80099e8:	e005      	b.n	80099f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099ea:	2303      	movs	r3, #3
 80099ec:	75fb      	strb	r3, [r7, #23]
    break;
 80099ee:	e002      	b.n	80099f6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80099f0:	2303      	movs	r3, #3
 80099f2:	75fb      	strb	r3, [r7, #23]
    break;
 80099f4:	bf00      	nop
  }
  return usb_status;
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a12:	78fa      	ldrb	r2, [r7, #3]
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7f8 fea2 	bl	8002760 <HAL_PCD_EP_GetRxCount>
 8009a1c:	4603      	mov	r3, r0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_PCDEx_LPM_Callback+0x18>
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d01f      	beq.n	8009a7e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009a3e:	e03b      	b.n	8009ab8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	7adb      	ldrb	r3, [r3, #11]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d007      	beq.n	8009a58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a48:	f000 f854 	bl	8009af4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ac0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a52:	f023 0306 	bic.w	r3, r3, #6
 8009a56:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe f99f 	bl	8007dba <USBD_LL_Resume>
    break;
 8009a7c:	e01c      	b.n	8009ab8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	6812      	ldr	r2, [r2, #0]
 8009a8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe f970 	bl	8007d82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7adb      	ldrb	r3, [r3, #11]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d005      	beq.n	8009ab6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aaa:	4b05      	ldr	r3, [pc, #20]	@ (8009ac0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	4a04      	ldr	r2, [pc, #16]	@ (8009ac0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009ab0:	f043 0306 	orr.w	r3, r3, #6
 8009ab4:	6113      	str	r3, [r2, #16]
    break;
 8009ab6:	bf00      	nop
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	e000ed00 	.word	0xe000ed00

08009ac4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009acc:	4b03      	ldr	r3, [pc, #12]	@ (8009adc <USBD_static_malloc+0x18>)
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	20001c04 	.word	0x20001c04

08009ae0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]

}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009af8:	f7f7 f8c0 	bl	8000c7c <SystemClock_Config>
}
 8009afc:	bf00      	nop
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <memset>:
 8009b00:	4402      	add	r2, r0
 8009b02:	4603      	mov	r3, r0
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d100      	bne.n	8009b0a <memset+0xa>
 8009b08:	4770      	bx	lr
 8009b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0e:	e7f9      	b.n	8009b04 <memset+0x4>

08009b10 <__libc_init_array>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4d0d      	ldr	r5, [pc, #52]	@ (8009b48 <__libc_init_array+0x38>)
 8009b14:	4c0d      	ldr	r4, [pc, #52]	@ (8009b4c <__libc_init_array+0x3c>)
 8009b16:	1b64      	subs	r4, r4, r5
 8009b18:	10a4      	asrs	r4, r4, #2
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	d109      	bne.n	8009b34 <__libc_init_array+0x24>
 8009b20:	4d0b      	ldr	r5, [pc, #44]	@ (8009b50 <__libc_init_array+0x40>)
 8009b22:	4c0c      	ldr	r4, [pc, #48]	@ (8009b54 <__libc_init_array+0x44>)
 8009b24:	f000 f818 	bl	8009b58 <_init>
 8009b28:	1b64      	subs	r4, r4, r5
 8009b2a:	10a4      	asrs	r4, r4, #2
 8009b2c:	2600      	movs	r6, #0
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	d105      	bne.n	8009b3e <__libc_init_array+0x2e>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b38:	4798      	blx	r3
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7ee      	b.n	8009b1c <__libc_init_array+0xc>
 8009b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b42:	4798      	blx	r3
 8009b44:	3601      	adds	r6, #1
 8009b46:	e7f2      	b.n	8009b2e <__libc_init_array+0x1e>
 8009b48:	08009c08 	.word	0x08009c08
 8009b4c:	08009c08 	.word	0x08009c08
 8009b50:	08009c08 	.word	0x08009c08
 8009b54:	08009c0c 	.word	0x08009c0c

08009b58 <_init>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	bf00      	nop
 8009b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5e:	bc08      	pop	{r3}
 8009b60:	469e      	mov	lr, r3
 8009b62:	4770      	bx	lr

08009b64 <_fini>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	bf00      	nop
 8009b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6a:	bc08      	pop	{r3}
 8009b6c:	469e      	mov	lr, r3
 8009b6e:	4770      	bx	lr
