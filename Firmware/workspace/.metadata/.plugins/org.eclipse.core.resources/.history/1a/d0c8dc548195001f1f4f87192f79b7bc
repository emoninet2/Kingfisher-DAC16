/*
 * DACx1416.h
 *
 *  Created on: Oct 18, 2024
 *      Author: habiburrahman
 */

#ifndef INC_DACX1416_H_
#define INC_DACX1416_H_

#include <stdbool.h>





typedef enum{
	DACx1416_REG_NOP,
	DACx1416_REG_DEVICEID,
	DACx1416_REG_STATUS,
	DACx1416_REG_SPICONFIG,
	DACx1416_REG_GENCONFIG,
	DACx1416_REG_BRDCONFIG,
	DACx1416_REG_SYNCCONFIG,
	DACx1416_REG_TOGGCONFIG0,
	DACx1416_REG_TOGGCONFIG1,
	DACx1416_REG_DACPWDWN,
	DACx1416_REG_DACRANGE0,
	DACx1416_REG_DACRANGE1,
	DACx1416_REG_DACRANGE2,
	DACx1416_REG_DACRANGE3,
	DACx1416_REG_TRIGGER,
	DACx1416_REG_BRDCAST,
	DACx1416_REG_DAC0,
	DACx1416_REG_DAC1,
	DACx1416_REG_DAC2,
	DACx1416_REG_DAC3,
	DACx1416_REG_DAC4,
	DACx1416_REG_DAC5,
	DACx1416_REG_DAC6,
	DACx1416_REG_DAC7,
	DACx1416_REG_DAC8,
	DACx1416_REG_DAC9,
	DACx1416_REG_DAC10,
	DACx1416_REG_DAC11,
	DACx1416_REG_DAC12,
	DACx1416_REG_DAC13,
	DACx1416_REG_DAC14,
	DACx1416_REG_DAC15,
	DACx1416_REG_OFFSET0,
	DACx1416_REG_OFFSET1,
	DACx1416_REG_OFFSET2,
	DACx1416_REG_OFFSET3,
}DACx1416_register_t;



typedef struct{
	uint8_t deviceId;
	uint8_t versionId;
}DACx1416_deviceID_t;

typedef struct{
	bool crc_alarm;
	bool dac_busy;
	bool temp_alarm;
}DACx1416_status_t;

typedef struct{
	bool tempalm_en;
	bool dacbusy_en;
	bool crcalm_en;
	bool softtoggle_en;
	bool dev_pwdwn;
	bool crc_en;
	bool str_en;
	bool sdo_en;
	bool fsdo_en;
}DACx1416_spiconfig_t;


typedef struct {
    // Function pointers for SPI operations
    void (*SPI_transmit)(uint8_t *txBuffer, uint16_t size);
    void (*SPI_receive)(uint8_t *rxBuffer, uint16_t size);
    void (*SPI_transmitReceive)(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size);
} DACx1416_HandleTypeDef;




void DACx1416_SPI_transmit(uint8_t *txBuffer,uint16_t size);
void DACx1416_SPI_receive(uint8_t *rxBuffer,uint16_t size);
void DACx1416_SPI_transmitReceive(uint8_t *txBuffer, uint8_t *rxBuffer, uint16_t size);

void DACx1416_write_register_old(uint8_t address, uint16_t data);
uint16_t DACx1416_read_register_old(uint8_t address);


void DACx1416_write_register(DACx1416_HandleTypeDef dac, uint8_t address, uint16_t data);

uint16_t DACx1416_read_register(DACx1416_HandleTypeDef dac, uint8_t address);


DACx1416_deviceID_t get_device_id(DACx1416_HandleTypeDef dac);



#endif /* INC_DACX1416_H_ */
